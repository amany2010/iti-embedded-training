
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000236a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b0  00800060  0000236a  000023fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800210  00800210  000025ae  2**0
                  ALLOC
  3 .stab         00001e60  00000000  00000000  000025b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000108a  00000000  00000000  00004410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000549a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000055da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000574a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007393  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000827e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000902c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000918c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009419  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009be7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__vector_1>
       8:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_2>
       c:	0c 94 2e 0b 	jmp	0x165c	; 0x165c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <__vector_10>
      2c:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 32       	cpi	r26, 0x23	; 35
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d7 10 	call	0x21ae	; 0x21ae <main>
      8a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ee       	ldi	r26, 0xE0	; 224
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 73 11 	jmp	0x22e6	; 0x22e6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ee       	ldi	r24, 0xE0	; 224
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8f 11 	jmp	0x231e	; 0x231e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7f 11 	jmp	0x22fe	; 0x22fe <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 83 11 	jmp	0x2306	; 0x2306 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_voidInit>:
/* I/P Parameters: No thing									          		  */
/* Returns:it returns No thing                                				  */
/* Desc:This Function Set the initial direction & value of All pins       	  */
/******************************************************************************/
void MDIO_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Set all port A pins Direction due to pre-configurations.*/
	DIO_u8_DDRA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
			 	 	 	 	  DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION,
							  DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);

	/*Set all port B pins Direction due to pre-configurations.*/
	DIO_u8_DDRB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
				 	 	 	  DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION,
							  DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);

	/*Set all port C pins Direction due to pre-configurations.*/
	DIO_u8_DDRC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	87 e0       	ldi	r24, 0x07	; 7
     b64:	80 83       	st	Z, r24
					 	 	  DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION,
							  DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);

	/*Set all port D pins Direction due to pre-configurations.*/
	DIO_u8_DDRD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION,
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8e ef       	ldi	r24, 0xFE	; 254
     b6c:	80 83       	st	Z, r24
					 	 	  DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION,
							  DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);

	/*Set all port A pins Values due to pre-configurations.*/
	DIO_u8_PORTA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE,
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1
	 	 	                   DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE,
			                   DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);

	/*Set all port B pins Values due to pre-configurations.*/
	DIO_u8_PORTB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE,
     b74:	e8 e3       	ldi	r30, 0x38	; 56
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	10 82       	st	Z, r1
    			 	 	 	   DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE,
    						   DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);

	/*Set all port C pins Values due to pre-configurations.*/
    DIO_u8_PORTC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE,
     b7a:	e5 e3       	ldi	r30, 0x35	; 53
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1
    				 	 	   DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE,
    						   DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);

    /*Set all port D pins Values due to pre-configurations.*/
    DIO_u8_PORTD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE,
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
    				 	 	   DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE,
    						   DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);
 }
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <MDIO_voidSetPinDirection>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8PinDirection: DIO_u8_OUTPUT - DIO_u8_INPUT						  */
/******************************************************************************/
void MDIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	2d 97       	sbiw	r28, 0x0d	; 13
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	6a 83       	std	Y+2, r22	; 0x02
     ba4:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	84 30       	cpi	r24, 0x04	; 4
     baa:	08 f0       	brcs	.+2      	; 0xbae <MDIO_voidSetPinDirection+0x22>
     bac:	04 c1       	rjmp	.+520    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	88 30       	cpi	r24, 0x08	; 8
     bb2:	08 f0       	brcs	.+2      	; 0xbb6 <MDIO_voidSetPinDirection+0x2a>
     bb4:	00 c1       	rjmp	.+512    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	3d 87       	std	Y+13, r19	; 0x0d
     bbe:	2c 87       	std	Y+12, r18	; 0x0c
     bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <MDIO_voidSetPinDirection+0x40>
     bca:	4f c0       	rjmp	.+158    	; 0xc6a <MDIO_voidSetPinDirection+0xde>
     bcc:	2c 85       	ldd	r18, Y+12	; 0x0c
     bce:	3d 85       	ldd	r19, Y+13	; 0x0d
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <MDIO_voidSetPinDirection+0x54>
     bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	71 f0       	breq	.+28     	; 0xbfa <MDIO_voidSetPinDirection+0x6e>
     bde:	eb c0       	rjmp	.+470    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
     be0:	2c 85       	ldd	r18, Y+12	; 0x0c
     be2:	3d 85       	ldd	r19, Y+13	; 0x0d
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	09 f4       	brne	.+2      	; 0xbec <MDIO_voidSetPinDirection+0x60>
     bea:	77 c0       	rjmp	.+238    	; 0xcda <MDIO_voidSetPinDirection+0x14e>
     bec:	8c 85       	ldd	r24, Y+12	; 0x0c
     bee:	9d 85       	ldd	r25, Y+13	; 0x0d
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	91 05       	cpc	r25, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <MDIO_voidSetPinDirection+0x6c>
     bf6:	a9 c0       	rjmp	.+338    	; 0xd4a <MDIO_voidSetPinDirection+0x1be>
     bf8:	de c0       	rjmp	.+444    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8PinDirection) //Check on Direction
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	3b 87       	std	Y+11, r19	; 0x0b
     c02:	2a 87       	std	Y+10, r18	; 0x0a
     c04:	8a 85       	ldd	r24, Y+10	; 0x0a
     c06:	9b 85       	ldd	r25, Y+11	; 0x0b
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	d1 f0       	breq	.+52     	; 0xc40 <MDIO_voidSetPinDirection+0xb4>
     c0c:	2a 85       	ldd	r18, Y+10	; 0x0a
     c0e:	3b 85       	ldd	r19, Y+11	; 0x0b
     c10:	21 30       	cpi	r18, 0x01	; 1
     c12:	31 05       	cpc	r19, r1
     c14:	09 f0       	breq	.+2      	; 0xc18 <MDIO_voidSetPinDirection+0x8c>
     c16:	cf c0       	rjmp	.+414    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Output
     c18:	aa e3       	ldi	r26, 0x3A	; 58
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	ea e3       	ldi	r30, 0x3A	; 58
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <MDIO_voidSetPinDirection+0xaa>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <MDIO_voidSetPinDirection+0xa6>
     c3a:	84 2b       	or	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	bb c0       	rjmp	.+374    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Input
     c40:	aa e3       	ldi	r26, 0x3A	; 58
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	ea e3       	ldi	r30, 0x3A	; 58
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <MDIO_voidSetPinDirection+0xd2>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <MDIO_voidSetPinDirection+0xce>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	a6 c0       	rjmp	.+332    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8PinDirection) //Check on Direction
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	39 87       	std	Y+9, r19	; 0x09
     c72:	28 87       	std	Y+8, r18	; 0x08
     c74:	88 85       	ldd	r24, Y+8	; 0x08
     c76:	99 85       	ldd	r25, Y+9	; 0x09
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	d1 f0       	breq	.+52     	; 0xcb0 <MDIO_voidSetPinDirection+0x124>
     c7c:	28 85       	ldd	r18, Y+8	; 0x08
     c7e:	39 85       	ldd	r19, Y+9	; 0x09
     c80:	21 30       	cpi	r18, 0x01	; 1
     c82:	31 05       	cpc	r19, r1
     c84:	09 f0       	breq	.+2      	; 0xc88 <MDIO_voidSetPinDirection+0xfc>
     c86:	97 c0       	rjmp	.+302    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Output
     c88:	a7 e3       	ldi	r26, 0x37	; 55
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e7 e3       	ldi	r30, 0x37	; 55
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <MDIO_voidSetPinDirection+0x11a>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <MDIO_voidSetPinDirection+0x116>
     caa:	84 2b       	or	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	83 c0       	rjmp	.+262    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Input
     cb0:	a7 e3       	ldi	r26, 0x37	; 55
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e7 e3       	ldi	r30, 0x37	; 55
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 2e       	mov	r0, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <MDIO_voidSetPinDirection+0x142>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <MDIO_voidSetPinDirection+0x13e>
     cd2:	80 95       	com	r24
     cd4:	84 23       	and	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	6e c0       	rjmp	.+220    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8PinDirection) //Check on Direction
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	3f 83       	std	Y+7, r19	; 0x07
     ce2:	2e 83       	std	Y+6, r18	; 0x06
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	d1 f0       	breq	.+52     	; 0xd20 <MDIO_voidSetPinDirection+0x194>
     cec:	2e 81       	ldd	r18, Y+6	; 0x06
     cee:	3f 81       	ldd	r19, Y+7	; 0x07
     cf0:	21 30       	cpi	r18, 0x01	; 1
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <MDIO_voidSetPinDirection+0x16c>
     cf6:	5f c0       	rjmp	.+190    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Output
     cf8:	a4 e3       	ldi	r26, 0x34	; 52
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e4 e3       	ldi	r30, 0x34	; 52
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	48 2f       	mov	r20, r24
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 2e       	mov	r0, r18
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <MDIO_voidSetPinDirection+0x18a>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <MDIO_voidSetPinDirection+0x186>
     d1a:	84 2b       	or	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	4b c0       	rjmp	.+150    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Input
     d20:	a4 e3       	ldi	r26, 0x34	; 52
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e4 e3       	ldi	r30, 0x34	; 52
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <MDIO_voidSetPinDirection+0x1b2>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <MDIO_voidSetPinDirection+0x1ae>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	36 c0       	rjmp	.+108    	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8PinDirection) //Check on Direction
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	3d 83       	std	Y+5, r19	; 0x05
     d52:	2c 83       	std	Y+4, r18	; 0x04
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	9d 81       	ldd	r25, Y+5	; 0x05
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	c9 f0       	breq	.+50     	; 0xd8e <MDIO_voidSetPinDirection+0x202>
     d5c:	2c 81       	ldd	r18, Y+4	; 0x04
     d5e:	3d 81       	ldd	r19, Y+5	; 0x05
     d60:	21 30       	cpi	r18, 0x01	; 1
     d62:	31 05       	cpc	r19, r1
     d64:	41 f5       	brne	.+80     	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Output
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <MDIO_voidSetPinDirection+0x1f8>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <MDIO_voidSetPinDirection+0x1f4>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Input
     d8e:	a1 e3       	ldi	r26, 0x31	; 49
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e1 e3       	ldi	r30, 0x31	; 49
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <MDIO_voidSetPinDirection+0x220>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <MDIO_voidSetPinDirection+0x21c>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
     db6:	2d 96       	adiw	r28, 0x0d	; 13
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <MDIO_voidSetPinValue>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8Value: DIO_u8_HIGH - DIO_u8_LOW		    						  */
/******************************************************************************/
void MDIO_voidSetPinValue (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8Value)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	2d 97       	sbiw	r28, 0x0d	; 13
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	6a 83       	std	Y+2, r22	; 0x02
     de0:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	84 30       	cpi	r24, 0x04	; 4
     de6:	08 f0       	brcs	.+2      	; 0xdea <MDIO_voidSetPinValue+0x22>
     de8:	04 c1       	rjmp	.+520    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	88 30       	cpi	r24, 0x08	; 8
     dee:	08 f0       	brcs	.+2      	; 0xdf2 <MDIO_voidSetPinValue+0x2a>
     df0:	00 c1       	rjmp	.+512    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	3d 87       	std	Y+13, r19	; 0x0d
     dfa:	2c 87       	std	Y+12, r18	; 0x0c
     dfc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfe:	9d 85       	ldd	r25, Y+13	; 0x0d
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	91 05       	cpc	r25, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <MDIO_voidSetPinValue+0x40>
     e06:	4f c0       	rjmp	.+158    	; 0xea6 <MDIO_voidSetPinValue+0xde>
     e08:	2c 85       	ldd	r18, Y+12	; 0x0c
     e0a:	3d 85       	ldd	r19, Y+13	; 0x0d
     e0c:	22 30       	cpi	r18, 0x02	; 2
     e0e:	31 05       	cpc	r19, r1
     e10:	2c f4       	brge	.+10     	; 0xe1c <MDIO_voidSetPinValue+0x54>
     e12:	8c 85       	ldd	r24, Y+12	; 0x0c
     e14:	9d 85       	ldd	r25, Y+13	; 0x0d
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	71 f0       	breq	.+28     	; 0xe36 <MDIO_voidSetPinValue+0x6e>
     e1a:	eb c0       	rjmp	.+470    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
     e1c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e1e:	3d 85       	ldd	r19, Y+13	; 0x0d
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <MDIO_voidSetPinValue+0x60>
     e26:	77 c0       	rjmp	.+238    	; 0xf16 <MDIO_voidSetPinValue+0x14e>
     e28:	8c 85       	ldd	r24, Y+12	; 0x0c
     e2a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <MDIO_voidSetPinValue+0x6c>
     e32:	a9 c0       	rjmp	.+338    	; 0xf86 <MDIO_voidSetPinValue+0x1be>
     e34:	de c0       	rjmp	.+444    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8Value) //Check on Value
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	3b 87       	std	Y+11, r19	; 0x0b
     e3e:	2a 87       	std	Y+10, r18	; 0x0a
     e40:	8a 85       	ldd	r24, Y+10	; 0x0a
     e42:	9b 85       	ldd	r25, Y+11	; 0x0b
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	d1 f0       	breq	.+52     	; 0xe7c <MDIO_voidSetPinValue+0xb4>
     e48:	2a 85       	ldd	r18, Y+10	; 0x0a
     e4a:	3b 85       	ldd	r19, Y+11	; 0x0b
     e4c:	21 30       	cpi	r18, 0x01	; 1
     e4e:	31 05       	cpc	r19, r1
     e50:	09 f0       	breq	.+2      	; 0xe54 <MDIO_voidSetPinValue+0x8c>
     e52:	cf c0       	rjmp	.+414    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as High
     e54:	ab e3       	ldi	r26, 0x3B	; 59
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	eb e3       	ldi	r30, 0x3B	; 59
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <MDIO_voidSetPinValue+0xaa>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <MDIO_voidSetPinValue+0xa6>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	bb c0       	rjmp	.+374    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as Low
     e7c:	ab e3       	ldi	r26, 0x3B	; 59
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	eb e3       	ldi	r30, 0x3B	; 59
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <MDIO_voidSetPinValue+0xd2>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <MDIO_voidSetPinValue+0xce>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	a6 c0       	rjmp	.+332    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8Value) //Check on Value
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	39 87       	std	Y+9, r19	; 0x09
     eae:	28 87       	std	Y+8, r18	; 0x08
     eb0:	88 85       	ldd	r24, Y+8	; 0x08
     eb2:	99 85       	ldd	r25, Y+9	; 0x09
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	d1 f0       	breq	.+52     	; 0xeec <MDIO_voidSetPinValue+0x124>
     eb8:	28 85       	ldd	r18, Y+8	; 0x08
     eba:	39 85       	ldd	r19, Y+9	; 0x09
     ebc:	21 30       	cpi	r18, 0x01	; 1
     ebe:	31 05       	cpc	r19, r1
     ec0:	09 f0       	breq	.+2      	; 0xec4 <MDIO_voidSetPinValue+0xfc>
     ec2:	97 c0       	rjmp	.+302    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as High
     ec4:	a8 e3       	ldi	r26, 0x38	; 56
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e8 e3       	ldi	r30, 0x38	; 56
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <MDIO_voidSetPinValue+0x11a>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <MDIO_voidSetPinValue+0x116>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	83 c0       	rjmp	.+262    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as Low
     eec:	a8 e3       	ldi	r26, 0x38	; 56
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e8 e3       	ldi	r30, 0x38	; 56
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <MDIO_voidSetPinValue+0x142>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <MDIO_voidSetPinValue+0x13e>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	6e c0       	rjmp	.+220    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8Value) //Check on Value
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3f 83       	std	Y+7, r19	; 0x07
     f1e:	2e 83       	std	Y+6, r18	; 0x06
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	9f 81       	ldd	r25, Y+7	; 0x07
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	d1 f0       	breq	.+52     	; 0xf5c <MDIO_voidSetPinValue+0x194>
     f28:	2e 81       	ldd	r18, Y+6	; 0x06
     f2a:	3f 81       	ldd	r19, Y+7	; 0x07
     f2c:	21 30       	cpi	r18, 0x01	; 1
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f0       	breq	.+2      	; 0xf34 <MDIO_voidSetPinValue+0x16c>
     f32:	5f c0       	rjmp	.+190    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as High
     f34:	a5 e3       	ldi	r26, 0x35	; 53
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e5 e3       	ldi	r30, 0x35	; 53
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <MDIO_voidSetPinValue+0x18a>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <MDIO_voidSetPinValue+0x186>
     f56:	84 2b       	or	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	4b c0       	rjmp	.+150    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as Low
     f5c:	a5 e3       	ldi	r26, 0x35	; 53
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e5 e3       	ldi	r30, 0x35	; 53
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <MDIO_voidSetPinValue+0x1b2>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <MDIO_voidSetPinValue+0x1ae>
     f7e:	80 95       	com	r24
     f80:	84 23       	and	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	36 c0       	rjmp	.+108    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8Value) //Check on Value
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	3d 83       	std	Y+5, r19	; 0x05
     f8e:	2c 83       	std	Y+4, r18	; 0x04
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	c9 f0       	breq	.+50     	; 0xfca <MDIO_voidSetPinValue+0x202>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	21 30       	cpi	r18, 0x01	; 1
     f9e:	31 05       	cpc	r19, r1
     fa0:	41 f5       	brne	.+80     	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as High
     fa2:	a2 e3       	ldi	r26, 0x32	; 50
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e2 e3       	ldi	r30, 0x32	; 50
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <MDIO_voidSetPinValue+0x1f8>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <MDIO_voidSetPinValue+0x1f4>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as Low
     fca:	a2 e3       	ldi	r26, 0x32	; 50
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e2 e3       	ldi	r30, 0x32	; 50
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <MDIO_voidSetPinValue+0x220>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <MDIO_voidSetPinValue+0x21c>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
     ff2:	2d 96       	adiw	r28, 0x0d	; 13
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <MDIO_u8GetPinValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/******************************************************************************/
u8   MDIO_u8GetPinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <MDIO_u8GetPinValue+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <MDIO_u8GetPinValue+0x8>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Value=2; //set initial value for needed pin value
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	89 83       	std	Y+1, r24	; 0x01

	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	84 30       	cpi	r24, 0x04	; 4
    101e:	08 f0       	brcs	.+2      	; 0x1022 <MDIO_u8GetPinValue+0x1e>
    1020:	6b c0       	rjmp	.+214    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	88 30       	cpi	r24, 0x08	; 8
    1026:	08 f0       	brcs	.+2      	; 0x102a <MDIO_u8GetPinValue+0x26>
    1028:	67 c0       	rjmp	.+206    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3d 83       	std	Y+5, r19	; 0x05
    1032:	2c 83       	std	Y+4, r18	; 0x04
    1034:	4c 81       	ldd	r20, Y+4	; 0x04
    1036:	5d 81       	ldd	r21, Y+5	; 0x05
    1038:	41 30       	cpi	r20, 0x01	; 1
    103a:	51 05       	cpc	r21, r1
    103c:	41 f1       	breq	.+80     	; 0x108e <MDIO_u8GetPinValue+0x8a>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	91 05       	cpc	r25, r1
    1046:	34 f4       	brge	.+12     	; 0x1054 <MDIO_u8GetPinValue+0x50>
    1048:	2c 81       	ldd	r18, Y+4	; 0x04
    104a:	3d 81       	ldd	r19, Y+5	; 0x05
    104c:	21 15       	cp	r18, r1
    104e:	31 05       	cpc	r19, r1
    1050:	61 f0       	breq	.+24     	; 0x106a <MDIO_u8GetPinValue+0x66>
    1052:	52 c0       	rjmp	.+164    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
    1054:	4c 81       	ldd	r20, Y+4	; 0x04
    1056:	5d 81       	ldd	r21, Y+5	; 0x05
    1058:	42 30       	cpi	r20, 0x02	; 2
    105a:	51 05       	cpc	r21, r1
    105c:	51 f1       	breq	.+84     	; 0x10b2 <MDIO_u8GetPinValue+0xae>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	91 05       	cpc	r25, r1
    1066:	b9 f1       	breq	.+110    	; 0x10d6 <MDIO_u8GetPinValue+0xd2>
    1068:	47 c0       	rjmp	.+142    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
		{
		case DIO_u8_PORTA:
							local_u8Value = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);  // Read the pin value
    106a:	e9 e3       	ldi	r30, 0x39	; 57
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <MDIO_u8GetPinValue+0x7e>
    107e:	55 95       	asr	r21
    1080:	47 95       	ror	r20
    1082:	8a 95       	dec	r24
    1084:	e2 f7       	brpl	.-8      	; 0x107e <MDIO_u8GetPinValue+0x7a>
    1086:	ca 01       	movw	r24, r20
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	35 c0       	rjmp	.+106    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTB:
							local_u8Value = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId); // Read the pin value
    108e:	e6 e3       	ldi	r30, 0x36	; 54
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a9 01       	movw	r20, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <MDIO_u8GetPinValue+0xa2>
    10a2:	55 95       	asr	r21
    10a4:	47 95       	ror	r20
    10a6:	8a 95       	dec	r24
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <MDIO_u8GetPinValue+0x9e>
    10aa:	ca 01       	movw	r24, r20
    10ac:	81 70       	andi	r24, 0x01	; 1
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	23 c0       	rjmp	.+70     	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTC:
							local_u8Value = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId); // Read the pin value
    10b2:	e3 e3       	ldi	r30, 0x33	; 51
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a9 01       	movw	r20, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <MDIO_u8GetPinValue+0xc6>
    10c6:	55 95       	asr	r21
    10c8:	47 95       	ror	r20
    10ca:	8a 95       	dec	r24
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <MDIO_u8GetPinValue+0xc2>
    10ce:	ca 01       	movw	r24, r20
    10d0:	81 70       	andi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	11 c0       	rjmp	.+34     	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTD:
							local_u8Value = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId); // Read the pin value
    10d6:	e0 e3       	ldi	r30, 0x30	; 48
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a9 01       	movw	r20, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <MDIO_u8GetPinValue+0xea>
    10ea:	55 95       	asr	r21
    10ec:	47 95       	ror	r20
    10ee:	8a 95       	dec	r24
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <MDIO_u8GetPinValue+0xe6>
    10f2:	ca 01       	movw	r24, r20
    10f4:	81 70       	andi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else

	return local_u8Value;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <MDIO_voidSetPortDirection>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinDirection: Set the Direction in hex format 					  */
/******************************************************************************/
void MDIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <MDIO_voidSetPortDirection+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <MDIO_voidSetPortDirection+0x8>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	90 f5       	brcc	.+100    	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 83       	std	Y+4, r19	; 0x04
    1128:	2b 83       	std	Y+3, r18	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	d1 f0       	breq	.+52     	; 0x1168 <MDIO_voidSetPortDirection+0x5e>
    1134:	2b 81       	ldd	r18, Y+3	; 0x03
    1136:	3c 81       	ldd	r19, Y+4	; 0x04
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <MDIO_voidSetPortDirection+0x3e>
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <MDIO_voidSetPortDirection+0x54>
    1146:	1e c0       	rjmp	.+60     	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <MDIO_voidSetPortDirection+0x68>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	81 f0       	breq	.+32     	; 0x117c <MDIO_voidSetPortDirection+0x72>
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_DDRA_REG=copy_u8PortDirection;  // Set the port Direction
    115e:	ea e3       	ldi	r30, 0x3A	; 58
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	80 83       	st	Z, r24
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_DDRB_REG=copy_u8PortDirection;  // Set the port Direction
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	80 83       	st	Z, r24
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_DDRC_REG=copy_u8PortDirection;  // Set the port Direction
    1172:	e4 e3       	ldi	r30, 0x34	; 52
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	80 83       	st	Z, r24
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_DDRD_REG=copy_u8PortDirection;  // Set the port Direction
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <MDIO_voidSetPortValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinValue: Set the Direction in hex format 					  	  */
/******************************************************************************/
void MDIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <MDIO_voidSetPortValue+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <MDIO_voidSetPortValue+0x8>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	90 f5       	brcc	.+100    	; 0x120c <MDIO_voidSetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3c 83       	std	Y+4, r19	; 0x04
    11b0:	2b 83       	std	Y+3, r18	; 0x03
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	d1 f0       	breq	.+52     	; 0x11f0 <MDIO_voidSetPortValue+0x5e>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <MDIO_voidSetPortValue+0x3e>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <MDIO_voidSetPortValue+0x54>
    11ce:	1e c0       	rjmp	.+60     	; 0x120c <MDIO_voidSetPortValue+0x7a>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	81 f0       	breq	.+32     	; 0x11fa <MDIO_voidSetPortValue+0x68>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	81 f0       	breq	.+32     	; 0x1204 <MDIO_voidSetPortValue+0x72>
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_PORTA_REG=copy_u8PortValue;  // Set the port Value
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 83       	st	Z, r24
    11ee:	0e c0       	rjmp	.+28     	; 0x120c <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_PORTB_REG=copy_u8PortValue;  // Set the port Value
    11f0:	e8 e3       	ldi	r30, 0x38	; 56
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_PORTC_REG=copy_u8PortValue;  // Set the port Value
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	80 83       	st	Z, r24
    1202:	04 c0       	rjmp	.+8      	; 0x120c <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_PORTD_REG=copy_u8PortValue;  // Set the port Value
    1204:	e2 e3       	ldi	r30, 0x32	; 50
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <MDIO_voidGetPortValue>:
/******************************************************************************/
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/******************************************************************************/
u8 MDIO_voidGetPortValue(u8 copy_u8PortId)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <MDIO_voidGetPortValue+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <MDIO_voidGetPortValue+0x8>
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8PortValue=0;
    1228:	19 82       	std	Y+1, r1	; 0x01
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	90 f5       	brcc	.+100    	; 0x1294 <MDIO_voidGetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3c 83       	std	Y+4, r19	; 0x04
    1238:	2b 83       	std	Y+3, r18	; 0x03
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	91 05       	cpc	r25, r1
    1242:	d1 f0       	breq	.+52     	; 0x1278 <MDIO_voidGetPortValue+0x5e>
    1244:	2b 81       	ldd	r18, Y+3	; 0x03
    1246:	3c 81       	ldd	r19, Y+4	; 0x04
    1248:	22 30       	cpi	r18, 0x02	; 2
    124a:	31 05       	cpc	r19, r1
    124c:	2c f4       	brge	.+10     	; 0x1258 <MDIO_voidGetPortValue+0x3e>
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	61 f0       	breq	.+24     	; 0x126e <MDIO_voidGetPortValue+0x54>
    1256:	1e c0       	rjmp	.+60     	; 0x1294 <MDIO_voidGetPortValue+0x7a>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	81 f0       	breq	.+32     	; 0x1282 <MDIO_voidGetPortValue+0x68>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	83 30       	cpi	r24, 0x03	; 3
    1268:	91 05       	cpc	r25, r1
    126a:	81 f0       	breq	.+32     	; 0x128c <MDIO_voidGetPortValue+0x72>
    126c:	13 c0       	rjmp	.+38     	; 0x1294 <MDIO_voidGetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							local_u8PortValue = DIO_u8_PINA_REG;  // Read the port Value
    126e:	e9 e3       	ldi	r30, 0x39	; 57
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	0e c0       	rjmp	.+28     	; 0x1294 <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							local_u8PortValue = DIO_u8_PINB_REG;  // Read the port Value
    1278:	e6 e3       	ldi	r30, 0x36	; 54
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	89 83       	std	Y+1, r24	; 0x01
    1280:	09 c0       	rjmp	.+18     	; 0x1294 <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							local_u8PortValue = DIO_u8_PINC_REG;  // Read the port Value
    1282:	e3 e3       	ldi	r30, 0x33	; 51
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							local_u8PortValue = DIO_u8_PIND_REG;  // Read the port Value
    128c:	e0 e3       	ldi	r30, 0x30	; 48
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else
	return local_u8PortValue; // return port value
    1294:	89 81       	ldd	r24, Y+1	; 0x01
}
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <MEXTI_voidEXTIEnable>:
// Array of pointers to function
static void (*pf[3]) (void)={NULL,NULL,NULL};


void MEXTI_voidEXTIEnable(u8 copy_u8EXTI_Num, u8 copy_u8EXTI_Sense)
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
    12ac:	2a 97       	sbiw	r28, 0x0a	; 10
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_u8EXTI_Num < 0 || copy_u8EXTI_Num > 2 || copy_u8EXTI_Sense < 0 || copy_u8EXTI_Sense > 3)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	08 f0       	brcs	.+2      	; 0x12c4 <MEXTI_voidEXTIEnable+0x20>
    12c2:	0b c1       	rjmp	.+534    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	84 30       	cpi	r24, 0x04	; 4
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <MEXTI_voidEXTIEnable+0x28>
    12ca:	07 c1       	rjmp	.+526    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
	{

	}
	else if ((copy_u8EXTI_Num == EXTI_u8_EXTI2) && (copy_u8EXTI_Sense < 2))
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	82 30       	cpi	r24, 0x02	; 2
    12d0:	21 f4       	brne	.+8      	; 0x12da <MEXTI_voidEXTIEnable+0x36>
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	08 f4       	brcc	.+2      	; 0x12da <MEXTI_voidEXTIEnable+0x36>
    12d8:	00 c1       	rjmp	.+512    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
	{

	}
	else
	{
		switch (copy_u8EXTI_Num)
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	3a 87       	std	Y+10, r19	; 0x0a
    12e2:	29 87       	std	Y+9, r18	; 0x09
    12e4:	89 85       	ldd	r24, Y+9	; 0x09
    12e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <MEXTI_voidEXTIEnable+0x4c>
    12ee:	6d c0       	rjmp	.+218    	; 0x13ca <MEXTI_voidEXTIEnable+0x126>
    12f0:	29 85       	ldd	r18, Y+9	; 0x09
    12f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    12f4:	22 30       	cpi	r18, 0x02	; 2
    12f6:	31 05       	cpc	r19, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <MEXTI_voidEXTIEnable+0x58>
    12fa:	c9 c0       	rjmp	.+402    	; 0x148e <MEXTI_voidEXTIEnable+0x1ea>
    12fc:	89 85       	ldd	r24, Y+9	; 0x09
    12fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	09 f0       	breq	.+2      	; 0x1306 <MEXTI_voidEXTIEnable+0x62>
    1304:	ea c0       	rjmp	.+468    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
		{
		  case EXTI_u8_EXTI0:

						      SET_BIT(EXTI_u8_GICR,EXTI_u8_EXTI0_ENABLE_BIT);
    1306:	ab e5       	ldi	r26, 0x5B	; 91
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	eb e5       	ldi	r30, 0x5B	; 91
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	80 64       	ori	r24, 0x40	; 64
    1312:	8c 93       	st	X, r24
						      switch (copy_u8EXTI_Sense)
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	38 87       	std	Y+8, r19	; 0x08
    131c:	2f 83       	std	Y+7, r18	; 0x07
    131e:	8f 81       	ldd	r24, Y+7	; 0x07
    1320:	98 85       	ldd	r25, Y+8	; 0x08
    1322:	81 30       	cpi	r24, 0x01	; 1
    1324:	91 05       	cpc	r25, r1
    1326:	21 f1       	breq	.+72     	; 0x1370 <MEXTI_voidEXTIEnable+0xcc>
    1328:	2f 81       	ldd	r18, Y+7	; 0x07
    132a:	38 85       	ldd	r19, Y+8	; 0x08
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	2c f4       	brge	.+10     	; 0x133c <MEXTI_voidEXTIEnable+0x98>
    1332:	8f 81       	ldd	r24, Y+7	; 0x07
    1334:	98 85       	ldd	r25, Y+8	; 0x08
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	61 f0       	breq	.+24     	; 0x1352 <MEXTI_voidEXTIEnable+0xae>
    133a:	cf c0       	rjmp	.+414    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
    133c:	2f 81       	ldd	r18, Y+7	; 0x07
    133e:	38 85       	ldd	r19, Y+8	; 0x08
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	21 f1       	breq	.+72     	; 0x138e <MEXTI_voidEXTIEnable+0xea>
    1346:	8f 81       	ldd	r24, Y+7	; 0x07
    1348:	98 85       	ldd	r25, Y+8	; 0x08
    134a:	83 30       	cpi	r24, 0x03	; 3
    134c:	91 05       	cpc	r25, r1
    134e:	71 f1       	breq	.+92     	; 0x13ac <MEXTI_voidEXTIEnable+0x108>
    1350:	c4 c0       	rjmp	.+392    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
						      {
						         case EXTI_u8_LOW_LEVEL_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT0);
    1352:	a5 e5       	ldi	r26, 0x55	; 85
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e5 e5       	ldi	r30, 0x55	; 85
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8e 7f       	andi	r24, 0xFE	; 254
    135e:	8c 93       	st	X, r24
															 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT1);
    1360:	a5 e5       	ldi	r26, 0x55	; 85
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e5 e5       	ldi	r30, 0x55	; 85
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8d 7f       	andi	r24, 0xFD	; 253
    136c:	8c 93       	st	X, r24
    136e:	b5 c0       	rjmp	.+362    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_IOC_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT0);
    1370:	a5 e5       	ldi	r26, 0x55	; 85
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e5 e5       	ldi	r30, 0x55	; 85
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	81 60       	ori	r24, 0x01	; 1
    137c:	8c 93       	st	X, r24
															 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT1);
    137e:	a5 e5       	ldi	r26, 0x55	; 85
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e5       	ldi	r30, 0x55	; 85
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	8d 7f       	andi	r24, 0xFD	; 253
    138a:	8c 93       	st	X, r24
    138c:	a6 c0       	rjmp	.+332    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_FALLING_EDGE_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT0);
    138e:	a5 e5       	ldi	r26, 0x55	; 85
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e5 e5       	ldi	r30, 0x55	; 85
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	8e 7f       	andi	r24, 0xFE	; 254
    139a:	8c 93       	st	X, r24
															 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT1);
    139c:	a5 e5       	ldi	r26, 0x55	; 85
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e5 e5       	ldi	r30, 0x55	; 85
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	82 60       	ori	r24, 0x02	; 2
    13a8:	8c 93       	st	X, r24
    13aa:	97 c0       	rjmp	.+302    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_RISING_EDGE_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT0);
    13ac:	a5 e5       	ldi	r26, 0x55	; 85
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e5       	ldi	r30, 0x55	; 85
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	81 60       	ori	r24, 0x01	; 1
    13b8:	8c 93       	st	X, r24
															 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT1);
    13ba:	a5 e5       	ldi	r26, 0x55	; 85
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e5 e5       	ldi	r30, 0x55	; 85
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	82 60       	ori	r24, 0x02	; 2
    13c6:	8c 93       	st	X, r24
    13c8:	88 c0       	rjmp	.+272    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
															 break;
						      }
			  	  	  	  	  break;

		  case EXTI_u8_EXTI1:
							  SET_BIT(EXTI_u8_GICR,EXTI_u8_EXTI1_ENABLE_BIT);
    13ca:	ab e5       	ldi	r26, 0x5B	; 91
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	eb e5       	ldi	r30, 0x5B	; 91
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	80 68       	ori	r24, 0x80	; 128
    13d6:	8c 93       	st	X, r24
						      switch (copy_u8EXTI_Sense)
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	3e 83       	std	Y+6, r19	; 0x06
    13e0:	2d 83       	std	Y+5, r18	; 0x05
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	91 05       	cpc	r25, r1
    13ea:	21 f1       	breq	.+72     	; 0x1434 <MEXTI_voidEXTIEnable+0x190>
    13ec:	2d 81       	ldd	r18, Y+5	; 0x05
    13ee:	3e 81       	ldd	r19, Y+6	; 0x06
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	2c f4       	brge	.+10     	; 0x1400 <MEXTI_voidEXTIEnable+0x15c>
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	61 f0       	breq	.+24     	; 0x1416 <MEXTI_voidEXTIEnable+0x172>
    13fe:	6d c0       	rjmp	.+218    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
    1400:	2d 81       	ldd	r18, Y+5	; 0x05
    1402:	3e 81       	ldd	r19, Y+6	; 0x06
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	21 f1       	breq	.+72     	; 0x1452 <MEXTI_voidEXTIEnable+0x1ae>
    140a:	8d 81       	ldd	r24, Y+5	; 0x05
    140c:	9e 81       	ldd	r25, Y+6	; 0x06
    140e:	83 30       	cpi	r24, 0x03	; 3
    1410:	91 05       	cpc	r25, r1
    1412:	71 f1       	breq	.+92     	; 0x1470 <MEXTI_voidEXTIEnable+0x1cc>
    1414:	62 c0       	rjmp	.+196    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
						      {
						         case EXTI_u8_LOW_LEVEL_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT2);
    1416:	a5 e5       	ldi	r26, 0x55	; 85
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e5 e5       	ldi	r30, 0x55	; 85
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8b 7f       	andi	r24, 0xFB	; 251
    1422:	8c 93       	st	X, r24
															 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT3);
    1424:	a5 e5       	ldi	r26, 0x55	; 85
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e5 e5       	ldi	r30, 0x55	; 85
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	87 7f       	andi	r24, 0xF7	; 247
    1430:	8c 93       	st	X, r24
    1432:	53 c0       	rjmp	.+166    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_IOC_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT2);
    1434:	a5 e5       	ldi	r26, 0x55	; 85
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e5 e5       	ldi	r30, 0x55	; 85
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	84 60       	ori	r24, 0x04	; 4
    1440:	8c 93       	st	X, r24
															 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT3);
    1442:	a5 e5       	ldi	r26, 0x55	; 85
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e5       	ldi	r30, 0x55	; 85
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	87 7f       	andi	r24, 0xF7	; 247
    144e:	8c 93       	st	X, r24
    1450:	44 c0       	rjmp	.+136    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_FALLING_EDGE_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT2);
    1452:	a5 e5       	ldi	r26, 0x55	; 85
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e5 e5       	ldi	r30, 0x55	; 85
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8b 7f       	andi	r24, 0xFB	; 251
    145e:	8c 93       	st	X, r24
															 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT3);
    1460:	a5 e5       	ldi	r26, 0x55	; 85
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e5       	ldi	r30, 0x55	; 85
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	88 60       	ori	r24, 0x08	; 8
    146c:	8c 93       	st	X, r24
    146e:	35 c0       	rjmp	.+106    	; 0x14da <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_RISING_EDGE_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT2);
    1470:	a5 e5       	ldi	r26, 0x55	; 85
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e5 e5       	ldi	r30, 0x55	; 85
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	84 60       	ori	r24, 0x04	; 4
    147c:	8c 93       	st	X, r24
															 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT3);
    147e:	a5 e5       	ldi	r26, 0x55	; 85
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e5       	ldi	r30, 0x55	; 85
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	88 60       	ori	r24, 0x08	; 8
    148a:	8c 93       	st	X, r24
    148c:	26 c0       	rjmp	.+76     	; 0x14da <MEXTI_voidEXTIEnable+0x236>
															 break;
						      }
							  break;

		  case EXTI_u8_EXTI2:
							  SET_BIT(EXTI_u8_GICR,EXTI_u8_EXTI2_ENABLE_BIT);
    148e:	ab e5       	ldi	r26, 0x5B	; 91
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	eb e5       	ldi	r30, 0x5B	; 91
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	80 62       	ori	r24, 0x20	; 32
    149a:	8c 93       	st	X, r24
						      switch (copy_u8EXTI_Sense)
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3c 83       	std	Y+4, r19	; 0x04
    14a4:	2b 83       	std	Y+3, r18	; 0x03
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	91 05       	cpc	r25, r1
    14ae:	31 f0       	breq	.+12     	; 0x14bc <MEXTI_voidEXTIEnable+0x218>
    14b0:	2b 81       	ldd	r18, Y+3	; 0x03
    14b2:	3c 81       	ldd	r19, Y+4	; 0x04
    14b4:	23 30       	cpi	r18, 0x03	; 3
    14b6:	31 05       	cpc	r19, r1
    14b8:	49 f0       	breq	.+18     	; 0x14cc <MEXTI_voidEXTIEnable+0x228>
    14ba:	0f c0       	rjmp	.+30     	; 0x14da <MEXTI_voidEXTIEnable+0x236>
						      {
						         case EXTI_u8_FALLING_EDGE_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCSR,EXTI_u8_MCUCSR_BIT6);
    14bc:	a4 e5       	ldi	r26, 0x54	; 84
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e4 e5       	ldi	r30, 0x54	; 84
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 7b       	andi	r24, 0xBF	; 191
    14c8:	8c 93       	st	X, r24
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_RISING_EDGE_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCSR,EXTI_u8_MCUCSR_BIT6);
    14cc:	a4 e5       	ldi	r26, 0x54	; 84
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e4 e5       	ldi	r30, 0x54	; 84
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	80 64       	ori	r24, 0x40	; 64
    14d8:	8c 93       	st	X, r24
						      }
							  break;

		}
	}
}
    14da:	2a 96       	adiw	r28, 0x0a	; 10
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <MEXTI_voidEXTIDisable>:


void MEXTI_voidEXTIDisable(u8 copy_u8EXTI_Num)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <MEXTI_voidEXTIDisable+0x6>
    14f2:	0f 92       	push	r0
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_u8EXTI_Num)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	3b 83       	std	Y+3, r19	; 0x03
    1502:	2a 83       	std	Y+2, r18	; 0x02
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	9b 81       	ldd	r25, Y+3	; 0x03
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	91 05       	cpc	r25, r1
    150c:	89 f0       	breq	.+34     	; 0x1530 <MEXTI_voidEXTIDisable+0x44>
    150e:	2a 81       	ldd	r18, Y+2	; 0x02
    1510:	3b 81       	ldd	r19, Y+3	; 0x03
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	a1 f0       	breq	.+40     	; 0x1540 <MEXTI_voidEXTIDisable+0x54>
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	9b 81       	ldd	r25, Y+3	; 0x03
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	b9 f4       	brne	.+46     	; 0x154e <MEXTI_voidEXTIDisable+0x62>
	{
		case  EXTI_u8_EXTI0: CLR_BIT(EXTI_u8_GICR,EXTI_u8_EXTI0_ENABLE_BIT); break;
    1520:	ab e5       	ldi	r26, 0x5B	; 91
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	eb e5       	ldi	r30, 0x5B	; 91
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 7b       	andi	r24, 0xBF	; 191
    152c:	8c 93       	st	X, r24
    152e:	0f c0       	rjmp	.+30     	; 0x154e <MEXTI_voidEXTIDisable+0x62>
		case  EXTI_u8_EXTI1: CLR_BIT(EXTI_u8_GICR,EXTI_u8_EXTI1_ENABLE_BIT); break;
    1530:	ab e5       	ldi	r26, 0x5B	; 91
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	eb e5       	ldi	r30, 0x5B	; 91
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8f 77       	andi	r24, 0x7F	; 127
    153c:	8c 93       	st	X, r24
    153e:	07 c0       	rjmp	.+14     	; 0x154e <MEXTI_voidEXTIDisable+0x62>
		case  EXTI_u8_EXTI2: CLR_BIT(EXTI_u8_GICR,EXTI_u8_EXTI2_ENABLE_BIT); break;
    1540:	ab e5       	ldi	r26, 0x5B	; 91
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	eb e5       	ldi	r30, 0x5B	; 91
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	8f 7d       	andi	r24, 0xDF	; 223
    154c:	8c 93       	st	X, r24
		default: break;
	}
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <MEXTI_voidSetCallBack>:


void MEXTI_voidSetCallBack (void(*copy_PtrToFunction)(void), u8 copy_u8Index)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <MEXTI_voidSetCallBack+0x6>
    1560:	0f 92       	push	r0
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	6b 83       	std	Y+3, r22	; 0x03
	pf[copy_u8Index]= copy_PtrToFunction;
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	88 0f       	add	r24, r24
    1574:	99 1f       	adc	r25, r25
    1576:	fc 01       	movw	r30, r24
    1578:	e0 5f       	subi	r30, 0xF0	; 240
    157a:	fd 4f       	sbci	r31, 0xFD	; 253
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	80 83       	st	Z, r24
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <__vector_1>:


void __vector_1(void)    __attribute__((signal));
void __vector_1(void)
{
    1590:	1f 92       	push	r1
    1592:	0f 92       	push	r0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	0f 92       	push	r0
    1598:	11 24       	eor	r1, r1
    159a:	2f 93       	push	r18
    159c:	3f 93       	push	r19
    159e:	4f 93       	push	r20
    15a0:	5f 93       	push	r21
    15a2:	6f 93       	push	r22
    15a4:	7f 93       	push	r23
    15a6:	8f 93       	push	r24
    15a8:	9f 93       	push	r25
    15aa:	af 93       	push	r26
    15ac:	bf 93       	push	r27
    15ae:	ef 93       	push	r30
    15b0:	ff 93       	push	r31
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	if (pf[EXTI_u8_EXTI0] != NULL)
    15ba:	80 91 10 02 	lds	r24, 0x0210
    15be:	90 91 11 02 	lds	r25, 0x0211
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	29 f0       	breq	.+10     	; 0x15d0 <__vector_1+0x40>
	{
		pf[EXTI_u8_EXTI0]();
    15c6:	e0 91 10 02 	lds	r30, 0x0210
    15ca:	f0 91 11 02 	lds	r31, 0x0211
    15ce:	09 95       	icall
	}

}
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	ff 91       	pop	r31
    15d6:	ef 91       	pop	r30
    15d8:	bf 91       	pop	r27
    15da:	af 91       	pop	r26
    15dc:	9f 91       	pop	r25
    15de:	8f 91       	pop	r24
    15e0:	7f 91       	pop	r23
    15e2:	6f 91       	pop	r22
    15e4:	5f 91       	pop	r21
    15e6:	4f 91       	pop	r20
    15e8:	3f 91       	pop	r19
    15ea:	2f 91       	pop	r18
    15ec:	0f 90       	pop	r0
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	0f 90       	pop	r0
    15f2:	1f 90       	pop	r1
    15f4:	18 95       	reti

000015f6 <__vector_2>:


void __vector_2(void)    __attribute__((signal));
void __vector_2(void)
{
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	4f 93       	push	r20
    1606:	5f 93       	push	r21
    1608:	6f 93       	push	r22
    160a:	7f 93       	push	r23
    160c:	8f 93       	push	r24
    160e:	9f 93       	push	r25
    1610:	af 93       	push	r26
    1612:	bf 93       	push	r27
    1614:	ef 93       	push	r30
    1616:	ff 93       	push	r31
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	if (pf[EXTI_u8_EXTI1] != NULL)
    1620:	80 91 12 02 	lds	r24, 0x0212
    1624:	90 91 13 02 	lds	r25, 0x0213
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	29 f0       	breq	.+10     	; 0x1636 <__vector_2+0x40>
		{
			pf[EXTI_u8_EXTI1]();
    162c:	e0 91 12 02 	lds	r30, 0x0212
    1630:	f0 91 13 02 	lds	r31, 0x0213
    1634:	09 95       	icall
		}
}
    1636:	cf 91       	pop	r28
    1638:	df 91       	pop	r29
    163a:	ff 91       	pop	r31
    163c:	ef 91       	pop	r30
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	0f 90       	pop	r0
    1658:	1f 90       	pop	r1
    165a:	18 95       	reti

0000165c <__vector_3>:


void __vector_3(void)    __attribute__((signal));
void __vector_3(void)
{
    165c:	1f 92       	push	r1
    165e:	0f 92       	push	r0
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	0f 92       	push	r0
    1664:	11 24       	eor	r1, r1
    1666:	2f 93       	push	r18
    1668:	3f 93       	push	r19
    166a:	4f 93       	push	r20
    166c:	5f 93       	push	r21
    166e:	6f 93       	push	r22
    1670:	7f 93       	push	r23
    1672:	8f 93       	push	r24
    1674:	9f 93       	push	r25
    1676:	af 93       	push	r26
    1678:	bf 93       	push	r27
    167a:	ef 93       	push	r30
    167c:	ff 93       	push	r31
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
	if (pf[EXTI_u8_EXTI2] != NULL)
    1686:	80 91 14 02 	lds	r24, 0x0214
    168a:	90 91 15 02 	lds	r25, 0x0215
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	29 f0       	breq	.+10     	; 0x169c <__vector_3+0x40>
		{
			pf[EXTI_u8_EXTI2]();
    1692:	e0 91 14 02 	lds	r30, 0x0214
    1696:	f0 91 15 02 	lds	r31, 0x0215
    169a:	09 95       	icall
		}
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	ff 91       	pop	r31
    16a2:	ef 91       	pop	r30
    16a4:	bf 91       	pop	r27
    16a6:	af 91       	pop	r26
    16a8:	9f 91       	pop	r25
    16aa:	8f 91       	pop	r24
    16ac:	7f 91       	pop	r23
    16ae:	6f 91       	pop	r22
    16b0:	5f 91       	pop	r21
    16b2:	4f 91       	pop	r20
    16b4:	3f 91       	pop	r19
    16b6:	2f 91       	pop	r18
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	0f 90       	pop	r0
    16be:	1f 90       	pop	r1
    16c0:	18 95       	reti

000016c2 <GPI_voidInit>:
#include "../Include/MCAL/GBI/GPI_Private.h"
#include "../Include/MCAL/GBI/GPI_Configuration.h"


void GPI_voidInit   (void)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
	#if GPI_u8_MODE == GPI_u8_ENABLE
		SET_BIT(SREG,GPI_u8_INTERRUPT_ENABLE_BIT);
    16ca:	af e5       	ldi	r26, 0x5F	; 95
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	ef e5       	ldi	r30, 0x5F	; 95
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	80 68       	ori	r24, 0x80	; 128
    16d6:	8c 93       	st	X, r24
    #else
		CLR_BIT(SREG,GPI_u8_INTERRUPT_ENABLE_BIT);
    #endif
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <GPI_voidEnable>:

void GPI_voidEnable (void)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GPI_u8_INTERRUPT_ENABLE_BIT);
    16e6:	af e5       	ldi	r26, 0x5F	; 95
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	ef e5       	ldi	r30, 0x5F	; 95
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	80 68       	ori	r24, 0x80	; 128
    16f2:	8c 93       	st	X, r24
}
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <GPI_voidDisable>:

void GPI_voidDisable(void)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GPI_u8_INTERRUPT_ENABLE_BIT);
    1702:	af e5       	ldi	r26, 0x5F	; 95
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	ef e5       	ldi	r30, 0x5F	; 95
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	8f 77       	andi	r24, 0x7F	; 127
    170e:	8c 93       	st	X, r24
}
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <search>:
#define array_Length		10
#include "../LIB/STD_TYPES.h"
#include<string.h>
/*function to sequentially search on array of string		*/
int search( u8 *Copy_u8_array[], u8 *Copy_u8_value)
{//open bracket of function
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	28 97       	sbiw	r28, 0x08	; 8
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	9e 83       	std	Y+6, r25	; 0x06
    172c:	8d 83       	std	Y+5, r24	; 0x05
    172e:	78 87       	std	Y+8, r23	; 0x08
    1730:	6f 83       	std	Y+7, r22	; 0x07
	u16 Local_u8_x=-1;//variable to be returned to caller
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	9f ef       	ldi	r25, 0xFF	; 255
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
    for(u16 i=0;i<array_Length;i++)//loop for searching
    173a:	1a 82       	std	Y+2, r1	; 0x02
    173c:	19 82       	std	Y+1, r1	; 0x01
    173e:	1d c0       	rjmp	.+58     	; 0x177a <search+0x64>
    {//open bracket of loop
    	if(strcmp(Copy_u8_array[i],Copy_u8_value)==0)//check if two strings are equal
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	9a 81       	ldd	r25, Y+2	; 0x02
    1744:	9c 01       	movw	r18, r24
    1746:	22 0f       	add	r18, r18
    1748:	33 1f       	adc	r19, r19
    174a:	8d 81       	ldd	r24, Y+5	; 0x05
    174c:	9e 81       	ldd	r25, Y+6	; 0x06
    174e:	fc 01       	movw	r30, r24
    1750:	e2 0f       	add	r30, r18
    1752:	f3 1f       	adc	r31, r19
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	2f 81       	ldd	r18, Y+7	; 0x07
    175a:	38 85       	ldd	r19, Y+8	; 0x08
    175c:	b9 01       	movw	r22, r18
    175e:	0e 94 aa 11 	call	0x2354	; 0x2354 <strcmp>
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	29 f4       	brne	.+10     	; 0x1770 <search+0x5a>
    	{//open bracket of if condition
    		Local_u8_x=i;//if number is found, set i index to return value
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	9c 83       	std	Y+4, r25	; 0x04
    176c:	8b 83       	std	Y+3, r24	; 0x03
    176e:	0a c0       	rjmp	.+20     	; 0x1784 <search+0x6e>
#include<string.h>
/*function to sequentially search on array of string		*/
int search( u8 *Copy_u8_array[], u8 *Copy_u8_value)
{//open bracket of function
	u16 Local_u8_x=-1;//variable to be returned to caller
    for(u16 i=0;i<array_Length;i++)//loop for searching
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	01 96       	adiw	r24, 0x01	; 1
    1776:	9a 83       	std	Y+2, r25	; 0x02
    1778:	89 83       	std	Y+1, r24	; 0x01
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	8a 30       	cpi	r24, 0x0A	; 10
    1780:	91 05       	cpc	r25, r1
    1782:	f0 f2       	brcs	.-68     	; 0x1740 <search+0x2a>
    	{//open bracket of if condition
    		Local_u8_x=i;//if number is found, set i index to return value
    		break; // exit from loop
    	}//close bracket of if condition
    }//close bracket of loop
    return Local_u8_x;//return the result
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1788:	28 96       	adiw	r28, 0x08	; 8
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	0f be       	out	0x3f, r0	; 63
    1792:	cd bf       	out	0x3d, r28	; 61
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <LIGHT_Controller>:
/*						1- Flage Up->turn off LED	,make flag Down	 */
/*  					2- Flage Down->turn on LED ,,make flag UP	 */
/*********************************************************************/

void LIGHT_Controller()
{//open bracket of function
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <LIGHT_Controller+0x6>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
	static u8 LOCAL_u8_flag1=0, LOCAL_u8_flag2=0, LOCAL_u8_flag3=0, LOCAL_u8_flag4=0,Local_u8_x;
	UART_voidPrintf("1->LED1\n2->LED2\n3->LED3\n4->AllLEDS\n5->Return\n");
    17a4:	80 e6       	ldi	r24, 0x60	; 96
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	0e 94 36 10 	call	0x206c	; 0x206c <UART_voidPrintf>
	while(1)																			        /* While Loop To user Choices													   */
	{//open bracket of while loop
		Local_u8_x=UART_RecieveData();															/* Calling UART Recive function To Recive Choice from user						   */
    17ac:	0e 94 27 10 	call	0x204e	; 0x204e <UART_RecieveData>
    17b0:	80 93 16 02 	sts	0x0216, r24
		switch(Local_u8_x)																		/* Check user choice  by switch													   */
    17b4:	80 91 16 02 	lds	r24, 0x0216
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3a 83       	std	Y+2, r19	; 0x02
    17be:	29 83       	std	Y+1, r18	; 0x01
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	9a 81       	ldd	r25, Y+2	; 0x02
    17c4:	83 33       	cpi	r24, 0x33	; 51
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <LIGHT_Controller+0x32>
    17ca:	4b c0       	rjmp	.+150    	; 0x1862 <LIGHT_Controller+0xc8>
    17cc:	29 81       	ldd	r18, Y+1	; 0x01
    17ce:	3a 81       	ldd	r19, Y+2	; 0x02
    17d0:	24 33       	cpi	r18, 0x34	; 52
    17d2:	31 05       	cpc	r19, r1
    17d4:	5c f4       	brge	.+22     	; 0x17ec <LIGHT_Controller+0x52>
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	81 33       	cpi	r24, 0x31	; 49
    17dc:	91 05       	cpc	r25, r1
    17de:	99 f0       	breq	.+38     	; 0x1806 <LIGHT_Controller+0x6c>
    17e0:	29 81       	ldd	r18, Y+1	; 0x01
    17e2:	3a 81       	ldd	r19, Y+2	; 0x02
    17e4:	22 33       	cpi	r18, 0x32	; 50
    17e6:	31 05       	cpc	r19, r1
    17e8:	29 f1       	breq	.+74     	; 0x1834 <LIGHT_Controller+0x9a>
    17ea:	e0 cf       	rjmp	.-64     	; 0x17ac <LIGHT_Controller+0x12>
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	84 33       	cpi	r24, 0x34	; 52
    17f2:	91 05       	cpc	r25, r1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <LIGHT_Controller+0x5e>
    17f6:	4c c0       	rjmp	.+152    	; 0x1890 <LIGHT_Controller+0xf6>
    17f8:	29 81       	ldd	r18, Y+1	; 0x01
    17fa:	3a 81       	ldd	r19, Y+2	; 0x02
    17fc:	25 33       	cpi	r18, 0x35	; 53
    17fe:	31 05       	cpc	r19, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <LIGHT_Controller+0x6a>
    1802:	7e c0       	rjmp	.+252    	; 0x1900 <LIGHT_Controller+0x166>
    1804:	d3 cf       	rjmp	.-90     	; 0x17ac <LIGHT_Controller+0x12>
		{//Open Bracket of Switch
			case '1':                                            								/* If user Choice To Turn On/Off LED1											   */
				if (LOCAL_u8_flag1==0)															/* Cheack if Flage1 is Down														   */
    1806:	80 91 1a 02 	lds	r24, 0x021A
    180a:	88 23       	and	r24, r24
    180c:	49 f4       	brne	.+18     	; 0x1820 <LIGHT_Controller+0x86>
					{//open bracket of flag1 condition
						MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);				/* Set Pin0 from Port B to High To Turn On LED1									   */
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
						LOCAL_u8_flag1=1;														/* Set Falg1 UP																	   */
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	80 93 1a 02 	sts	0x021A, r24
    181e:	c6 cf       	rjmp	.-116    	; 0x17ac <LIGHT_Controller+0x12>
					}//close bracket of flag1 condition
					else                                                                         /*  if Flage1 is Up															   */
					{//open bracket of flag1 else condition
						MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);               /* Set Pin0 from Port B to LOW To Turn OFF LED1								   */
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
						LOCAL_u8_flag1=0,LOCAL_u8_flag4=0;                                       /* Set Falg1 DOWN																   */
    182a:	10 92 1a 02 	sts	0x021A, r1
    182e:	10 92 17 02 	sts	0x0217, r1
    1832:	bc cf       	rjmp	.-136    	; 0x17ac <LIGHT_Controller+0x12>
					}//close bracket of flag1 condition
				break;/*	End Of Case 1	*/
			case '2':                                                                             /* If user Choice To Turn On/Off LED1											   */
					if (LOCAL_u8_flag2==0)                                                        /* Cheack if Flage2 is Down													   */
    1834:	80 91 19 02 	lds	r24, 0x0219
    1838:	88 23       	and	r24, r24
    183a:	49 f4       	brne	.+18     	; 0x184e <LIGHT_Controller+0xb4>
						{//open bracket of flag2 condition
                                                                                                  /* Set Pin1 from Port B to High To Turn On LED2								   */
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);           /* Set Falg2 UP																   */
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							LOCAL_u8_flag2=1;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	80 93 19 02 	sts	0x0219, r24
    184c:	af cf       	rjmp	.-162    	; 0x17ac <LIGHT_Controller+0x12>
						}//close bracket of flag2 condition
						else                                                                      /*  if Flage2 is Up															   */
						{//open bracket of flag2 else condition
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);            /* Set Pin1 from Port B to LOW To Turn OFF LED2								   */
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	40 e0       	ldi	r20, 0x00	; 0
    1854:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							LOCAL_u8_flag2=0,LOCAL_u8_flag4=0;                                    /* Set Falg2 DOWN																   */
    1858:	10 92 19 02 	sts	0x0219, r1
    185c:	10 92 17 02 	sts	0x0217, r1
    1860:	a5 cf       	rjmp	.-182    	; 0x17ac <LIGHT_Controller+0x12>
						}//close bracket of flag2 else condition
					break;/*	End Of Case 2	*/
			case '3':                                                                             /* If user Choice To Turn On/Off LED3											   */
					if (LOCAL_u8_flag3==0)                                                        /* Cheack if Flage3 is Down													   */
    1862:	80 91 18 02 	lds	r24, 0x0218
    1866:	88 23       	and	r24, r24
    1868:	49 f4       	brne	.+18     	; 0x187c <LIGHT_Controller+0xe2>
						{//open bracket of flag3 condition
                                                                                                  /* Set Pin2 from Port B to High To Turn On LED3								   */
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);           /* Set Falg3 UP																   */
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	62 e0       	ldi	r22, 0x02	; 2
    186e:	41 e0       	ldi	r20, 0x01	; 1
    1870:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							LOCAL_u8_flag3=1;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 18 02 	sts	0x0218, r24
    187a:	98 cf       	rjmp	.-208    	; 0x17ac <LIGHT_Controller+0x12>
						}//close bracket of flag2 condition
						else                                                                      /*  if Flage3 is Up															   */
						{//open bracket of flag3 else condition
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);            /* Set Pin2 from Port B to LOW To Turn OFF LED1								   */
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	62 e0       	ldi	r22, 0x02	; 2
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							LOCAL_u8_flag3=0,LOCAL_u8_flag4=0;                                    /* Set Falg3 DOWN																   */
    1886:	10 92 18 02 	sts	0x0218, r1
    188a:	10 92 17 02 	sts	0x0217, r1
    188e:	8e cf       	rjmp	.-228    	; 0x17ac <LIGHT_Controller+0x12>
						}//close bracket of flag3 else condition
					break;/*	End Of Case 3	*/
			case '4':                                                                             /* If user Choice To Turn On/Off All LEDs										   */
					if (LOCAL_u8_flag4==0)                                                        /* Cheack if Flage4 is Down													   */
    1890:	80 91 17 02 	lds	r24, 0x0217
    1894:	88 23       	and	r24, r24
    1896:	e1 f4       	brne	.+56     	; 0x18d0 <LIGHT_Controller+0x136>
						{//open bracket of flag4 condition
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);           /* Set Pin0 from Port B to High To Turn On LED1								   */
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	60 e0       	ldi	r22, 0x00	; 0
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);           /* Set Pin1 from Port B to High To Turn On LED2								   */
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	61 e0       	ldi	r22, 0x01	; 1
    18a6:	41 e0       	ldi	r20, 0x01	; 1
    18a8:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);			  /* Set Pin2 from Port B to High To Turn On LED3								   */
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	41 e0       	ldi	r20, 0x01	; 1
    18b2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							LOCAL_u8_flag1=1,LOCAL_u8_flag2=1,LOCAL_u8_flag3=1,LOCAL_u8_flag4=1;  /* Set Falg1,Falg2,Falg3,Falg4 to UP											   */
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	80 93 1a 02 	sts	0x021A, r24
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	80 93 19 02 	sts	0x0219, r24
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	80 93 18 02 	sts	0x0218, r24
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	80 93 17 02 	sts	0x0217, r24
    18ce:	6e cf       	rjmp	.-292    	; 0x17ac <LIGHT_Controller+0x12>
						}//close bracket of flag4 condition
						else                                                                      /*  if Flage4 is UP															   */
						{//open bracket of flag4 else condition
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);            /* Set Pin0 from Port B to LOW To Turn OFF LED1								   */
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	40 e0       	ldi	r20, 0x00	; 0
    18d6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);            /* Set Pin1 from Port B to LOW To Turn OFF LED2								   */
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	40 e0       	ldi	r20, 0x00	; 0
    18e0:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							MDIO_voidSetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);            /* Set Pin2 from Port B to LOW To Turn OFF LED3								   */
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	62 e0       	ldi	r22, 0x02	; 2
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
							LOCAL_u8_flag4=0,LOCAL_u8_flag1=0,LOCAL_u8_flag2=0,LOCAL_u8_flag3=0;  /* Set Falg1,Falg2,Falg3,Falg4 to DOWN										   */
    18ee:	10 92 17 02 	sts	0x0217, r1
    18f2:	10 92 1a 02 	sts	0x021A, r1
    18f6:	10 92 19 02 	sts	0x0219, r1
    18fa:	10 92 18 02 	sts	0x0218, r1
    18fe:	56 cf       	rjmp	.-340    	; 0x17ac <LIGHT_Controller+0x12>
			case'5':
				return;//Eixt from function
		}//close bracket of switch
	}//close bracket of While Loop

}//Close Bracket of function
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <Door_controller>:
/*  					2- Lock->Servo Motor rotate 90 degree		 */
/*  					3- Return-> Exit From Function				 */
/*********************************************************************/

void Door_controller()
{//Open bracket of Door Controller Function
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	c1 55       	subi	r28, 0x51	; 81
    1914:	d0 40       	sbci	r29, 0x00	; 0
    1916:	0f b6       	in	r0, 0x3f	; 63
    1918:	f8 94       	cli
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	0f be       	out	0x3f, r0	; 63
    191e:	cd bf       	out	0x3d, r28	; 61
	u8 *Local_u8_userName[10]={"Ahmed","Amany","Amr","Assia","Aya","johan","joy","june","malak","Shorok"};
    1920:	9e 01       	movw	r18, r28
    1922:	2a 5e       	subi	r18, 0xEA	; 234
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	2a 96       	adiw	r28, 0x0a	; 10
    1928:	3f af       	std	Y+63, r19	; 0x3f
    192a:	2e af       	std	Y+62, r18	; 0x3e
    192c:	2a 97       	sbiw	r28, 0x0a	; 10
    192e:	8c ef       	ldi	r24, 0xFC	; 252
    1930:	91 e0       	ldi	r25, 0x01	; 1
    1932:	2c 96       	adiw	r28, 0x0c	; 12
    1934:	9f af       	std	Y+63, r25	; 0x3f
    1936:	8e af       	std	Y+62, r24	; 0x3e
    1938:	2c 97       	sbiw	r28, 0x0c	; 12
    193a:	94 e1       	ldi	r25, 0x14	; 20
    193c:	2d 96       	adiw	r28, 0x0d	; 13
    193e:	9f af       	std	Y+63, r25	; 0x3f
    1940:	2d 97       	sbiw	r28, 0x0d	; 13
    1942:	2c 96       	adiw	r28, 0x0c	; 12
    1944:	ee ad       	ldd	r30, Y+62	; 0x3e
    1946:	ff ad       	ldd	r31, Y+63	; 0x3f
    1948:	2c 97       	sbiw	r28, 0x0c	; 12
    194a:	00 80       	ld	r0, Z
    194c:	2c 96       	adiw	r28, 0x0c	; 12
    194e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1950:	3f ad       	ldd	r19, Y+63	; 0x3f
    1952:	2c 97       	sbiw	r28, 0x0c	; 12
    1954:	2f 5f       	subi	r18, 0xFF	; 255
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
    1958:	2c 96       	adiw	r28, 0x0c	; 12
    195a:	3f af       	std	Y+63, r19	; 0x3f
    195c:	2e af       	std	Y+62, r18	; 0x3e
    195e:	2c 97       	sbiw	r28, 0x0c	; 12
    1960:	2a 96       	adiw	r28, 0x0a	; 10
    1962:	ee ad       	ldd	r30, Y+62	; 0x3e
    1964:	ff ad       	ldd	r31, Y+63	; 0x3f
    1966:	2a 97       	sbiw	r28, 0x0a	; 10
    1968:	00 82       	st	Z, r0
    196a:	2a 96       	adiw	r28, 0x0a	; 10
    196c:	2e ad       	ldd	r18, Y+62	; 0x3e
    196e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1970:	2a 97       	sbiw	r28, 0x0a	; 10
    1972:	2f 5f       	subi	r18, 0xFF	; 255
    1974:	3f 4f       	sbci	r19, 0xFF	; 255
    1976:	2a 96       	adiw	r28, 0x0a	; 10
    1978:	3f af       	std	Y+63, r19	; 0x3f
    197a:	2e af       	std	Y+62, r18	; 0x3e
    197c:	2a 97       	sbiw	r28, 0x0a	; 10
    197e:	2d 96       	adiw	r28, 0x0d	; 13
    1980:	3f ad       	ldd	r19, Y+63	; 0x3f
    1982:	2d 97       	sbiw	r28, 0x0d	; 13
    1984:	31 50       	subi	r19, 0x01	; 1
    1986:	2d 96       	adiw	r28, 0x0d	; 13
    1988:	3f af       	std	Y+63, r19	; 0x3f
    198a:	2d 97       	sbiw	r28, 0x0d	; 13
    198c:	2d 96       	adiw	r28, 0x0d	; 13
    198e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1990:	2d 97       	sbiw	r28, 0x0d	; 13
    1992:	88 23       	and	r24, r24
    1994:	b1 f6       	brne	.-84     	; 0x1942 <Door_controller+0x38>
	u8 *Local_u8_Password[10]={"0000","1111","2222","3333","4444","5555","6666","7777","8888","9999"};
    1996:	fe 01       	movw	r30, r28
    1998:	ba 96       	adiw	r30, 0x2a	; 42
    199a:	2f 96       	adiw	r28, 0x0f	; 15
    199c:	ff af       	std	Y+63, r31	; 0x3f
    199e:	ee af       	std	Y+62, r30	; 0x3e
    19a0:	2f 97       	sbiw	r28, 0x0f	; 15
    19a2:	28 ee       	ldi	r18, 0xE8	; 232
    19a4:	31 e0       	ldi	r19, 0x01	; 1
    19a6:	61 96       	adiw	r28, 0x11	; 17
    19a8:	3f af       	std	Y+63, r19	; 0x3f
    19aa:	2e af       	std	Y+62, r18	; 0x3e
    19ac:	61 97       	sbiw	r28, 0x11	; 17
    19ae:	34 e1       	ldi	r19, 0x14	; 20
    19b0:	62 96       	adiw	r28, 0x12	; 18
    19b2:	3f af       	std	Y+63, r19	; 0x3f
    19b4:	62 97       	sbiw	r28, 0x12	; 18
    19b6:	61 96       	adiw	r28, 0x11	; 17
    19b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    19ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    19bc:	61 97       	sbiw	r28, 0x11	; 17
    19be:	00 80       	ld	r0, Z
    19c0:	61 96       	adiw	r28, 0x11	; 17
    19c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    19c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    19c6:	61 97       	sbiw	r28, 0x11	; 17
    19c8:	2f 5f       	subi	r18, 0xFF	; 255
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	61 96       	adiw	r28, 0x11	; 17
    19ce:	3f af       	std	Y+63, r19	; 0x3f
    19d0:	2e af       	std	Y+62, r18	; 0x3e
    19d2:	61 97       	sbiw	r28, 0x11	; 17
    19d4:	2f 96       	adiw	r28, 0x0f	; 15
    19d6:	ee ad       	ldd	r30, Y+62	; 0x3e
    19d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    19da:	2f 97       	sbiw	r28, 0x0f	; 15
    19dc:	00 82       	st	Z, r0
    19de:	2f 96       	adiw	r28, 0x0f	; 15
    19e0:	2e ad       	ldd	r18, Y+62	; 0x3e
    19e2:	3f ad       	ldd	r19, Y+63	; 0x3f
    19e4:	2f 97       	sbiw	r28, 0x0f	; 15
    19e6:	2f 5f       	subi	r18, 0xFF	; 255
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	2f 96       	adiw	r28, 0x0f	; 15
    19ec:	3f af       	std	Y+63, r19	; 0x3f
    19ee:	2e af       	std	Y+62, r18	; 0x3e
    19f0:	2f 97       	sbiw	r28, 0x0f	; 15
    19f2:	62 96       	adiw	r28, 0x12	; 18
    19f4:	3f ad       	ldd	r19, Y+63	; 0x3f
    19f6:	62 97       	sbiw	r28, 0x12	; 18
    19f8:	31 50       	subi	r19, 0x01	; 1
    19fa:	62 96       	adiw	r28, 0x12	; 18
    19fc:	3f af       	std	Y+63, r19	; 0x3f
    19fe:	62 97       	sbiw	r28, 0x12	; 18
    1a00:	62 96       	adiw	r28, 0x12	; 18
    1a02:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a04:	62 97       	sbiw	r28, 0x12	; 18
    1a06:	88 23       	and	r24, r24
    1a08:	b1 f6       	brne	.-84     	; 0x19b6 <Door_controller+0xac>
	u8 Local_u8_Recived_value=0,Local_u8_UserName[3],Local_u8_pass[5];
    1a0a:	1d 8a       	std	Y+21, r1	; 0x15
	u16 Local_u16Attemps_Number=3,Local_u16userName_Pos,Local_u16PassWord_Pos;
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9c 8b       	std	Y+20, r25	; 0x14
    1a12:	8b 8b       	std	Y+19, r24	; 0x13
    1a14:	4f c0       	rjmp	.+158    	; 0x1ab4 <Door_controller+0x1aa>

	 while(Local_u16Attemps_Number>0)
	 {// open bracket of attempets number loop

		 	UART_voidPrintf("Enter UserName Then #\n");										      /*Calling UART print function To Display This Sentence	on user Screen	       */
    1a16:	86 ef       	ldi	r24, 0xF6	; 246
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 94 36 10 	call	0x206c	; 0x206c <UART_voidPrintf>
			UART_recieve_string(Local_u8_UserName);										          /*Calling UART Recive String function To Recive User Name from user		       */
    1a1e:	ce 01       	movw	r24, r28
    1a20:	ce 96       	adiw	r24, 0x3e	; 62
    1a22:	0e 94 84 10 	call	0x2108	; 0x2108 <UART_recieve_string>
			Local_u16userName_Pos=search(Local_u8_userName,Local_u8_UserName);			          /* Calling Search Function To get userName posintion in array				       */
    1a26:	ce 01       	movw	r24, r28
    1a28:	46 96       	adiw	r24, 0x16	; 22
    1a2a:	9e 01       	movw	r18, r28
    1a2c:	22 5c       	subi	r18, 0xC2	; 194
    1a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a30:	b9 01       	movw	r22, r18
    1a32:	0e 94 8b 0b 	call	0x1716	; 0x1716 <search>
    1a36:	9a 8b       	std	Y+18, r25	; 0x12
    1a38:	89 8b       	std	Y+17, r24	; 0x11
			UART_voidPrintf("\nEnter Password Then #\n");                       		          /*Calling UART print function To Display This Sentence	on user Screen	       */
    1a3a:	8d e0       	ldi	r24, 0x0D	; 13
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	0e 94 36 10 	call	0x206c	; 0x206c <UART_voidPrintf>
			UART_recieve_string(Local_u8_pass);                                 		          /*Calling UART Recive String function To Recive Password from user		       */
    1a42:	ce 01       	movw	r24, r28
    1a44:	8f 5b       	subi	r24, 0xBF	; 191
    1a46:	9f 4f       	sbci	r25, 0xFF	; 255
    1a48:	0e 94 84 10 	call	0x2108	; 0x2108 <UART_recieve_string>
			Local_u16PassWord_Pos=search(Local_u8_Password,Local_u8_pass);				          /* Calling Search Function To get Password posintion in array				       */
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	8a 96       	adiw	r24, 0x2a	; 42
    1a50:	9e 01       	movw	r18, r28
    1a52:	2f 5b       	subi	r18, 0xBF	; 191
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	b9 01       	movw	r22, r18
    1a58:	0e 94 8b 0b 	call	0x1716	; 0x1716 <search>
    1a5c:	98 8b       	std	Y+16, r25	; 0x10
    1a5e:	8f 87       	std	Y+15, r24	; 0x0f
			/********************************************************************/
			/* if condition To cheak:											*/
			/*	1-user Name and Password have The Sum Posion To be valid but	*/
			/* 	 Position Not Equal -1(Hint: -1 means Not Found in array)		*/
			/********************************************************************/
			if((((Local_u16userName_Pos!=-1)&&(Local_u16PassWord_Pos!=-1))&&
    1a60:	89 89       	ldd	r24, Y+17	; 0x11
    1a62:	9a 89       	ldd	r25, Y+18	; 0x12
    1a64:	ef ef       	ldi	r30, 0xFF	; 255
    1a66:	8f 3f       	cpi	r24, 0xFF	; 255
    1a68:	9e 07       	cpc	r25, r30
    1a6a:	69 f0       	breq	.+26     	; 0x1a86 <Door_controller+0x17c>
    1a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6e:	98 89       	ldd	r25, Y+16	; 0x10
    1a70:	ff ef       	ldi	r31, 0xFF	; 255
    1a72:	8f 3f       	cpi	r24, 0xFF	; 255
    1a74:	9f 07       	cpc	r25, r31
    1a76:	39 f0       	breq	.+14     	; 0x1a86 <Door_controller+0x17c>
    1a78:	29 89       	ldd	r18, Y+17	; 0x11
    1a7a:	3a 89       	ldd	r19, Y+18	; 0x12
    1a7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7e:	98 89       	ldd	r25, Y+16	; 0x10
    1a80:	28 17       	cp	r18, r24
    1a82:	39 07       	cpc	r19, r25
    1a84:	e1 f0       	breq	.+56     	; 0x1abe <Door_controller+0x1b4>
				(Local_u16userName_Pos==Local_u16PassWord_Pos)))
				{//open bracket of found Condition
					break;//Exit From While Loop
				}//Close bracket of found Condition
			else if(Local_u16Attemps_Number>1)											          /* cheack if user name and Password are Incorrect & There are attempets		   */
    1a86:	8b 89       	ldd	r24, Y+19	; 0x13
    1a88:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	68 f0       	brcs	.+26     	; 0x1aaa <Door_controller+0x1a0>
				{//open bracket of incorrect user name and password
					UART_voidPrintf("Incorrect username or password try again....\n");	          /* Calling UART print function To Display This Sentence	on user Screen		   */
    1a90:	85 e2       	ldi	r24, 0x25	; 37
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	0e 94 36 10 	call	0x206c	; 0x206c <UART_voidPrintf>
					UART_Transmitnum(Local_u16Attemps_Number-1);						          /*Calling UART print Number function To Display attempts number	on user Screen */
    1a98:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <UART_Transmitnum>
					UART_voidPrintf(" attempts allwoed\n");								          /*Calling UART print function To Display This Sentence	on user Screen		   */
    1aa2:	83 e5       	ldi	r24, 0x53	; 83
    1aa4:	91 e0       	ldi	r25, 0x01	; 1
    1aa6:	0e 94 36 10 	call	0x206c	; 0x206c <UART_voidPrintf>
				}//Close bracket of incorrect user name and password
			Local_u16Attemps_Number--;													          /* Incerement attempts number by 1											   */
    1aaa:	8b 89       	ldd	r24, Y+19	; 0x13
    1aac:	9c 89       	ldd	r25, Y+20	; 0x14
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	9c 8b       	std	Y+20, r25	; 0x14
    1ab2:	8b 8b       	std	Y+19, r24	; 0x13
	u8 *Local_u8_userName[10]={"Ahmed","Amany","Amr","Assia","Aya","johan","joy","june","malak","Shorok"};
	u8 *Local_u8_Password[10]={"0000","1111","2222","3333","4444","5555","6666","7777","8888","9999"};
	u8 Local_u8_Recived_value=0,Local_u8_UserName[3],Local_u8_pass[5];
	u16 Local_u16Attemps_Number=3,Local_u16userName_Pos,Local_u16PassWord_Pos;

	 while(Local_u16Attemps_Number>0)
    1ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	09 f0       	breq	.+2      	; 0x1abe <Door_controller+0x1b4>
    1abc:	ac cf       	rjmp	.-168    	; 0x1a16 <Door_controller+0x10c>
					UART_voidPrintf(" attempts allwoed\n");								          /*Calling UART print function To Display This Sentence	on user Screen		   */
				}//Close bracket of incorrect user name and password
			Local_u16Attemps_Number--;													          /* Incerement attempts number by 1											   */
	 }// Close bracket of attempets number loop

	 if(Local_u16Attemps_Number==0)														          /* cheack if user name and Password are Incorrect & There are Not attempets		*/
    1abe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <Door_controller+0x1be>
    1ac6:	81 c0       	rjmp	.+258    	; 0x1bca <Door_controller+0x2c0>
	 {//open bracket of incorrect user name and password&No attempets
		 UART_voidPrintf("sorry, Attempts allowed are zero\n");							          /* Calling UART print function To Display This Sentence	on user Screen		   	*/
    1ac8:	86 e6       	ldi	r24, 0x66	; 102
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	0e 94 36 10 	call	0x206c	; 0x206c <UART_voidPrintf>
		 MDIO_voidSetPinValue(DIO_u8_PORTD,DIO_u8_PIN2,DIO_u8_HIGH);					          /* Turn On Red Led(by Set Pint2 value as High) As alarm							*/
    1ad0:	83 e0       	ldi	r24, 0x03	; 3
    1ad2:	62 e0       	ldi	r22, 0x02	; 2
    1ad4:	41 e0       	ldi	r20, 0x01	; 1
    1ad6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	aa e7       	ldi	r26, 0x7A	; 122
    1ae0:	b4 e4       	ldi	r27, 0x44	; 68
    1ae2:	8b 87       	std	Y+11, r24	; 0x0b
    1ae4:	9c 87       	std	Y+12, r25	; 0x0c
    1ae6:	ad 87       	std	Y+13, r26	; 0x0d
    1ae8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	4a ef       	ldi	r20, 0xFA	; 250
    1af8:	54 e4       	ldi	r21, 0x44	; 68
    1afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	8f 83       	std	Y+7, r24	; 0x07
    1b04:	98 87       	std	Y+8, r25	; 0x08
    1b06:	a9 87       	std	Y+9, r26	; 0x09
    1b08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0c:	78 85       	ldd	r23, Y+8	; 0x08
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e8       	ldi	r20, 0x80	; 128
    1b18:	5f e3       	ldi	r21, 0x3F	; 63
    1b1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b1e:	88 23       	and	r24, r24
    1b20:	2c f4       	brge	.+10     	; 0x1b2c <Door_controller+0x222>
		__ticks = 1;
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
    1b2a:	3f c0       	rjmp	.+126    	; 0x1baa <Door_controller+0x2a0>
	else if (__tmp > 65535)
    1b2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2e:	78 85       	ldd	r23, Y+8	; 0x08
    1b30:	89 85       	ldd	r24, Y+9	; 0x09
    1b32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	3f ef       	ldi	r19, 0xFF	; 255
    1b38:	4f e7       	ldi	r20, 0x7F	; 127
    1b3a:	57 e4       	ldi	r21, 0x47	; 71
    1b3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b40:	18 16       	cp	r1, r24
    1b42:	4c f5       	brge	.+82     	; 0x1b96 <Door_controller+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e2       	ldi	r20, 0x20	; 32
    1b52:	51 e4       	ldi	r21, 0x41	; 65
    1b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	0f c0       	rjmp	.+30     	; 0x1b8c <Door_controller+0x282>
    1b6e:	88 ec       	ldi	r24, 0xC8	; 200
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	9c 83       	std	Y+4, r25	; 0x04
    1b74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b76:	8b 81       	ldd	r24, Y+3	; 0x03
    1b78:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <Door_controller+0x270>
    1b7e:	9c 83       	std	Y+4, r25	; 0x04
    1b80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b82:	8d 81       	ldd	r24, Y+5	; 0x05
    1b84:	9e 81       	ldd	r25, Y+6	; 0x06
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	9e 83       	std	Y+6, r25	; 0x06
    1b8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	69 f7       	brne	.-38     	; 0x1b6e <Door_controller+0x264>
    1b94:	14 c0       	rjmp	.+40     	; 0x1bbe <Door_controller+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b96:	6f 81       	ldd	r22, Y+7	; 0x07
    1b98:	78 85       	ldd	r23, Y+8	; 0x08
    1b9a:	89 85       	ldd	r24, Y+9	; 0x09
    1b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	9e 81       	ldd	r25, Y+6	; 0x06
    1bae:	9a 83       	std	Y+2, r25	; 0x02
    1bb0:	89 83       	std	Y+1, r24	; 0x01
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <Door_controller+0x2ac>
    1bba:	9a 83       	std	Y+2, r25	; 0x02
    1bbc:	89 83       	std	Y+1, r24	; 0x01
		 _delay_ms(1000);																          /* Wait 1 Sec																		*/
		 MDIO_voidSetPinValue(DIO_u8_PORTD,DIO_u8_PIN2,DIO_u8_LOW);						          /* Turn Off Red Led (by Set Pint2 value as LOW)									*/
    1bbe:	83 e0       	ldi	r24, 0x03	; 3
    1bc0:	62 e0       	ldi	r22, 0x02	; 2
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
    1bc8:	31 c0       	rjmp	.+98     	; 0x1c2c <Door_controller+0x322>
	 }//Close bracket of incorrect user name and password&No attempets
	 else																				          /* Correct user Name and Password condition										*/
	 {//open bracket of correct user name and password condition
		UART_voidPrintf("\n1->Open Door\n2->Loock Door\n3->Return\n");					          /* Calling UART print function To Display Choices Menu on user Screen	    	   	*/
    1bca:	88 e8       	ldi	r24, 0x88	; 136
    1bcc:	91 e0       	ldi	r25, 0x01	; 1
    1bce:	0e 94 36 10 	call	0x206c	; 0x206c <UART_voidPrintf>
		while(1)																		          /* While Loop To user Choices														*/
		{//oopen bracket of user Choices Loop
			Local_u8_Recived_value=UART_RecieveData();									          /* Calling UART Recive function To Recive Choice from user						*/
    1bd2:	0e 94 27 10 	call	0x204e	; 0x204e <UART_RecieveData>
    1bd6:	8d 8b       	std	Y+21, r24	; 0x15
			switch(Local_u8_Recived_value)												          /* Check user choice  by switch													*/
    1bd8:	8d 89       	ldd	r24, Y+21	; 0x15
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	28 96       	adiw	r28, 0x08	; 8
    1be0:	3f af       	std	Y+63, r19	; 0x3f
    1be2:	2e af       	std	Y+62, r18	; 0x3e
    1be4:	28 97       	sbiw	r28, 0x08	; 8
    1be6:	28 96       	adiw	r28, 0x08	; 8
    1be8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bea:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bec:	28 97       	sbiw	r28, 0x08	; 8
    1bee:	82 33       	cpi	r24, 0x32	; 50
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	a9 f0       	breq	.+42     	; 0x1c1e <Door_controller+0x314>
    1bf4:	28 96       	adiw	r28, 0x08	; 8
    1bf6:	ee ad       	ldd	r30, Y+62	; 0x3e
    1bf8:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bfa:	28 97       	sbiw	r28, 0x08	; 8
    1bfc:	e3 33       	cpi	r30, 0x33	; 51
    1bfe:	f1 05       	cpc	r31, r1
    1c00:	a9 f0       	breq	.+42     	; 0x1c2c <Door_controller+0x322>
    1c02:	28 96       	adiw	r28, 0x08	; 8
    1c04:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c06:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c08:	28 97       	sbiw	r28, 0x08	; 8
    1c0a:	21 33       	cpi	r18, 0x31	; 49
    1c0c:	31 05       	cpc	r19, r1
    1c0e:	09 f7       	brne	.-62     	; 0x1bd2 <Door_controller+0x2c8>
			{//open bracjet of switch
				case '1':																          /* if user choice Open Door														*/
					MTIMERS_voidTimer1Init(180);										          /* Calling timer 1 intialize function with degree 180								*/
    1c10:	64 eb       	ldi	r22, 0xB4	; 180
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <MTIMERS_voidTimer1Init>
    1c1c:	da cf       	rjmp	.-76     	; 0x1bd2 <Door_controller+0x2c8>
					break;//end of case 1
				case'2':                                                                          /* if user choice Lock Door														*/
					MTIMERS_voidTimer1Init(90);                                                   /* Calling timer 1 intialize function with degree 90								*/
    1c1e:	6a e5       	ldi	r22, 0x5A	; 90
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <MTIMERS_voidTimer1Init>
    1c2a:	d3 cf       	rjmp	.-90     	; 0x1bd2 <Door_controller+0x2c8>
				case '3':                                                                         /* if user choice Return															*/
					return; //end of case 1                                                       /* Exit from function																*/
			}//open bracjet of switch
		}//oopen bracket of user Choices Loop
	 }//Close bracket of correct user name and password condition
}//Close bracket of Door Controller Function
    1c2c:	cf 5a       	subi	r28, 0xAF	; 175
    1c2e:	df 4f       	sbci	r29, 0xFF	; 255
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <MTIMERS_voidTimer0Init>:

static void (*TIMERS_pfTimer0OVF)(void) = NULL;
static void (*TIMERS_pfTimer0CTC)(void) = NULL;

void MTIMERS_voidTimer0Init(void)
{
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	cd b7       	in	r28, 0x3d	; 61
    1c46:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(TIMERS_u8_TIMSK_REG,TIMERS_u8_TIMSK0_OCIE0);
	#endif
		TIMERS_u8_OCR0_REG = TIMERS_u8_OCR0_VALUE;
   #elif (TIMER_u8_MODE == TIMER_u8_FAST_PWM_MODE)
		// Configure Fast PWM Mode
		SET_BIT(TIMERS_u8_TCCR0_REG,TIMERS_u8_TCCR0_WGM00);
    1c48:	a3 e5       	ldi	r26, 0x53	; 83
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e3 e5       	ldi	r30, 0x53	; 83
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	88 60       	ori	r24, 0x08	; 8
    1c54:	8c 93       	st	X, r24
		SET_BIT(TIMERS_u8_TCCR0_REG,TIMERS_u8_TCCR0_WGM01);
    1c56:	a3 e5       	ldi	r26, 0x53	; 83
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e3 e5       	ldi	r30, 0x53	; 83
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 64       	ori	r24, 0x40	; 64
    1c62:	8c 93       	st	X, r24
		//  Set OC0 on compare match, clear OC0 at TOP (Inverting Mode)
		SET_BIT(TIMERS_u8_TCCR0_REG,4);
    1c64:	a3 e5       	ldi	r26, 0x53	; 83
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e3 e5       	ldi	r30, 0x53	; 83
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	80 61       	ori	r24, 0x10	; 16
    1c70:	8c 93       	st	X, r24
		SET_BIT(TIMERS_u8_TCCR0_REG,5);
    1c72:	a3 e5       	ldi	r26, 0x53	; 83
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e3 e5       	ldi	r30, 0x53	; 83
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 62       	ori	r24, 0x20	; 32
    1c7e:	8c 93       	st	X, r24
		// Set value at OCR0
		TIMERS_u8_OCR0_REG = TIMERS_u8_OCR0_VALUE;
    1c80:	ec e5       	ldi	r30, 0x5C	; 92
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	88 ec       	ldi	r24, 0xC8	; 200
    1c86:	80 83       	st	Z, r24
		#endif
	// Clear for 3 bits
	TIMERS_u8_TCCR0_REG &= TIMERS_u8_TCCR0_PRESCALE_MASK;
    1c88:	a3 e5       	ldi	r26, 0x53	; 83
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e3 e5       	ldi	r30, 0x53	; 83
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	88 7f       	andi	r24, 0xF8	; 248
    1c94:	8c 93       	st	X, r24
	// SET Prescaler Value
	TIMERS_u8_TCCR0_REG |= TIMERS_u8_PRESCALER_VALUE;
    1c96:	a3 e5       	ldi	r26, 0x53	; 83
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e3 e5       	ldi	r30, 0x53	; 83
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	82 60       	ori	r24, 0x02	; 2
    1ca2:	8c 93       	st	X, r24
}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <MTIMERS_voidTimer0OVFSetCallBack>:

void MTIMERS_voidTimer0OVFSetCallBack (void (*copy_pf)(void))
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <MTIMERS_voidTimer0OVFSetCallBack+0x6>
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	9a 83       	std	Y+2, r25	; 0x02
    1cb6:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pf != NULL)
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	31 f0       	breq	.+12     	; 0x1ccc <MTIMERS_voidTimer0OVFSetCallBack+0x22>
	{
		TIMERS_pfTimer0OVF = copy_pf;
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	90 93 1c 02 	sts	0x021C, r25
    1cc8:	80 93 1b 02 	sts	0x021B, r24
	}
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <MTIMERS_voidTimer0CTCSetCallBack>:

void MTIMERS_voidTimer0CTCSetCallBack (void (*copy_pf)(void))
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <MTIMERS_voidTimer0CTCSetCallBack+0x6>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	if (copy_pf != NULL)
    1ce4:	89 81       	ldd	r24, Y+1	; 0x01
    1ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	31 f0       	breq	.+12     	; 0x1cf8 <MTIMERS_voidTimer0CTCSetCallBack+0x22>
	{
		TIMERS_pfTimer0CTC = copy_pf;
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	90 93 1e 02 	sts	0x021E, r25
    1cf4:	80 93 1d 02 	sts	0x021D, r24
	}
}
    1cf8:	0f 90       	pop	r0
    1cfa:	0f 90       	pop	r0
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <MTIMERS_voidTimer1Init>:


void MTIMERS_voidTimer1Init(u32 angle)
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	28 97       	sbiw	r28, 0x08	; 8
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	f8 94       	cli
    1d10:	de bf       	out	0x3e, r29	; 62
    1d12:	0f be       	out	0x3f, r0	; 63
    1d14:	cd bf       	out	0x3d, r28	; 61
    1d16:	6d 83       	std	Y+5, r22	; 0x05
    1d18:	7e 83       	std	Y+6, r23	; 0x06
    1d1a:	8f 83       	std	Y+7, r24	; 0x07
    1d1c:	98 87       	std	Y+8, r25	; 0x08
	/*Select Timer 1 mode ==> 14*/
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
    1d1e:	af e4       	ldi	r26, 0x4F	; 79
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	ef e4       	ldi	r30, 0x4F	; 79
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	82 60       	ori	r24, 0x02	; 2
    1d2a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    1d2c:	af e4       	ldi	r26, 0x4F	; 79
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	ef e4       	ldi	r30, 0x4F	; 79
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8e 7f       	andi	r24, 0xFE	; 254
    1d38:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
    1d3a:	ae e4       	ldi	r26, 0x4E	; 78
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	ee e4       	ldi	r30, 0x4E	; 78
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	80 61       	ori	r24, 0x10	; 16
    1d46:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
    1d48:	ae e4       	ldi	r26, 0x4E	; 78
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	ee e4       	ldi	r30, 0x4E	; 78
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	88 60       	ori	r24, 0x08	; 8
    1d54:	8c 93       	st	X, r24
	/* Select HW Action on OC1A pin => Non Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
    1d56:	af e4       	ldi	r26, 0x4F	; 79
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	ef e4       	ldi	r30, 0x4F	; 79
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 68       	ori	r24, 0x80	; 128
    1d62:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    1d64:	af e4       	ldi	r26, 0x4F	; 79
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	ef e4       	ldi	r30, 0x4F	; 79
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	8f 7b       	andi	r24, 0xBF	; 191
    1d70:	8c 93       	st	X, r24

	/* Set top value in ICR1 */
	TIMERS_u16_ICR1_REG=19999;
    1d72:	e6 e4       	ldi	r30, 0x46	; 70
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	8f e1       	ldi	r24, 0x1F	; 31
    1d78:	9e e4       	ldi	r25, 0x4E	; 78
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	80 83       	st	Z, r24

	/* set angle of servo motor */
	u32 value=0;
    1d7e:	19 82       	std	Y+1, r1	; 0x01
    1d80:	1a 82       	std	Y+2, r1	; 0x02
    1d82:	1b 82       	std	Y+3, r1	; 0x03
    1d84:	1c 82       	std	Y+4, r1	; 0x04
	value=((((1999-999)*angle)/180)+999);
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	af 81       	ldd	r26, Y+7	; 0x07
    1d8c:	b8 85       	ldd	r27, Y+8	; 0x08
    1d8e:	28 ee       	ldi	r18, 0xE8	; 232
    1d90:	33 e0       	ldi	r19, 0x03	; 3
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 0b 11 	call	0x2216	; 0x2216 <__mulsi3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	24 eb       	ldi	r18, 0xB4	; 180
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	0e 94 3d 11 	call	0x227a	; 0x227a <__udivmodsi4>
    1db2:	da 01       	movw	r26, r20
    1db4:	c9 01       	movw	r24, r18
    1db6:	89 51       	subi	r24, 0x19	; 25
    1db8:	9c 4f       	sbci	r25, 0xFC	; 252
    1dba:	af 4f       	sbci	r26, 0xFF	; 255
    1dbc:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbe:	89 83       	std	Y+1, r24	; 0x01
    1dc0:	9a 83       	std	Y+2, r25	; 0x02
    1dc2:	ab 83       	std	Y+3, r26	; 0x03
    1dc4:	bc 83       	std	Y+4, r27	; 0x04
	TIMERS_u16_OCR1A_REG=value;
    1dc6:	ea e4       	ldi	r30, 0x4A	; 74
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	91 83       	std	Z+1, r25	; 0x01
    1dd0:	80 83       	st	Z, r24

	/*Set prescaler*/
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    1dd2:	ae e4       	ldi	r26, 0x4E	; 78
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	ee e4       	ldi	r30, 0x4E	; 78
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
    1ddc:	8b 7f       	andi	r24, 0xFB	; 251
    1dde:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    1de0:	ae e4       	ldi	r26, 0x4E	; 78
    1de2:	b0 e0       	ldi	r27, 0x00	; 0
    1de4:	ee e4       	ldi	r30, 0x4E	; 78
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	80 81       	ld	r24, Z
    1dea:	82 60       	ori	r24, 0x02	; 2
    1dec:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    1dee:	ae e4       	ldi	r26, 0x4E	; 78
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	ee e4       	ldi	r30, 0x4E	; 78
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	8e 7f       	andi	r24, 0xFE	; 254
    1dfa:	8c 93       	st	X, r24

}
    1dfc:	28 96       	adiw	r28, 0x08	; 8
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <setServo>:

void setServo(u8  angle)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <setServo+0x6>
    1e14:	00 d0       	rcall	.+0      	; 0x1e16 <setServo+0x8>
    1e16:	0f 92       	push	r0
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	8d 83       	std	Y+5, r24	; 0x05
	u32 value = 0;
    1e1e:	19 82       	std	Y+1, r1	; 0x01
    1e20:	1a 82       	std	Y+2, r1	; 0x02
    1e22:	1b 82       	std	Y+3, r1	; 0x03
    1e24:	1c 82       	std	Y+4, r1	; 0x04
	value = (((1999-999)* (angle)/(180)) ) + 999;
    1e26:	8d 81       	ldd	r24, Y+5	; 0x05
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	88 ee       	ldi	r24, 0xE8	; 232
    1e2e:	93 e0       	ldi	r25, 0x03	; 3
    1e30:	ac 01       	movw	r20, r24
    1e32:	24 9f       	mul	r18, r20
    1e34:	c0 01       	movw	r24, r0
    1e36:	25 9f       	mul	r18, r21
    1e38:	90 0d       	add	r25, r0
    1e3a:	34 9f       	mul	r19, r20
    1e3c:	90 0d       	add	r25, r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	24 eb       	ldi	r18, 0xB4	; 180
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	b9 01       	movw	r22, r18
    1e46:	0e 94 2a 11 	call	0x2254	; 0x2254 <__divmodhi4>
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	89 51       	subi	r24, 0x19	; 25
    1e4e:	9c 4f       	sbci	r25, 0xFC	; 252
    1e50:	aa 27       	eor	r26, r26
    1e52:	97 fd       	sbrc	r25, 7
    1e54:	a0 95       	com	r26
    1e56:	ba 2f       	mov	r27, r26
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	ab 83       	std	Y+3, r26	; 0x03
    1e5e:	bc 83       	std	Y+4, r27	; 0x04
	TIMERS_u16_OCR1A_REG = value;
    1e60:	ea e4       	ldi	r30, 0x4A	; 74
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	91 83       	std	Z+1, r25	; 0x01
    1e6a:	80 83       	st	Z, r24
}
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <WDT_voidEnable>:

#define WDT_u8_WDTCR_REG      *((volatile u8 *)0x41)
void WDT_voidEnable (void)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
	//Enable WDT = 2.1 sec
	WDT_u8_WDTCR_REG = 0b00001111;
    1e84:	e1 e4       	ldi	r30, 0x41	; 65
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	8f e0       	ldi	r24, 0x0F	; 15
    1e8a:	80 83       	st	Z, r24
}
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <WDT_voidDisable>:
void WDT_voidDisable (void)
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
	WDT_u8_WDTCR_REG |= ((1<<4)|(1<<3));
    1e9a:	a1 e4       	ldi	r26, 0x41	; 65
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	e1 e4       	ldi	r30, 0x41	; 65
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	88 61       	ori	r24, 0x18	; 24
    1ea6:	8c 93       	st	X, r24

	WDT_u8_WDTCR_REG=0x00;
    1ea8:	e1 e4       	ldi	r30, 0x41	; 65
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	10 82       	st	Z, r1
}
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <__vector_11>:

void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1eb4:	1f 92       	push	r1
    1eb6:	0f 92       	push	r0
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	0f 92       	push	r0
    1ebc:	11 24       	eor	r1, r1
    1ebe:	2f 93       	push	r18
    1ec0:	3f 93       	push	r19
    1ec2:	4f 93       	push	r20
    1ec4:	5f 93       	push	r21
    1ec6:	6f 93       	push	r22
    1ec8:	7f 93       	push	r23
    1eca:	8f 93       	push	r24
    1ecc:	9f 93       	push	r25
    1ece:	af 93       	push	r26
    1ed0:	bf 93       	push	r27
    1ed2:	ef 93       	push	r30
    1ed4:	ff 93       	push	r31
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16CounterOVF=0;
	local_u16CounterOVF++;
    1ede:	80 91 1f 02 	lds	r24, 0x021F
    1ee2:	90 91 20 02 	lds	r25, 0x0220
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	90 93 20 02 	sts	0x0220, r25
    1eec:	80 93 1f 02 	sts	0x021F, r24
	if (local_u16CounterOVF==3907)
    1ef0:	80 91 1f 02 	lds	r24, 0x021F
    1ef4:	90 91 20 02 	lds	r25, 0x0220
    1ef8:	2f e0       	ldi	r18, 0x0F	; 15
    1efa:	83 34       	cpi	r24, 0x43	; 67
    1efc:	92 07       	cpc	r25, r18
    1efe:	99 f4       	brne	.+38     	; 0x1f26 <__vector_11+0x72>
	{
		//update Preload Value
		TIMERS_u8_TCNT0_REG = TIMERS_u8_PRELOAD_VALUE;
    1f00:	e2 e5       	ldi	r30, 0x52	; 82
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 ec       	ldi	r24, 0xC0	; 192
    1f06:	80 83       	st	Z, r24
		//Clear Counter value
		local_u16CounterOVF=0;
    1f08:	10 92 20 02 	sts	0x0220, r1
    1f0c:	10 92 1f 02 	sts	0x021F, r1
		if (TIMERS_pfTimer0OVF != NULL)
    1f10:	80 91 1b 02 	lds	r24, 0x021B
    1f14:	90 91 1c 02 	lds	r25, 0x021C
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	29 f0       	breq	.+10     	; 0x1f26 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    1f1c:	e0 91 1b 02 	lds	r30, 0x021B
    1f20:	f0 91 1c 02 	lds	r31, 0x021C
    1f24:	09 95       	icall
		}
	}
}
    1f26:	cf 91       	pop	r28
    1f28:	df 91       	pop	r29
    1f2a:	ff 91       	pop	r31
    1f2c:	ef 91       	pop	r30
    1f2e:	bf 91       	pop	r27
    1f30:	af 91       	pop	r26
    1f32:	9f 91       	pop	r25
    1f34:	8f 91       	pop	r24
    1f36:	7f 91       	pop	r23
    1f38:	6f 91       	pop	r22
    1f3a:	5f 91       	pop	r21
    1f3c:	4f 91       	pop	r20
    1f3e:	3f 91       	pop	r19
    1f40:	2f 91       	pop	r18
    1f42:	0f 90       	pop	r0
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	0f 90       	pop	r0
    1f48:	1f 90       	pop	r1
    1f4a:	18 95       	reti

00001f4c <__vector_10>:



void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    1f4c:	1f 92       	push	r1
    1f4e:	0f 92       	push	r0
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	0f 92       	push	r0
    1f54:	11 24       	eor	r1, r1
    1f56:	2f 93       	push	r18
    1f58:	3f 93       	push	r19
    1f5a:	4f 93       	push	r20
    1f5c:	5f 93       	push	r21
    1f5e:	6f 93       	push	r22
    1f60:	7f 93       	push	r23
    1f62:	8f 93       	push	r24
    1f64:	9f 93       	push	r25
    1f66:	af 93       	push	r26
    1f68:	bf 93       	push	r27
    1f6a:	ef 93       	push	r30
    1f6c:	ff 93       	push	r31
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	static u16 local_u16CounterCTC=0;
	local_u16CounterCTC++;
    1f76:	80 91 21 02 	lds	r24, 0x0221
    1f7a:	90 91 22 02 	lds	r25, 0x0222
    1f7e:	01 96       	adiw	r24, 0x01	; 1
    1f80:	90 93 22 02 	sts	0x0222, r25
    1f84:	80 93 21 02 	sts	0x0221, r24
	if (local_u16CounterCTC==5)
    1f88:	80 91 21 02 	lds	r24, 0x0221
    1f8c:	90 91 22 02 	lds	r25, 0x0222
    1f90:	85 30       	cpi	r24, 0x05	; 5
    1f92:	91 05       	cpc	r25, r1
    1f94:	79 f4       	brne	.+30     	; 0x1fb4 <__vector_10+0x68>
	{
		//Clear Counter value
		local_u16CounterCTC=0;
    1f96:	10 92 22 02 	sts	0x0222, r1
    1f9a:	10 92 21 02 	sts	0x0221, r1
		if (TIMERS_pfTimer0CTC != NULL)
    1f9e:	80 91 1d 02 	lds	r24, 0x021D
    1fa2:	90 91 1e 02 	lds	r25, 0x021E
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	29 f0       	breq	.+10     	; 0x1fb4 <__vector_10+0x68>
		{
			TIMERS_pfTimer0CTC();
    1faa:	e0 91 1d 02 	lds	r30, 0x021D
    1fae:	f0 91 1e 02 	lds	r31, 0x021E
    1fb2:	09 95       	icall
		}
	}
}
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	ff 91       	pop	r31
    1fba:	ef 91       	pop	r30
    1fbc:	bf 91       	pop	r27
    1fbe:	af 91       	pop	r26
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	7f 91       	pop	r23
    1fc6:	6f 91       	pop	r22
    1fc8:	5f 91       	pop	r21
    1fca:	4f 91       	pop	r20
    1fcc:	3f 91       	pop	r19
    1fce:	2f 91       	pop	r18
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <UART_Init>:
/***************************************************/
#include <util/delay.h>
/*********************************************************************************************************************************/
//============================================================================================
extern void UART_Init (void)
{
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62

	/*  Store the low byte of the UBBR*/
	UBRRL =  (u8) MyUBRR;
    1fe2:	e9 e2       	ldi	r30, 0x29	; 41
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	83 e3       	ldi	r24, 0x33	; 51
    1fe8:	80 83       	st	Z, r24

	/*  Store the High byte of the UBBR*/
	UBRRH = (u8)((MyUBRR)>>8);
    1fea:	e0 e4       	ldi	r30, 0x40	; 64
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	10 82       	st	Z, r1

	/* Configuration of UCSRnA Register  */
	UCSRnA= ( (U2X<<1) | (MPCM<<0) );
    1ff0:	eb e2       	ldi	r30, 0x2B	; 43
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	10 82       	st	Z, r1

	/* Enable Transmit bit(3) and Receive bit(4) in UCSRnC Register */
	UCSRnB = ( (RXEN<<4) | (TXEN<<3) | (UCSZ2<<2) );
    1ff6:	ea e2       	ldi	r30, 0x2A	; 42
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	88 e1       	ldi	r24, 0x18	; 24
    1ffc:	80 83       	st	Z, r24

	/* Configure UCRnC Register to make 8-bit data & 1 stop bit & no parity  Asynchronous Mode*/
	UCSRnC = ((URSEL << 7) | (UMSEL << 6) | (UPM1 << 5) | (UPM0 << 4)| (USBS << 3) | (UCSZ1 << 2) | (UCSZ0 << 1));
    1ffe:	e0 e4       	ldi	r30, 0x40	; 64
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	86 e8       	ldi	r24, 0x86	; 134
    2004:	80 83       	st	Z, r24

	//set_bit(SREG,7);
}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <UART_TransmitData>:

//==================================================================================================
extern void UART_TransmitData (u8 UART_DataToBeSent)
{
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	0f 92       	push	r0
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	89 83       	std	Y+1, r24	; 0x01

	/* So put data in the UDR Register */
	UDR=UART_DataToBeSent;
    2018:	ec e2       	ldi	r30, 0x2C	; 44
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	80 83       	st	Z, r24


	 /* check the bit5 (UDRE) is a flag bit to figure that if the UDR register empty or not */
	//while( ! (UCSRnA & (1<<6)) );
	while(GET_BIT(UCSRnA,5)==0);
    2020:	eb e2       	ldi	r30, 0x2B	; 43
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	82 95       	swap	r24
    2028:	86 95       	lsr	r24
    202a:	87 70       	andi	r24, 0x07	; 7
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	81 70       	andi	r24, 0x01	; 1
    2032:	90 70       	andi	r25, 0x00	; 0
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	a1 f3       	breq	.-24     	; 0x2020 <UART_TransmitData+0x14>
	//clear the transmit interrupt flag
	SET_BIT(UCSRnA,6);
    2038:	ab e2       	ldi	r26, 0x2B	; 43
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	eb e2       	ldi	r30, 0x2B	; 43
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 81       	ld	r24, Z
    2042:	80 64       	ori	r24, 0x40	; 64
    2044:	8c 93       	st	X, r24
}
    2046:	0f 90       	pop	r0
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <UART_RecieveData>:
///////////////////////////////////////////////////////////////////////////////////////////////////
extern u8 UART_RecieveData(void)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
	//while ( ! (UCSRnA & (1<<7)) );
	while(GET_BIT(UCSRnA,7)==0);
    2056:	eb e2       	ldi	r30, 0x2B	; 43
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	88 23       	and	r24, r24
    205e:	dc f7       	brge	.-10     	; 0x2056 <UART_RecieveData+0x8>
	return UDR;
    2060:	ec e2       	ldi	r30, 0x2C	; 44
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z

}
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <UART_voidPrintf>:
//====================================================================================================
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <UART_voidPrintf+0x6>
    2072:	0f 92       	push	r0
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	9b 83       	std	Y+3, r25	; 0x03
    207a:	8a 83       	std	Y+2, r24	; 0x02

	u8 iterator=0;
    207c:	19 82       	std	Y+1, r1	; 0x01

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
    207e:	19 82       	std	Y+1, r1	; 0x01
    2080:	0e c0       	rjmp	.+28     	; 0x209e <UART_voidPrintf+0x32>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	9b 81       	ldd	r25, Y+3	; 0x03
    208c:	fc 01       	movw	r30, r24
    208e:	e2 0f       	add	r30, r18
    2090:	f3 1f       	adc	r31, r19
    2092:	80 81       	ld	r24, Z
    2094:	0e 94 06 10 	call	0x200c	; 0x200c <UART_TransmitData>
extern void UART_voidPrintf(u8 Copy_u8PrintedData[])
{

	u8 iterator=0;

	for (iterator=0;Copy_u8PrintedData[iterator]!='\0';iterator++)
    2098:	89 81       	ldd	r24, Y+1	; 0x01
    209a:	8f 5f       	subi	r24, 0xFF	; 255
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	9b 81       	ldd	r25, Y+3	; 0x03
    20a8:	fc 01       	movw	r30, r24
    20aa:	e2 0f       	add	r30, r18
    20ac:	f3 1f       	adc	r31, r19
    20ae:	80 81       	ld	r24, Z
    20b0:	88 23       	and	r24, r24
    20b2:	39 f7       	brne	.-50     	; 0x2082 <UART_voidPrintf+0x16>
	{
		UART_TransmitData(Copy_u8PrintedData[ iterator]);

	}

}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <UART_Transmitnum>:
/*******Function to transmit integer value*******/
extern void UART_Transmitnum (u16 UART_NumToBeSent)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <UART_Transmitnum+0x6>
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01

	/* So put data in the UDR Register */
	UDR=UART_NumToBeSent+48;
    20ce:	ec e2       	ldi	r30, 0x2C	; 44
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	89 81       	ldd	r24, Y+1	; 0x01
    20d4:	80 5d       	subi	r24, 0xD0	; 208
    20d6:	80 83       	st	Z, r24


	 /* check the bit5 (UDRE) is a flag bit to figure that if the UDR register empty or not */
	//while( ! (UCSRnA & (1<<6)) );
	while(GET_BIT(UCSRnA,5)==0);
    20d8:	eb e2       	ldi	r30, 0x2B	; 43
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	82 95       	swap	r24
    20e0:	86 95       	lsr	r24
    20e2:	87 70       	andi	r24, 0x07	; 7
    20e4:	88 2f       	mov	r24, r24
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	81 70       	andi	r24, 0x01	; 1
    20ea:	90 70       	andi	r25, 0x00	; 0
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	a1 f3       	breq	.-24     	; 0x20d8 <UART_Transmitnum+0x18>
	//clear the transmit interrupt flag
	SET_BIT(UCSRnA,6);
    20f0:	ab e2       	ldi	r26, 0x2B	; 43
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	eb e2       	ldi	r30, 0x2B	; 43
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	80 64       	ori	r24, 0x40	; 64
    20fc:	8c 93       	st	X, r24
}
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <UART_recieve_string>:
/*******Function to Recive String *******/
void  UART_recieve_string(u8 *Copy_u8_ptr)
{//open bracket of Receive string function
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	27 97       	sbiw	r28, 0x07	; 7
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	9f 83       	std	Y+7, r25	; 0x07
    211e:	8e 83       	std	Y+6, r24	; 0x06
	/*Loop ToMake Empty Ptr Befor REciving	*/
	for(u16 i=0;Copy_u8_ptr[i]!='\n';i++)
    2120:	1a 82       	std	Y+2, r1	; 0x02
    2122:	19 82       	std	Y+1, r1	; 0x01
    2124:	0d c0       	rjmp	.+26     	; 0x2140 <UART_recieve_string+0x38>
		{//open bracket of for loop

		Copy_u8_ptr[i]=NULL;						 /*assign pointer of i to NULL								 */
    2126:	2e 81       	ldd	r18, Y+6	; 0x06
    2128:	3f 81       	ldd	r19, Y+7	; 0x07
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	f9 01       	movw	r30, r18
    2130:	e8 0f       	add	r30, r24
    2132:	f9 1f       	adc	r31, r25
    2134:	10 82       	st	Z, r1
}
/*******Function to Recive String *******/
void  UART_recieve_string(u8 *Copy_u8_ptr)
{//open bracket of Receive string function
	/*Loop ToMake Empty Ptr Befor REciving	*/
	for(u16 i=0;Copy_u8_ptr[i]!='\n';i++)
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	01 96       	adiw	r24, 0x01	; 1
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	2e 81       	ldd	r18, Y+6	; 0x06
    2142:	3f 81       	ldd	r19, Y+7	; 0x07
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	f9 01       	movw	r30, r18
    214a:	e8 0f       	add	r30, r24
    214c:	f9 1f       	adc	r31, r25
    214e:	80 81       	ld	r24, Z
    2150:	8a 30       	cpi	r24, 0x0A	; 10
    2152:	49 f7       	brne	.-46     	; 0x2126 <UART_recieve_string+0x1e>
		{//open bracket of for loop

		Copy_u8_ptr[i]=NULL;						 /*assign pointer of i to NULL								 */
		}//close bracket of for loop
    u16 Local_u8_i=0;								 /* Local integer variable to counter						 */
    2154:	1d 82       	std	Y+5, r1	; 0x05
    2156:	1c 82       	std	Y+4, r1	; 0x04
    u8 Local_u8_x=0;								 /*Local Char Varible to receive data from user				 */
    2158:	1b 82       	std	Y+3, r1	; 0x03
    Local_u8_x=UART_RecieveData();					 /* Calling UART Recive function To Receive data from user   */
    215a:	0e 94 27 10 	call	0x204e	; 0x204e <UART_RecieveData>
    215e:	8b 83       	std	Y+3, r24	; 0x03
    Copy_u8_ptr[Local_u8_i]=Local_u8_x;				 /*put Local Char Varible value on ptr						 */
    2160:	2e 81       	ldd	r18, Y+6	; 0x06
    2162:	3f 81       	ldd	r19, Y+7	; 0x07
    2164:	8c 81       	ldd	r24, Y+4	; 0x04
    2166:	9d 81       	ldd	r25, Y+5	; 0x05
    2168:	f9 01       	movw	r30, r18
    216a:	e8 0f       	add	r30, r24
    216c:	f9 1f       	adc	r31, r25
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	80 83       	st	Z, r24
	while(1)										 /* while Loop To recive String from user					 */
	{//open bracket of while loop
		Local_u8_i++;								 /* Incerement Counter by 1									 */
    2172:	8c 81       	ldd	r24, Y+4	; 0x04
    2174:	9d 81       	ldd	r25, Y+5	; 0x05
    2176:	01 96       	adiw	r24, 0x01	; 1
    2178:	9d 83       	std	Y+5, r25	; 0x05
    217a:	8c 83       	std	Y+4, r24	; 0x04
		Local_u8_x=UART_RecieveData();				 /* Calling UART Recive function To Receive data from user   */
    217c:	0e 94 27 10 	call	0x204e	; 0x204e <UART_RecieveData>
    2180:	8b 83       	std	Y+3, r24	; 0x03
	    if(Local_u8_x=='#')							 /* Check if Received datad is #							 */
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	83 32       	cpi	r24, 0x23	; 35
    2186:	51 f0       	breq	.+20     	; 0x219c <UART_recieve_string+0x94>
	    {//open bracket of if Condition
	    	break;									/* exit from while loop										 */
	    }//clouse bracket of if Condition
	    Copy_u8_ptr[Local_u8_i]=Local_u8_x;
    2188:	2e 81       	ldd	r18, Y+6	; 0x06
    218a:	3f 81       	ldd	r19, Y+7	; 0x07
    218c:	8c 81       	ldd	r24, Y+4	; 0x04
    218e:	9d 81       	ldd	r25, Y+5	; 0x05
    2190:	f9 01       	movw	r30, r18
    2192:	e8 0f       	add	r30, r24
    2194:	f9 1f       	adc	r31, r25
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	80 83       	st	Z, r24
    219a:	eb cf       	rjmp	.-42     	; 0x2172 <UART_recieve_string+0x6a>
	}//close bracket of while loop
}//close bracket of Receive string function
    219c:	27 96       	adiw	r28, 0x07	; 7
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	de bf       	out	0x3e, r29	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	cd bf       	out	0x3d, r28	; 61
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <main>:
#include "../Include/MCAL/UART/UART_Interface.h"
#include "../Include/MCAL/UART/UART_Private.h"
#include "../Include/MCAL/UART/UART_Configuration.h"

void (main)(void)																		/* Calling Main Function						   					*/
{//Open Bracket of Main function
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	00 d0       	rcall	.+0      	; 0x21b4 <main+0x6>
    21b4:	0f 92       	push	r0
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_x=0;																	/* Local char Variable to recive data from user    					*/
    21ba:	19 82       	std	Y+1, r1	; 0x01
	MDIO_voidInit();																	/* calling MDIO_voidInit function to intialize DIO 					*/
    21bc:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidInit>
	UART_Init();																		/* calling UART_Init function to intialize UART	   					*/
    21c0:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <UART_Init>
	GPI_voidEnable();																	/* calling GPI_voidEnable function to Enable Global Interrupt UART	*/
    21c4:	0e 94 6f 0b 	call	0x16de	; 0x16de <GPI_voidEnable>

	while (1)																			/* Super Loop														*/
	{//Open Bracket Of super Loop
		UART_voidPrintf("1->Door Controller\n2->Light Controller\n3->Close\n");			/* Calling UART print function To Display Choices Menu on user Screen*/
    21c8:	8f ea       	ldi	r24, 0xAF	; 175
    21ca:	91 e0       	ldi	r25, 0x01	; 1
    21cc:	0e 94 36 10 	call	0x206c	; 0x206c <UART_voidPrintf>
		Local_u8_x=UART_RecieveData();
    21d0:	0e 94 27 10 	call	0x204e	; 0x204e <UART_RecieveData>
    21d4:	89 83       	std	Y+1, r24	; 0x01
		switch(Local_u8_x)
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	3b 83       	std	Y+3, r19	; 0x03
    21de:	2a 83       	std	Y+2, r18	; 0x02
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	9b 81       	ldd	r25, Y+3	; 0x03
    21e4:	82 33       	cpi	r24, 0x32	; 50
    21e6:	91 05       	cpc	r25, r1
    21e8:	69 f0       	breq	.+26     	; 0x2204 <main+0x56>
    21ea:	2a 81       	ldd	r18, Y+2	; 0x02
    21ec:	3b 81       	ldd	r19, Y+3	; 0x03
    21ee:	23 33       	cpi	r18, 0x33	; 51
    21f0:	31 05       	cpc	r19, r1
    21f2:	59 f0       	breq	.+22     	; 0x220a <main+0x5c>
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	9b 81       	ldd	r25, Y+3	; 0x03
    21f8:	81 33       	cpi	r24, 0x31	; 49
    21fa:	91 05       	cpc	r25, r1
    21fc:	29 f7       	brne	.-54     	; 0x21c8 <main+0x1a>
		{// open bracket of Switch
		case '1':																		/* if user choice Door Controller									  */
				Door_controller();                                                      /* Calling  Door Controller Function								  */
    21fe:	0e 94 85 0c 	call	0x190a	; 0x190a <Door_controller>
    2202:	e2 cf       	rjmp	.-60     	; 0x21c8 <main+0x1a>
			break;//end of case 1
		case '2':                                                                       /* if user choice Light Controller									   */
				LIGHT_Controller();                                                     /* Calling Light Controller	Function								   */
    2204:	0e 94 cd 0b 	call	0x179a	; 0x179a <LIGHT_Controller>
    2208:	df cf       	rjmp	.-66     	; 0x21c8 <main+0x1a>
			break;//end of case 2
		case '3':																		/* if user choice Return											   */
			return;                                                                     /* Exit from function												   */
		}// Close bracket of Switch
	}//Close Bracket Of super Loop
}//Close Bracket of Mainfunction
    220a:	0f 90       	pop	r0
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	cf 91       	pop	r28
    2212:	df 91       	pop	r29
    2214:	08 95       	ret

00002216 <__mulsi3>:
    2216:	62 9f       	mul	r22, r18
    2218:	d0 01       	movw	r26, r0
    221a:	73 9f       	mul	r23, r19
    221c:	f0 01       	movw	r30, r0
    221e:	82 9f       	mul	r24, r18
    2220:	e0 0d       	add	r30, r0
    2222:	f1 1d       	adc	r31, r1
    2224:	64 9f       	mul	r22, r20
    2226:	e0 0d       	add	r30, r0
    2228:	f1 1d       	adc	r31, r1
    222a:	92 9f       	mul	r25, r18
    222c:	f0 0d       	add	r31, r0
    222e:	83 9f       	mul	r24, r19
    2230:	f0 0d       	add	r31, r0
    2232:	74 9f       	mul	r23, r20
    2234:	f0 0d       	add	r31, r0
    2236:	65 9f       	mul	r22, r21
    2238:	f0 0d       	add	r31, r0
    223a:	99 27       	eor	r25, r25
    223c:	72 9f       	mul	r23, r18
    223e:	b0 0d       	add	r27, r0
    2240:	e1 1d       	adc	r30, r1
    2242:	f9 1f       	adc	r31, r25
    2244:	63 9f       	mul	r22, r19
    2246:	b0 0d       	add	r27, r0
    2248:	e1 1d       	adc	r30, r1
    224a:	f9 1f       	adc	r31, r25
    224c:	bd 01       	movw	r22, r26
    224e:	cf 01       	movw	r24, r30
    2250:	11 24       	eor	r1, r1
    2252:	08 95       	ret

00002254 <__divmodhi4>:
    2254:	97 fb       	bst	r25, 7
    2256:	09 2e       	mov	r0, r25
    2258:	07 26       	eor	r0, r23
    225a:	0a d0       	rcall	.+20     	; 0x2270 <__divmodhi4_neg1>
    225c:	77 fd       	sbrc	r23, 7
    225e:	04 d0       	rcall	.+8      	; 0x2268 <__divmodhi4_neg2>
    2260:	2e d0       	rcall	.+92     	; 0x22be <__udivmodhi4>
    2262:	06 d0       	rcall	.+12     	; 0x2270 <__divmodhi4_neg1>
    2264:	00 20       	and	r0, r0
    2266:	1a f4       	brpl	.+6      	; 0x226e <__divmodhi4_exit>

00002268 <__divmodhi4_neg2>:
    2268:	70 95       	com	r23
    226a:	61 95       	neg	r22
    226c:	7f 4f       	sbci	r23, 0xFF	; 255

0000226e <__divmodhi4_exit>:
    226e:	08 95       	ret

00002270 <__divmodhi4_neg1>:
    2270:	f6 f7       	brtc	.-4      	; 0x226e <__divmodhi4_exit>
    2272:	90 95       	com	r25
    2274:	81 95       	neg	r24
    2276:	9f 4f       	sbci	r25, 0xFF	; 255
    2278:	08 95       	ret

0000227a <__udivmodsi4>:
    227a:	a1 e2       	ldi	r26, 0x21	; 33
    227c:	1a 2e       	mov	r1, r26
    227e:	aa 1b       	sub	r26, r26
    2280:	bb 1b       	sub	r27, r27
    2282:	fd 01       	movw	r30, r26
    2284:	0d c0       	rjmp	.+26     	; 0x22a0 <__udivmodsi4_ep>

00002286 <__udivmodsi4_loop>:
    2286:	aa 1f       	adc	r26, r26
    2288:	bb 1f       	adc	r27, r27
    228a:	ee 1f       	adc	r30, r30
    228c:	ff 1f       	adc	r31, r31
    228e:	a2 17       	cp	r26, r18
    2290:	b3 07       	cpc	r27, r19
    2292:	e4 07       	cpc	r30, r20
    2294:	f5 07       	cpc	r31, r21
    2296:	20 f0       	brcs	.+8      	; 0x22a0 <__udivmodsi4_ep>
    2298:	a2 1b       	sub	r26, r18
    229a:	b3 0b       	sbc	r27, r19
    229c:	e4 0b       	sbc	r30, r20
    229e:	f5 0b       	sbc	r31, r21

000022a0 <__udivmodsi4_ep>:
    22a0:	66 1f       	adc	r22, r22
    22a2:	77 1f       	adc	r23, r23
    22a4:	88 1f       	adc	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	1a 94       	dec	r1
    22aa:	69 f7       	brne	.-38     	; 0x2286 <__udivmodsi4_loop>
    22ac:	60 95       	com	r22
    22ae:	70 95       	com	r23
    22b0:	80 95       	com	r24
    22b2:	90 95       	com	r25
    22b4:	9b 01       	movw	r18, r22
    22b6:	ac 01       	movw	r20, r24
    22b8:	bd 01       	movw	r22, r26
    22ba:	cf 01       	movw	r24, r30
    22bc:	08 95       	ret

000022be <__udivmodhi4>:
    22be:	aa 1b       	sub	r26, r26
    22c0:	bb 1b       	sub	r27, r27
    22c2:	51 e1       	ldi	r21, 0x11	; 17
    22c4:	07 c0       	rjmp	.+14     	; 0x22d4 <__udivmodhi4_ep>

000022c6 <__udivmodhi4_loop>:
    22c6:	aa 1f       	adc	r26, r26
    22c8:	bb 1f       	adc	r27, r27
    22ca:	a6 17       	cp	r26, r22
    22cc:	b7 07       	cpc	r27, r23
    22ce:	10 f0       	brcs	.+4      	; 0x22d4 <__udivmodhi4_ep>
    22d0:	a6 1b       	sub	r26, r22
    22d2:	b7 0b       	sbc	r27, r23

000022d4 <__udivmodhi4_ep>:
    22d4:	88 1f       	adc	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	5a 95       	dec	r21
    22da:	a9 f7       	brne	.-22     	; 0x22c6 <__udivmodhi4_loop>
    22dc:	80 95       	com	r24
    22de:	90 95       	com	r25
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	08 95       	ret

000022e6 <__prologue_saves__>:
    22e6:	2f 92       	push	r2
    22e8:	3f 92       	push	r3
    22ea:	4f 92       	push	r4
    22ec:	5f 92       	push	r5
    22ee:	6f 92       	push	r6
    22f0:	7f 92       	push	r7
    22f2:	8f 92       	push	r8
    22f4:	9f 92       	push	r9
    22f6:	af 92       	push	r10
    22f8:	bf 92       	push	r11
    22fa:	cf 92       	push	r12
    22fc:	df 92       	push	r13
    22fe:	ef 92       	push	r14
    2300:	ff 92       	push	r15
    2302:	0f 93       	push	r16
    2304:	1f 93       	push	r17
    2306:	cf 93       	push	r28
    2308:	df 93       	push	r29
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	ca 1b       	sub	r28, r26
    2310:	db 0b       	sbc	r29, r27
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	de bf       	out	0x3e, r29	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	09 94       	ijmp

0000231e <__epilogue_restores__>:
    231e:	2a 88       	ldd	r2, Y+18	; 0x12
    2320:	39 88       	ldd	r3, Y+17	; 0x11
    2322:	48 88       	ldd	r4, Y+16	; 0x10
    2324:	5f 84       	ldd	r5, Y+15	; 0x0f
    2326:	6e 84       	ldd	r6, Y+14	; 0x0e
    2328:	7d 84       	ldd	r7, Y+13	; 0x0d
    232a:	8c 84       	ldd	r8, Y+12	; 0x0c
    232c:	9b 84       	ldd	r9, Y+11	; 0x0b
    232e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2330:	b9 84       	ldd	r11, Y+9	; 0x09
    2332:	c8 84       	ldd	r12, Y+8	; 0x08
    2334:	df 80       	ldd	r13, Y+7	; 0x07
    2336:	ee 80       	ldd	r14, Y+6	; 0x06
    2338:	fd 80       	ldd	r15, Y+5	; 0x05
    233a:	0c 81       	ldd	r16, Y+4	; 0x04
    233c:	1b 81       	ldd	r17, Y+3	; 0x03
    233e:	aa 81       	ldd	r26, Y+2	; 0x02
    2340:	b9 81       	ldd	r27, Y+1	; 0x01
    2342:	ce 0f       	add	r28, r30
    2344:	d1 1d       	adc	r29, r1
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	ed 01       	movw	r28, r26
    2352:	08 95       	ret

00002354 <strcmp>:
    2354:	fb 01       	movw	r30, r22
    2356:	dc 01       	movw	r26, r24
    2358:	8d 91       	ld	r24, X+
    235a:	01 90       	ld	r0, Z+
    235c:	80 19       	sub	r24, r0
    235e:	01 10       	cpse	r0, r1
    2360:	d9 f3       	breq	.-10     	; 0x2358 <strcmp+0x4>
    2362:	99 0b       	sbc	r25, r25
    2364:	08 95       	ret

00002366 <_exit>:
    2366:	f8 94       	cli

00002368 <__stop_program>:
    2368:	ff cf       	rjmp	.-2      	; 0x2368 <__stop_program>
