
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00002376  0000240a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800096  00800096  00002440  2**0
                  ALLOC
  3 .stab         00001998  00000000  00000000  00002440  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f4d  00000000  00000000  00003dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007b09  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000088b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e7       	ldi	r30, 0x76	; 118
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 37 0b 	call	0x166e	; 0x166e <main>
      8a:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e6       	ldi	r26, 0x6D	; 109
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e6       	ldi	r24, 0x6D	; 109
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MDIO_voidInit>:
#include"../Include/MCAL/DIO/DIO_Private.h"
#include"../Include/MCAL/DIO/DIO_Configuration.h"


void MDIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Set all port A pins Direction due to pre-configurations.*/
	DIO_u8_DDRA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
							  DIO_u8_PA4_INITIAL_DIRECTION,DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,
							  DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION);

	/*Set all port B pins Direction due to pre-configurations.*/
	DIO_u8_DDRB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	80 83       	st	Z, r24
							  DIO_u8_PB4_INITIAL_DIRECTION,DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,
							  DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION);

	/*Set all port C pins Direction due to pre-configurations.*/
	DIO_u8_DDRC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f e0       	ldi	r24, 0x0F	; 15
     b64:	80 83       	st	Z, r24
							  DIO_u8_PC4_INITIAL_DIRECTION,DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,
							  DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION);

	/*Set all port D pins Direction due to pre-configurations.*/
	DIO_u8_DDRD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
							  DIO_u8_PD4_INITIAL_DIRECTION,DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,
							  DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION);


	/*Set all port A pins Values due to pre-configurations.*/
	DIO_u8_PORTA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE,
     b6c:	eb e3       	ldi	r30, 0x3B	; 59
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
							   DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE,
							   DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);

	/*Set all port B pins Values due to pre-configurations.*/
	DIO_u8_PORTB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE,
     b72:	e8 e3       	ldi	r30, 0x38	; 56
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
							   DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE,
							   DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);

	/*Set all port C pins Values due to pre-configurations.*/
	DIO_u8_PORTC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE,
     b78:	e5 e3       	ldi	r30, 0x35	; 53
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	80 83       	st	Z, r24
							   DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE,
							   DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);

	/*Set all port D pins Values due to pre-configurations.*/
	DIO_u8_PORTD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE,
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	10 82       	st	Z, r1
							   DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE,
							   DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);

}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <MDIO_voidSetPinDIrection>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8PinDirection: DIO_u8_OUTPUT - DIO_u8_INPUT						  */
/******************************************************************************/
void MDIO_voidSetPinDIrection (u8 copy_u8PortID, u8 copy_u8PinID, u8 copy_u8PinDIrection)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	2d 97       	sbiw	r28, 0x0d	; 13
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	6a 83       	std	Y+2, r22	; 0x02
     ba4:	4b 83       	std	Y+3, r20	; 0x03
	/*Inputs Validation*/
	if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA) ||
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	84 30       	cpi	r24, 0x04	; 4
     baa:	08 f0       	brcs	.+2      	; 0xbae <MDIO_voidSetPinDIrection+0x22>
     bac:	04 c1       	rjmp	.+520    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
     bae:	8a 81       	ldd	r24, Y+2	; 0x02
     bb0:	88 30       	cpi	r24, 0x08	; 8
     bb2:	08 f0       	brcs	.+2      	; 0xbb6 <MDIO_voidSetPinDIrection+0x2a>
     bb4:	00 c1       	rjmp	.+512    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortID)
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	3d 87       	std	Y+13, r19	; 0x0d
     bbe:	2c 87       	std	Y+12, r18	; 0x0c
     bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <MDIO_voidSetPinDIrection+0x40>
     bca:	4f c0       	rjmp	.+158    	; 0xc6a <MDIO_voidSetPinDIrection+0xde>
     bcc:	2c 85       	ldd	r18, Y+12	; 0x0c
     bce:	3d 85       	ldd	r19, Y+13	; 0x0d
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <MDIO_voidSetPinDIrection+0x54>
     bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	71 f0       	breq	.+28     	; 0xbfa <MDIO_voidSetPinDIrection+0x6e>
     bde:	eb c0       	rjmp	.+470    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
     be0:	2c 85       	ldd	r18, Y+12	; 0x0c
     be2:	3d 85       	ldd	r19, Y+13	; 0x0d
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	09 f4       	brne	.+2      	; 0xbec <MDIO_voidSetPinDIrection+0x60>
     bea:	77 c0       	rjmp	.+238    	; 0xcda <MDIO_voidSetPinDIrection+0x14e>
     bec:	8c 85       	ldd	r24, Y+12	; 0x0c
     bee:	9d 85       	ldd	r25, Y+13	; 0x0d
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	91 05       	cpc	r25, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <MDIO_voidSetPinDIrection+0x6c>
     bf6:	a9 c0       	rjmp	.+338    	; 0xd4a <MDIO_voidSetPinDIrection+0x1be>
     bf8:	de c0       	rjmp	.+444    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
		{
		   case DIO_u8_PORTA:
			   	   	   	   	   switch (copy_u8PinDIrection) //check on direction
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	3b 87       	std	Y+11, r19	; 0x0b
     c02:	2a 87       	std	Y+10, r18	; 0x0a
     c04:	8a 85       	ldd	r24, Y+10	; 0x0a
     c06:	9b 85       	ldd	r25, Y+11	; 0x0b
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	d1 f0       	breq	.+52     	; 0xc40 <MDIO_voidSetPinDIrection+0xb4>
     c0c:	2a 85       	ldd	r18, Y+10	; 0x0a
     c0e:	3b 85       	ldd	r19, Y+11	; 0x0b
     c10:	21 30       	cpi	r18, 0x01	; 1
     c12:	31 05       	cpc	r19, r1
     c14:	09 f0       	breq	.+2      	; 0xc18 <MDIO_voidSetPinDIrection+0x8c>
     c16:	cf c0       	rjmp	.+414    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
			   	   	   	   	   {
			   	   	   	   	     case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,copy_u8PinID);  break; //set pin to output mode
     c18:	aa e3       	ldi	r26, 0x3A	; 58
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	ea e3       	ldi	r30, 0x3A	; 58
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <MDIO_voidSetPinDIrection+0xaa>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <MDIO_voidSetPinDIrection+0xa6>
     c3a:	84 2b       	or	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	bb c0       	rjmp	.+374    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
			   	   	   	   	     case DIO_u8_INPUT:  CLR_BIT(DIO_u8_DDRA_REG,copy_u8PinID);  break; //set pin to input mode
     c40:	aa e3       	ldi	r26, 0x3A	; 58
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	ea e3       	ldi	r30, 0x3A	; 58
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <MDIO_voidSetPinDIrection+0xd2>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <MDIO_voidSetPinDIrection+0xce>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	a6 c0       	rjmp	.+332    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
			   	   	   	   	   }//end of switch
			   	   	   	   	   break;
		   case DIO_u8_PORTB:
							   switch (copy_u8PinDIrection) //check on direction
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	39 87       	std	Y+9, r19	; 0x09
     c72:	28 87       	std	Y+8, r18	; 0x08
     c74:	88 85       	ldd	r24, Y+8	; 0x08
     c76:	99 85       	ldd	r25, Y+9	; 0x09
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	d1 f0       	breq	.+52     	; 0xcb0 <MDIO_voidSetPinDIrection+0x124>
     c7c:	28 85       	ldd	r18, Y+8	; 0x08
     c7e:	39 85       	ldd	r19, Y+9	; 0x09
     c80:	21 30       	cpi	r18, 0x01	; 1
     c82:	31 05       	cpc	r19, r1
     c84:	09 f0       	breq	.+2      	; 0xc88 <MDIO_voidSetPinDIrection+0xfc>
     c86:	97 c0       	rjmp	.+302    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
							   {
								 case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,copy_u8PinID);  break; //set pin to output mode
     c88:	a7 e3       	ldi	r26, 0x37	; 55
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e7 e3       	ldi	r30, 0x37	; 55
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <MDIO_voidSetPinDIrection+0x11a>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <MDIO_voidSetPinDIrection+0x116>
     caa:	84 2b       	or	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	83 c0       	rjmp	.+262    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
								 case DIO_u8_INPUT:  CLR_BIT(DIO_u8_DDRB_REG,copy_u8PinID);  break; //set pin to input mode
     cb0:	a7 e3       	ldi	r26, 0x37	; 55
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e7 e3       	ldi	r30, 0x37	; 55
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 2e       	mov	r0, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <MDIO_voidSetPinDIrection+0x142>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <MDIO_voidSetPinDIrection+0x13e>
     cd2:	80 95       	com	r24
     cd4:	84 23       	and	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	6e c0       	rjmp	.+220    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
							   }//end of switch
							   break;
		   case DIO_u8_PORTC:
							   switch (copy_u8PinDIrection) //check on direction
     cda:	8b 81       	ldd	r24, Y+3	; 0x03
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	3f 83       	std	Y+7, r19	; 0x07
     ce2:	2e 83       	std	Y+6, r18	; 0x06
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	d1 f0       	breq	.+52     	; 0xd20 <MDIO_voidSetPinDIrection+0x194>
     cec:	2e 81       	ldd	r18, Y+6	; 0x06
     cee:	3f 81       	ldd	r19, Y+7	; 0x07
     cf0:	21 30       	cpi	r18, 0x01	; 1
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <MDIO_voidSetPinDIrection+0x16c>
     cf6:	5f c0       	rjmp	.+190    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
							   {
								 case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,copy_u8PinID);  break; //set pin to output mode
     cf8:	a4 e3       	ldi	r26, 0x34	; 52
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e4 e3       	ldi	r30, 0x34	; 52
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	48 2f       	mov	r20, r24
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 2e       	mov	r0, r18
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <MDIO_voidSetPinDIrection+0x18a>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <MDIO_voidSetPinDIrection+0x186>
     d1a:	84 2b       	or	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	4b c0       	rjmp	.+150    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
								 case DIO_u8_INPUT:  CLR_BIT(DIO_u8_DDRC_REG,copy_u8PinID);  break; //set pin to input mode
     d20:	a4 e3       	ldi	r26, 0x34	; 52
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e4 e3       	ldi	r30, 0x34	; 52
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <MDIO_voidSetPinDIrection+0x1b2>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <MDIO_voidSetPinDIrection+0x1ae>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	36 c0       	rjmp	.+108    	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
							   }//end of switch
							   break;
		   case DIO_u8_PORTD:
							   switch (copy_u8PinDIrection) //check on direction
     d4a:	8b 81       	ldd	r24, Y+3	; 0x03
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	3d 83       	std	Y+5, r19	; 0x05
     d52:	2c 83       	std	Y+4, r18	; 0x04
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	9d 81       	ldd	r25, Y+5	; 0x05
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	c9 f0       	breq	.+50     	; 0xd8e <MDIO_voidSetPinDIrection+0x202>
     d5c:	2c 81       	ldd	r18, Y+4	; 0x04
     d5e:	3d 81       	ldd	r19, Y+5	; 0x05
     d60:	21 30       	cpi	r18, 0x01	; 1
     d62:	31 05       	cpc	r19, r1
     d64:	41 f5       	brne	.+80     	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
							   {
								 case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,copy_u8PinID);  break; //set pin to output mode
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <MDIO_voidSetPinDIrection+0x1f8>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <MDIO_voidSetPinDIrection+0x1f4>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	14 c0       	rjmp	.+40     	; 0xdb6 <MDIO_voidSetPinDIrection+0x22a>
								 case DIO_u8_INPUT:  CLR_BIT(DIO_u8_DDRD_REG,copy_u8PinID);  break; //set pin to input mode
     d8e:	a1 e3       	ldi	r26, 0x31	; 49
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e1 e3       	ldi	r30, 0x31	; 49
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <MDIO_voidSetPinDIrection+0x220>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <MDIO_voidSetPinDIrection+0x21c>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
							   }//end of switch
							   break;
		}//end of switch
	}//end of else
}//end of function
     db6:	2d 96       	adiw	r28, 0x0d	; 13
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <MDIO_voidSetPinValue>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8Value: DIO_u8_HIGH - DIO_u8_LOW		    						  */
/******************************************************************************/
void MDIO_voidSetPinValue (u8 copy_u8PortID, u8 copy_u8PinID, u8 copy_u8PinValue)
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	2d 97       	sbiw	r28, 0x0d	; 13
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	6a 83       	std	Y+2, r22	; 0x02
     de0:	4b 83       	std	Y+3, r20	; 0x03
	/*Inputs Validation*/
	if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA) ||
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	84 30       	cpi	r24, 0x04	; 4
     de6:	08 f0       	brcs	.+2      	; 0xdea <MDIO_voidSetPinValue+0x22>
     de8:	04 c1       	rjmp	.+520    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	88 30       	cpi	r24, 0x08	; 8
     dee:	08 f0       	brcs	.+2      	; 0xdf2 <MDIO_voidSetPinValue+0x2a>
     df0:	00 c1       	rjmp	.+512    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortID)
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	3d 87       	std	Y+13, r19	; 0x0d
     dfa:	2c 87       	std	Y+12, r18	; 0x0c
     dfc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dfe:	9d 85       	ldd	r25, Y+13	; 0x0d
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	91 05       	cpc	r25, r1
     e04:	09 f4       	brne	.+2      	; 0xe08 <MDIO_voidSetPinValue+0x40>
     e06:	4f c0       	rjmp	.+158    	; 0xea6 <MDIO_voidSetPinValue+0xde>
     e08:	2c 85       	ldd	r18, Y+12	; 0x0c
     e0a:	3d 85       	ldd	r19, Y+13	; 0x0d
     e0c:	22 30       	cpi	r18, 0x02	; 2
     e0e:	31 05       	cpc	r19, r1
     e10:	2c f4       	brge	.+10     	; 0xe1c <MDIO_voidSetPinValue+0x54>
     e12:	8c 85       	ldd	r24, Y+12	; 0x0c
     e14:	9d 85       	ldd	r25, Y+13	; 0x0d
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	71 f0       	breq	.+28     	; 0xe36 <MDIO_voidSetPinValue+0x6e>
     e1a:	eb c0       	rjmp	.+470    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
     e1c:	2c 85       	ldd	r18, Y+12	; 0x0c
     e1e:	3d 85       	ldd	r19, Y+13	; 0x0d
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	09 f4       	brne	.+2      	; 0xe28 <MDIO_voidSetPinValue+0x60>
     e26:	77 c0       	rjmp	.+238    	; 0xf16 <MDIO_voidSetPinValue+0x14e>
     e28:	8c 85       	ldd	r24, Y+12	; 0x0c
     e2a:	9d 85       	ldd	r25, Y+13	; 0x0d
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <MDIO_voidSetPinValue+0x6c>
     e32:	a9 c0       	rjmp	.+338    	; 0xf86 <MDIO_voidSetPinValue+0x1be>
     e34:	de c0       	rjmp	.+444    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
		{
		   case DIO_u8_PORTA:
			   	   	   	   	   switch (copy_u8PinValue) //check on direction
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	3b 87       	std	Y+11, r19	; 0x0b
     e3e:	2a 87       	std	Y+10, r18	; 0x0a
     e40:	8a 85       	ldd	r24, Y+10	; 0x0a
     e42:	9b 85       	ldd	r25, Y+11	; 0x0b
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	d1 f0       	breq	.+52     	; 0xe7c <MDIO_voidSetPinValue+0xb4>
     e48:	2a 85       	ldd	r18, Y+10	; 0x0a
     e4a:	3b 85       	ldd	r19, Y+11	; 0x0b
     e4c:	21 30       	cpi	r18, 0x01	; 1
     e4e:	31 05       	cpc	r19, r1
     e50:	09 f0       	breq	.+2      	; 0xe54 <MDIO_voidSetPinValue+0x8c>
     e52:	cf c0       	rjmp	.+414    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
			   	   	   	   	   {
			   	   	   	   	     case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinID);  break; //set pin to High mode
     e54:	ab e3       	ldi	r26, 0x3B	; 59
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	eb e3       	ldi	r30, 0x3B	; 59
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <MDIO_voidSetPinValue+0xaa>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <MDIO_voidSetPinValue+0xa6>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	bb c0       	rjmp	.+374    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
			   	   	   	   	     case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinID);  break; //set pin to Low mode
     e7c:	ab e3       	ldi	r26, 0x3B	; 59
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	eb e3       	ldi	r30, 0x3B	; 59
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <MDIO_voidSetPinValue+0xd2>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <MDIO_voidSetPinValue+0xce>
     e9e:	80 95       	com	r24
     ea0:	84 23       	and	r24, r20
     ea2:	8c 93       	st	X, r24
     ea4:	a6 c0       	rjmp	.+332    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
			   	   	   	   	   }//end of switch
			   	   	   	   	   break;
		   case DIO_u8_PORTB:
							   switch (copy_u8PinValue) //check on direction
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	39 87       	std	Y+9, r19	; 0x09
     eae:	28 87       	std	Y+8, r18	; 0x08
     eb0:	88 85       	ldd	r24, Y+8	; 0x08
     eb2:	99 85       	ldd	r25, Y+9	; 0x09
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	d1 f0       	breq	.+52     	; 0xeec <MDIO_voidSetPinValue+0x124>
     eb8:	28 85       	ldd	r18, Y+8	; 0x08
     eba:	39 85       	ldd	r19, Y+9	; 0x09
     ebc:	21 30       	cpi	r18, 0x01	; 1
     ebe:	31 05       	cpc	r19, r1
     ec0:	09 f0       	breq	.+2      	; 0xec4 <MDIO_voidSetPinValue+0xfc>
     ec2:	97 c0       	rjmp	.+302    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							   {
								 case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinID);  break; //set pin to High mode
     ec4:	a8 e3       	ldi	r26, 0x38	; 56
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e8 e3       	ldi	r30, 0x38	; 56
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <MDIO_voidSetPinValue+0x11a>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <MDIO_voidSetPinValue+0x116>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	83 c0       	rjmp	.+262    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
								 case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinID);  break; //set pin to Low mode
     eec:	a8 e3       	ldi	r26, 0x38	; 56
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e8 e3       	ldi	r30, 0x38	; 56
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <MDIO_voidSetPinValue+0x142>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <MDIO_voidSetPinValue+0x13e>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	6e c0       	rjmp	.+220    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							   }//end of switch
							   break;
		   case DIO_u8_PORTC:
							   switch (copy_u8PinValue) //check on direction
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3f 83       	std	Y+7, r19	; 0x07
     f1e:	2e 83       	std	Y+6, r18	; 0x06
     f20:	8e 81       	ldd	r24, Y+6	; 0x06
     f22:	9f 81       	ldd	r25, Y+7	; 0x07
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	d1 f0       	breq	.+52     	; 0xf5c <MDIO_voidSetPinValue+0x194>
     f28:	2e 81       	ldd	r18, Y+6	; 0x06
     f2a:	3f 81       	ldd	r19, Y+7	; 0x07
     f2c:	21 30       	cpi	r18, 0x01	; 1
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f0       	breq	.+2      	; 0xf34 <MDIO_voidSetPinValue+0x16c>
     f32:	5f c0       	rjmp	.+190    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							   {
								 case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinID);  break; //set pin to High mode
     f34:	a5 e3       	ldi	r26, 0x35	; 53
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e5 e3       	ldi	r30, 0x35	; 53
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <MDIO_voidSetPinValue+0x18a>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <MDIO_voidSetPinValue+0x186>
     f56:	84 2b       	or	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	4b c0       	rjmp	.+150    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
								 case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinID);  break; //set pin to Low mode
     f5c:	a5 e3       	ldi	r26, 0x35	; 53
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	e5 e3       	ldi	r30, 0x35	; 53
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
     f66:	48 2f       	mov	r20, r24
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	28 2f       	mov	r18, r24
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	02 2e       	mov	r0, r18
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <MDIO_voidSetPinValue+0x1b2>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	0a 94       	dec	r0
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <MDIO_voidSetPinValue+0x1ae>
     f7e:	80 95       	com	r24
     f80:	84 23       	and	r24, r20
     f82:	8c 93       	st	X, r24
     f84:	36 c0       	rjmp	.+108    	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							   }//end of switch
							   break;
		   case DIO_u8_PORTD:
							   switch (copy_u8PinValue) //check on direction
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	3d 83       	std	Y+5, r19	; 0x05
     f8e:	2c 83       	std	Y+4, r18	; 0x04
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	c9 f0       	breq	.+50     	; 0xfca <MDIO_voidSetPinValue+0x202>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	21 30       	cpi	r18, 0x01	; 1
     f9e:	31 05       	cpc	r19, r1
     fa0:	41 f5       	brne	.+80     	; 0xff2 <MDIO_voidSetPinValue+0x22a>
							   {
								 case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinID);  break; //set pin to High mode
     fa2:	a2 e3       	ldi	r26, 0x32	; 50
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e2 e3       	ldi	r30, 0x32	; 50
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <MDIO_voidSetPinValue+0x1f8>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <MDIO_voidSetPinValue+0x1f4>
     fc4:	84 2b       	or	r24, r20
     fc6:	8c 93       	st	X, r24
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <MDIO_voidSetPinValue+0x22a>
								 case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinID);  break; //set pin to Low mode
     fca:	a2 e3       	ldi	r26, 0x32	; 50
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e2 e3       	ldi	r30, 0x32	; 50
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <MDIO_voidSetPinValue+0x220>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <MDIO_voidSetPinValue+0x21c>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
							   }//end of switch
							   break;
		}//end of switch
	}//end of else
}//end of function
     ff2:	2d 96       	adiw	r28, 0x0d	; 13
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <MDIO_u8GetPinValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/******************************************************************************/
u8 MDIO_u8GetPinValue (u8 copy_u8PortID, u8 copy_u8PinID)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	00 d0       	rcall	.+0      	; 0x100a <MDIO_u8GetPinValue+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <MDIO_u8GetPinValue+0x8>
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	8a 83       	std	Y+2, r24	; 0x02
    1014:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=2;
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	89 83       	std	Y+1, r24	; 0x01
	/*Inputs Validation*/
		if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA) ||
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	84 30       	cpi	r24, 0x04	; 4
    101e:	08 f0       	brcs	.+2      	; 0x1022 <MDIO_u8GetPinValue+0x1e>
    1020:	6b c0       	rjmp	.+214    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	88 30       	cpi	r24, 0x08	; 8
    1026:	08 f0       	brcs	.+2      	; 0x102a <MDIO_u8GetPinValue+0x26>
    1028:	67 c0       	rjmp	.+206    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
		{

		}
		else
		{
			switch (copy_u8PortID)
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3d 83       	std	Y+5, r19	; 0x05
    1032:	2c 83       	std	Y+4, r18	; 0x04
    1034:	4c 81       	ldd	r20, Y+4	; 0x04
    1036:	5d 81       	ldd	r21, Y+5	; 0x05
    1038:	41 30       	cpi	r20, 0x01	; 1
    103a:	51 05       	cpc	r21, r1
    103c:	41 f1       	breq	.+80     	; 0x108e <MDIO_u8GetPinValue+0x8a>
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	82 30       	cpi	r24, 0x02	; 2
    1044:	91 05       	cpc	r25, r1
    1046:	34 f4       	brge	.+12     	; 0x1054 <MDIO_u8GetPinValue+0x50>
    1048:	2c 81       	ldd	r18, Y+4	; 0x04
    104a:	3d 81       	ldd	r19, Y+5	; 0x05
    104c:	21 15       	cp	r18, r1
    104e:	31 05       	cpc	r19, r1
    1050:	61 f0       	breq	.+24     	; 0x106a <MDIO_u8GetPinValue+0x66>
    1052:	52 c0       	rjmp	.+164    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
    1054:	4c 81       	ldd	r20, Y+4	; 0x04
    1056:	5d 81       	ldd	r21, Y+5	; 0x05
    1058:	42 30       	cpi	r20, 0x02	; 2
    105a:	51 05       	cpc	r21, r1
    105c:	51 f1       	breq	.+84     	; 0x10b2 <MDIO_u8GetPinValue+0xae>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	83 30       	cpi	r24, 0x03	; 3
    1064:	91 05       	cpc	r25, r1
    1066:	b9 f1       	breq	.+110    	; 0x10d6 <MDIO_u8GetPinValue+0xd2>
    1068:	47 c0       	rjmp	.+142    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
			{
				case DIO_u8_PORTA:  local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,copy_u8PinID); break;
    106a:	e9 e3       	ldi	r30, 0x39	; 57
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	88 2f       	mov	r24, r24
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a9 01       	movw	r20, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <MDIO_u8GetPinValue+0x7e>
    107e:	55 95       	asr	r21
    1080:	47 95       	ror	r20
    1082:	8a 95       	dec	r24
    1084:	e2 f7       	brpl	.-8      	; 0x107e <MDIO_u8GetPinValue+0x7a>
    1086:	ca 01       	movw	r24, r20
    1088:	81 70       	andi	r24, 0x01	; 1
    108a:	89 83       	std	Y+1, r24	; 0x01
    108c:	35 c0       	rjmp	.+106    	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
				case DIO_u8_PORTB:  local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,copy_u8PinID); break;
    108e:	e6 e3       	ldi	r30, 0x36	; 54
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	88 2f       	mov	r24, r24
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a9 01       	movw	r20, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <MDIO_u8GetPinValue+0xa2>
    10a2:	55 95       	asr	r21
    10a4:	47 95       	ror	r20
    10a6:	8a 95       	dec	r24
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <MDIO_u8GetPinValue+0x9e>
    10aa:	ca 01       	movw	r24, r20
    10ac:	81 70       	andi	r24, 0x01	; 1
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	23 c0       	rjmp	.+70     	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
				case DIO_u8_PORTC:  local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,copy_u8PinID); break;
    10b2:	e3 e3       	ldi	r30, 0x33	; 51
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a9 01       	movw	r20, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <MDIO_u8GetPinValue+0xc6>
    10c6:	55 95       	asr	r21
    10c8:	47 95       	ror	r20
    10ca:	8a 95       	dec	r24
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <MDIO_u8GetPinValue+0xc2>
    10ce:	ca 01       	movw	r24, r20
    10d0:	81 70       	andi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	11 c0       	rjmp	.+34     	; 0x10f8 <MDIO_u8GetPinValue+0xf4>
				case DIO_u8_PORTD:  local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,copy_u8PinID); break;
    10d6:	e0 e3       	ldi	r30, 0x30	; 48
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	88 2f       	mov	r24, r24
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a9 01       	movw	r20, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <MDIO_u8GetPinValue+0xea>
    10ea:	55 95       	asr	r21
    10ec:	47 95       	ror	r20
    10ee:	8a 95       	dec	r24
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <MDIO_u8GetPinValue+0xe6>
    10f2:	ca 01       	movw	r24, r20
    10f4:	81 70       	andi	r24, 0x01	; 1
    10f6:	89 83       	std	Y+1, r24	; 0x01
			}

		}
		return local_u8PinValue;
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	cf 91       	pop	r28
    1106:	df 91       	pop	r29
    1108:	08 95       	ret

0000110a <MDIO_voidSetPortDirection>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PoryDirection: Set the Direction in hex format 					  */
/******************************************************************************/
void MDIO_voidSetPortDirection (u8 copy_u8PortID, u8 copy_u8PortDirection)
{
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	00 d0       	rcall	.+0      	; 0x1110 <MDIO_voidSetPortDirection+0x6>
    1110:	00 d0       	rcall	.+0      	; 0x1112 <MDIO_voidSetPortDirection+0x8>
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	6a 83       	std	Y+2, r22	; 0x02
	/*Inputs Validation*/
		if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA))
    111a:	89 81       	ldd	r24, Y+1	; 0x01
    111c:	84 30       	cpi	r24, 0x04	; 4
    111e:	90 f5       	brcc	.+100    	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
		{

		}
		else
		{
			switch (copy_u8PortID)
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	3c 83       	std	Y+4, r19	; 0x04
    1128:	2b 83       	std	Y+3, r18	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	91 05       	cpc	r25, r1
    1132:	d1 f0       	breq	.+52     	; 0x1168 <MDIO_voidSetPortDirection+0x5e>
    1134:	2b 81       	ldd	r18, Y+3	; 0x03
    1136:	3c 81       	ldd	r19, Y+4	; 0x04
    1138:	22 30       	cpi	r18, 0x02	; 2
    113a:	31 05       	cpc	r19, r1
    113c:	2c f4       	brge	.+10     	; 0x1148 <MDIO_voidSetPortDirection+0x3e>
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	61 f0       	breq	.+24     	; 0x115e <MDIO_voidSetPortDirection+0x54>
    1146:	1e c0       	rjmp	.+60     	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
    1148:	2b 81       	ldd	r18, Y+3	; 0x03
    114a:	3c 81       	ldd	r19, Y+4	; 0x04
    114c:	22 30       	cpi	r18, 0x02	; 2
    114e:	31 05       	cpc	r19, r1
    1150:	81 f0       	breq	.+32     	; 0x1172 <MDIO_voidSetPortDirection+0x68>
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	83 30       	cpi	r24, 0x03	; 3
    1158:	91 05       	cpc	r25, r1
    115a:	81 f0       	breq	.+32     	; 0x117c <MDIO_voidSetPortDirection+0x72>
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
			{
				case DIO_u8_PORTA: DIO_u8_DDRA_REG = copy_u8PortDirection ; break;
    115e:	ea e3       	ldi	r30, 0x3A	; 58
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	80 83       	st	Z, r24
    1166:	0e c0       	rjmp	.+28     	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
				case DIO_u8_PORTB: DIO_u8_DDRB_REG = copy_u8PortDirection  ; break;
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	80 83       	st	Z, r24
    1170:	09 c0       	rjmp	.+18     	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
				case DIO_u8_PORTC: DIO_u8_DDRC_REG = copy_u8PortDirection  ; break;
    1172:	e4 e3       	ldi	r30, 0x34	; 52
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	80 83       	st	Z, r24
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <MDIO_voidSetPortDirection+0x7a>
				case DIO_u8_PORTD: DIO_u8_DDRD_REG = copy_u8PortDirection  ; break;
    117c:	e1 e3       	ldi	r30, 0x31	; 49
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	80 83       	st	Z, r24
			}

		}
}
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	0f 90       	pop	r0
    118a:	0f 90       	pop	r0
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <MDIO_voidSetPortValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PortValue: Set the Direction in hex format 					  	  */
/******************************************************************************/
void MDIO_voidSetPortValue (u8 copy_u8PortID, u8 copy_u8PortValue)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <MDIO_voidSetPortValue+0x6>
    1198:	00 d0       	rcall	.+0      	; 0x119a <MDIO_voidSetPortValue+0x8>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01
    11a0:	6a 83       	std	Y+2, r22	; 0x02
	/*Inputs Validation*/
		if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA))
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	90 f5       	brcc	.+100    	; 0x120c <MDIO_voidSetPortValue+0x7a>
		{

		}
		else
		{
			switch (copy_u8PortID)
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	3c 83       	std	Y+4, r19	; 0x04
    11b0:	2b 83       	std	Y+3, r18	; 0x03
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	91 05       	cpc	r25, r1
    11ba:	d1 f0       	breq	.+52     	; 0x11f0 <MDIO_voidSetPortValue+0x5e>
    11bc:	2b 81       	ldd	r18, Y+3	; 0x03
    11be:	3c 81       	ldd	r19, Y+4	; 0x04
    11c0:	22 30       	cpi	r18, 0x02	; 2
    11c2:	31 05       	cpc	r19, r1
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <MDIO_voidSetPortValue+0x3e>
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	61 f0       	breq	.+24     	; 0x11e6 <MDIO_voidSetPortValue+0x54>
    11ce:	1e c0       	rjmp	.+60     	; 0x120c <MDIO_voidSetPortValue+0x7a>
    11d0:	2b 81       	ldd	r18, Y+3	; 0x03
    11d2:	3c 81       	ldd	r19, Y+4	; 0x04
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	81 f0       	breq	.+32     	; 0x11fa <MDIO_voidSetPortValue+0x68>
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	83 30       	cpi	r24, 0x03	; 3
    11e0:	91 05       	cpc	r25, r1
    11e2:	81 f0       	breq	.+32     	; 0x1204 <MDIO_voidSetPortValue+0x72>
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <MDIO_voidSetPortValue+0x7a>
			{
				case DIO_u8_PORTA: DIO_u8_PORTA_REG = copy_u8PortValue ; break;
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 83       	st	Z, r24
    11ee:	0e c0       	rjmp	.+28     	; 0x120c <MDIO_voidSetPortValue+0x7a>
				case DIO_u8_PORTB: DIO_u8_PORTB_REG = copy_u8PortValue  ; break;
    11f0:	e8 e3       	ldi	r30, 0x38	; 56
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <MDIO_voidSetPortValue+0x7a>
				case DIO_u8_PORTC: DIO_u8_PORTC_REG = copy_u8PortValue  ; break;
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	80 83       	st	Z, r24
    1202:	04 c0       	rjmp	.+8      	; 0x120c <MDIO_voidSetPortValue+0x7a>
				case DIO_u8_PORTD: DIO_u8_PORTD_REG = copy_u8PortValue  ; break;
    1204:	e2 e3       	ldi	r30, 0x32	; 50
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
			}

		}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <HKEYPAD_u8_GetPressedKey>:

u8 KEYPAD_Au8RowsPins [KEYPAD_u8_ROW_NUM] = KEYPAD_Au8ROWS;
u8 KEYPAD_Au8ColsPins [KEYPAD_u8_COL_NUM] = KEYPAD_Au8COLS;

u8 HKEYPAD_u8_GetPressedKey (void)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	63 97       	sbiw	r28, 0x13	; 19
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
	/* Variables Definitions for Loop Counters, Read pin Values, Get pressed key Value, and a flag for breaking the loop */
	u8 local_u8RowCounter, local_u8ColCounter, local_u8PinValue, local_u8KeyValue = KEYPAD_u8_KEY_NOT_PRESSED,
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	88 8b       	std	Y+16, r24	; 0x10
			local_u8Flag = KEYPAD_u8_FLAG_DOWN;
    1232:	1f 86       	std	Y+15, r1	; 0x0f

	/* for loop to activate Rows and check on columns */
	for (local_u8RowCounter = 0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++)
    1234:	1b 8a       	std	Y+19, r1	; 0x13
    1236:	da c0       	rjmp	.+436    	; 0x13ec <HKEYPAD_u8_GetPressedKey+0x1d2>
	{
		MDIO_voidSetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter], DIO_u8_LOW); //Activate Row by setting 0 at output
    1238:	8b 89       	ldd	r24, Y+19	; 0x13
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	fc 01       	movw	r30, r24
    1240:	eb 57       	subi	r30, 0x7B	; 123
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	90 81       	ld	r25, Z
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	69 2f       	mov	r22, r25
    124a:	40 e0       	ldi	r20, 0x00	; 0
    124c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>

		/*For Loop to check on Columns*/
		for (local_u8ColCounter=0; local_u8ColCounter < KEYPAD_u8_COL_NUM; local_u8ColCounter++)
    1250:	1a 8a       	std	Y+18, r1	; 0x12
    1252:	b6 c0       	rjmp	.+364    	; 0x13c0 <HKEYPAD_u8_GetPressedKey+0x1a6>
		{
			local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
    1254:	8a 89       	ldd	r24, Y+18	; 0x12
    1256:	88 2f       	mov	r24, r24
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	fc 01       	movw	r30, r24
    125c:	e7 57       	subi	r30, 0x77	; 119
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	90 81       	ld	r25, Z
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	69 2f       	mov	r22, r25
    1266:	0e 94 02 08 	call	0x1004	; 0x1004 <MDIO_u8GetPinValue>
    126a:	89 8b       	std	Y+17, r24	; 0x11

			if (local_u8PinValue == DIO_u8_LOW) //Check on column Value (if true, switch is pressed)
    126c:	89 89       	ldd	r24, Y+17	; 0x11
    126e:	88 23       	and	r24, r24
    1270:	09 f0       	breq	.+2      	; 0x1274 <HKEYPAD_u8_GetPressedKey+0x5a>
    1272:	a3 c0       	rjmp	.+326    	; 0x13ba <HKEYPAD_u8_GetPressedKey+0x1a0>
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a0 ea       	ldi	r26, 0xA0	; 160
    127a:	b1 e4       	ldi	r27, 0x41	; 65
    127c:	8b 87       	std	Y+11, r24	; 0x0b
    127e:	9c 87       	std	Y+12, r25	; 0x0c
    1280:	ad 87       	std	Y+13, r26	; 0x0d
    1282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	6b 85       	ldd	r22, Y+11	; 0x0b
    1286:	7c 85       	ldd	r23, Y+12	; 0x0c
    1288:	8d 85       	ldd	r24, Y+13	; 0x0d
    128a:	9e 85       	ldd	r25, Y+14	; 0x0e
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a ef       	ldi	r20, 0xFA	; 250
    1292:	54 e4       	ldi	r21, 0x44	; 68
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8f 83       	std	Y+7, r24	; 0x07
    129e:	98 87       	std	Y+8, r25	; 0x08
    12a0:	a9 87       	std	Y+9, r26	; 0x09
    12a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a4:	6f 81       	ldd	r22, Y+7	; 0x07
    12a6:	78 85       	ldd	r23, Y+8	; 0x08
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b8:	88 23       	and	r24, r24
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <HKEYPAD_u8_GetPressedKey+0xac>
		__ticks = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <HKEYPAD_u8_GetPressedKey+0x12a>
	else if (__tmp > 65535)
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	4c f5       	brge	.+82     	; 0x1330 <HKEYPAD_u8_GetPressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <HKEYPAD_u8_GetPressedKey+0x10c>
    1308:	88 ec       	ldi	r24, 0xC8	; 200
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 83       	std	Y+4, r25	; 0x04
    130e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <HKEYPAD_u8_GetPressedKey+0xfa>
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f7       	brne	.-38     	; 0x1308 <HKEYPAD_u8_GetPressedKey+0xee>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <HKEYPAD_u8_GetPressedKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1330:	6f 81       	ldd	r22, Y+7	; 0x07
    1332:	78 85       	ldd	r23, Y+8	; 0x08
    1334:	89 85       	ldd	r24, Y+9	; 0x09
    1336:	9a 85       	ldd	r25, Y+10	; 0x0a
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <HKEYPAD_u8_GetPressedKey+0x136>
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms (KEYPAD_u8_DEBOUNCING_MS);
				local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
    1358:	8a 89       	ldd	r24, Y+18	; 0x12
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	fc 01       	movw	r30, r24
    1360:	e7 57       	subi	r30, 0x77	; 119
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	90 81       	ld	r25, Z
    1366:	82 e0       	ldi	r24, 0x02	; 2
    1368:	69 2f       	mov	r22, r25
    136a:	0e 94 02 08 	call	0x1004	; 0x1004 <MDIO_u8GetPinValue>
    136e:	89 8b       	std	Y+17, r24	; 0x11
    1370:	0c c0       	rjmp	.+24     	; 0x138a <HKEYPAD_u8_GetPressedKey+0x170>
				while (local_u8PinValue == DIO_u8_LOW)
				{
					local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
    1372:	8a 89       	ldd	r24, Y+18	; 0x12
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	fc 01       	movw	r30, r24
    137a:	e7 57       	subi	r30, 0x77	; 119
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	90 81       	ld	r25, Z
    1380:	82 e0       	ldi	r24, 0x02	; 2
    1382:	69 2f       	mov	r22, r25
    1384:	0e 94 02 08 	call	0x1004	; 0x1004 <MDIO_u8GetPinValue>
    1388:	89 8b       	std	Y+17, r24	; 0x11

			if (local_u8PinValue == DIO_u8_LOW) //Check on column Value (if true, switch is pressed)
			{
				_delay_ms (KEYPAD_u8_DEBOUNCING_MS);
				local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
				while (local_u8PinValue == DIO_u8_LOW)
    138a:	89 89       	ldd	r24, Y+17	; 0x11
    138c:	88 23       	and	r24, r24
    138e:	89 f3       	breq	.-30     	; 0x1372 <HKEYPAD_u8_GetPressedKey+0x158>
				{
					local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
				}
				local_u8KeyValue = KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter]; //Get Value for pressed Key
    1390:	8b 89       	ldd	r24, Y+19	; 0x13
    1392:	48 2f       	mov	r20, r24
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	8a 89       	ldd	r24, Y+18	; 0x12
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	ca 01       	movw	r24, r20
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	82 0f       	add	r24, r18
    13a8:	93 1f       	adc	r25, r19
    13aa:	fc 01       	movw	r30, r24
    13ac:	eb 58       	subi	r30, 0x8B	; 139
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	80 81       	ld	r24, Z
    13b2:	88 8b       	std	Y+16, r24	; 0x10
				local_u8Flag =KEYPAD_u8_FLAG_UP; // Raise Flag up
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	8f 87       	std	Y+15, r24	; 0x0f
    13b8:	07 c0       	rjmp	.+14     	; 0x13c8 <HKEYPAD_u8_GetPressedKey+0x1ae>
	for (local_u8RowCounter = 0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++)
	{
		MDIO_voidSetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter], DIO_u8_LOW); //Activate Row by setting 0 at output

		/*For Loop to check on Columns*/
		for (local_u8ColCounter=0; local_u8ColCounter < KEYPAD_u8_COL_NUM; local_u8ColCounter++)
    13ba:	8a 89       	ldd	r24, Y+18	; 0x12
    13bc:	8f 5f       	subi	r24, 0xFF	; 255
    13be:	8a 8b       	std	Y+18, r24	; 0x12
    13c0:	8a 89       	ldd	r24, Y+18	; 0x12
    13c2:	84 30       	cpi	r24, 0x04	; 4
    13c4:	08 f4       	brcc	.+2      	; 0x13c8 <HKEYPAD_u8_GetPressedKey+0x1ae>
    13c6:	46 cf       	rjmp	.-372    	; 0x1254 <HKEYPAD_u8_GetPressedKey+0x3a>
				local_u8Flag =KEYPAD_u8_FLAG_UP; // Raise Flag up
				break;  //break from Column Loop After found pressed Key
			}
		}//end of Column Loop

		MDIO_voidSetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter], DIO_u8_HIGH); //Deactivate Row by setting 0 at output
    13c8:	8b 89       	ldd	r24, Y+19	; 0x13
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	fc 01       	movw	r30, r24
    13d0:	eb 57       	subi	r30, 0x7B	; 123
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	90 81       	ld	r25, Z
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	69 2f       	mov	r22, r25
    13da:	41 e0       	ldi	r20, 0x01	; 1
    13dc:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
		if (local_u8Flag == KEYPAD_u8_FLAG_UP) //check on flag to break and return pressed key value
    13e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	39 f0       	breq	.+14     	; 0x13f4 <HKEYPAD_u8_GetPressedKey+0x1da>
	/* Variables Definitions for Loop Counters, Read pin Values, Get pressed key Value, and a flag for breaking the loop */
	u8 local_u8RowCounter, local_u8ColCounter, local_u8PinValue, local_u8KeyValue = KEYPAD_u8_KEY_NOT_PRESSED,
			local_u8Flag = KEYPAD_u8_FLAG_DOWN;

	/* for loop to activate Rows and check on columns */
	for (local_u8RowCounter = 0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++)
    13e6:	8b 89       	ldd	r24, Y+19	; 0x13
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	8b 8b       	std	Y+19, r24	; 0x13
    13ec:	8b 89       	ldd	r24, Y+19	; 0x13
    13ee:	84 30       	cpi	r24, 0x04	; 4
    13f0:	08 f4       	brcc	.+2      	; 0x13f4 <HKEYPAD_u8_GetPressedKey+0x1da>
    13f2:	22 cf       	rjmp	.-444    	; 0x1238 <HKEYPAD_u8_GetPressedKey+0x1e>
		{
			break; //break from Row Loop After found pressed Key
		}
	}//end of Row for Loop

return local_u8KeyValue; //return for pressed key value
    13f4:	88 89       	ldd	r24, Y+16	; 0x10
}
    13f6:	63 96       	adiw	r28, 0x13	; 19
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <KEYPAD_u32_Calculator>:

void KEYPAD_u32_Calculator()
{// Open Brackets of KEYPAD_u32_Calculator() Function
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	61 97       	sbiw	r28, 0x11	; 17
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	de bf       	out	0x3e, r29	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	cd bf       	out	0x3d, r28	; 61
/* LOCAL_u32_val2: 		To store decimal value of characters  befor operation  */
/* LOCAL_u32_Result: 	To store The Result Value Of Entered Equation		   */
/* local_u8KeypadValue: To store The The that returned from KEYPAD			   */
/* LOCAL_u8_Operation: 	To store The Operation Value						   */
/*******************************************************************************/
s32 LOCAL_u32_val1=0,LOCAL_u32_val2=0, LOCAL_u32_Result;
    141c:	1c 86       	std	Y+12, r1	; 0x0c
    141e:	1d 86       	std	Y+13, r1	; 0x0d
    1420:	1e 86       	std	Y+14, r1	; 0x0e
    1422:	1f 86       	std	Y+15, r1	; 0x0f
    1424:	18 86       	std	Y+8, r1	; 0x08
    1426:	19 86       	std	Y+9, r1	; 0x09
    1428:	1a 86       	std	Y+10, r1	; 0x0a
    142a:	1b 86       	std	Y+11, r1	; 0x0b
u8 LOCAL_u8_Operation,local_u8KeypadValue=255,LOCAL_u32_f=KEYPAD_u8_FLAG_DOWN;
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	19 82       	std	Y+1, r1	; 0x01
	MDIO_voidInit();
    1432:	0e 94 a3 05 	call	0xb46	; 0xb46 <MDIO_voidInit>
	HLCD_voidInit();
    1436:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <HLCD_voidInit>

	while (1)																												/*LOOP To make infitiy INPut	*/
	{// Open Brackets of While LOOP

		local_u8KeypadValue = HKEYPAD_u8_GetPressedKey();																	/* Get KEYPD Value */
    143a:	0e 94 0d 09 	call	0x121a	; 0x121a <HKEYPAD_u8_GetPressedKey>
    143e:	8a 83       	std	Y+2, r24	; 0x02
		if (local_u8KeypadValue != KEYPAD_u8_KEY_NOT_PRESSED)																/* Check if KEYPAD Is UnPressed	*/
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	8f 3f       	cpi	r24, 0xFF	; 255
    1444:	d1 f3       	breq	.-12     	; 0x143a <KEYPAD_u32_Calculator+0x32>
		{// Open Brackets of UnPressed Condition

			if(local_u8KeypadValue=='c')																					/* Check if Clear Butom Is Pressed	*/
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	83 36       	cpi	r24, 0x63	; 99
    144a:	81 f4       	brne	.+32     	; 0x146c <KEYPAD_u32_Calculator+0x64>
			{// Open Brackets of Clear Condition
				HLCD_voidClearDisplay();																					/* Calling Clear Screen Function	*/
    144c:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <HLCD_voidClearDisplay>
				LOCAL_u32_val2=LOCAL_u32_val1=0;																			/* return Two Values To zero*/
    1450:	1c 86       	std	Y+12, r1	; 0x0c
    1452:	1d 86       	std	Y+13, r1	; 0x0d
    1454:	1e 86       	std	Y+14, r1	; 0x0e
    1456:	1f 86       	std	Y+15, r1	; 0x0f
    1458:	8c 85       	ldd	r24, Y+12	; 0x0c
    145a:	9d 85       	ldd	r25, Y+13	; 0x0d
    145c:	ae 85       	ldd	r26, Y+14	; 0x0e
    145e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1460:	88 87       	std	Y+8, r24	; 0x08
    1462:	99 87       	std	Y+9, r25	; 0x09
    1464:	aa 87       	std	Y+10, r26	; 0x0a
    1466:	bb 87       	std	Y+11, r27	; 0x0b
				LOCAL_u32_f=KEYPAD_u8_FLAG_DOWN;
    1468:	19 82       	std	Y+1, r1	; 0x01
    146a:	e7 cf       	rjmp	.-50     	; 0x143a <KEYPAD_u32_Calculator+0x32>

			}//Close Brackets of Clear Condition

			else if(local_u8KeypadValue!='=')																				/* Check if KEy Equal Number Or operation */
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	8d 33       	cpi	r24, 0x3D	; 61
    1470:	09 f4       	brne	.+2      	; 0x1474 <KEYPAD_u32_Calculator+0x6c>
    1472:	68 c0       	rjmp	.+208    	; 0x1544 <KEYPAD_u32_Calculator+0x13c>
			{// Open Brackets of Numbers&operation Condition
				HLCD_voidSendData(local_u8KeypadValue);																		/* Display Key Value On SCreen			  */
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <HLCD_voidSendData>
				if(local_u8KeypadValue=='+'||local_u8KeypadValue=='-'||local_u8KeypadValue=='*'||local_u8KeypadValue=='/')	/* Check if KEy is operation */
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	8b 32       	cpi	r24, 0x2B	; 43
    147e:	49 f0       	breq	.+18     	; 0x1492 <KEYPAD_u32_Calculator+0x8a>
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	8d 32       	cpi	r24, 0x2D	; 45
    1484:	31 f0       	breq	.+12     	; 0x1492 <KEYPAD_u32_Calculator+0x8a>
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	8a 32       	cpi	r24, 0x2A	; 42
    148a:	19 f0       	breq	.+6      	; 0x1492 <KEYPAD_u32_Calculator+0x8a>
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	8f 32       	cpi	r24, 0x2F	; 47
    1490:	31 f5       	brne	.+76     	; 0x14de <KEYPAD_u32_Calculator+0xd6>
				{// Open Brackets of operation Condition
					if(local_u8KeypadValue=='-'&&(LOCAL_u32_val2>0||LOCAL_u32_val1==0))										/* Check if Value Is Negative			   */
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	8d 32       	cpi	r24, 0x2D	; 45
    1496:	a1 f4       	brne	.+40     	; 0x14c0 <KEYPAD_u32_Calculator+0xb8>
    1498:	88 85       	ldd	r24, Y+8	; 0x08
    149a:	99 85       	ldd	r25, Y+9	; 0x09
    149c:	aa 85       	ldd	r26, Y+10	; 0x0a
    149e:	bb 85       	ldd	r27, Y+11	; 0x0b
    14a0:	18 16       	cp	r1, r24
    14a2:	19 06       	cpc	r1, r25
    14a4:	1a 06       	cpc	r1, r26
    14a6:	1b 06       	cpc	r1, r27
    14a8:	44 f0       	brlt	.+16     	; 0x14ba <KEYPAD_u32_Calculator+0xb2>
    14aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    14ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ae:	ae 85       	ldd	r26, Y+14	; 0x0e
    14b0:	bf 85       	ldd	r27, Y+15	; 0x0f
    14b2:	00 97       	sbiw	r24, 0x00	; 0
    14b4:	a1 05       	cpc	r26, r1
    14b6:	b1 05       	cpc	r27, r1
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <KEYPAD_u32_Calculator+0xb8>
					{// Open Brackets of Negative Condition
						LOCAL_u32_f=KEYPAD_u8_FLAG_UP;																		/* Enable Flag								*/
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	bd cf       	rjmp	.-134    	; 0x143a <KEYPAD_u32_Calculator+0x32>
						continue;																							/* Jump negative signal value				*/
					}// Close Brackets of Negative Condition
					else
					{
						LOCAL_u8_Operation=local_u8KeypadValue;																/* Stor KeyValue In OPeration Value			*/
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	8b 83       	std	Y+3, r24	; 0x03
						LOCAL_u32_val2=LOCAL_u32_val1;																		/* Stor Value1 in Value 2					*/
    14c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    14c8:	ae 85       	ldd	r26, Y+14	; 0x0e
    14ca:	bf 85       	ldd	r27, Y+15	; 0x0f
    14cc:	88 87       	std	Y+8, r24	; 0x08
    14ce:	99 87       	std	Y+9, r25	; 0x09
    14d0:	aa 87       	std	Y+10, r26	; 0x0a
    14d2:	bb 87       	std	Y+11, r27	; 0x0b
						LOCAL_u32_val1=0;																					/* return value 1 to 0 To calculate value after operation */
    14d4:	1c 86       	std	Y+12, r1	; 0x0c
    14d6:	1d 86       	std	Y+13, r1	; 0x0d
    14d8:	1e 86       	std	Y+14, r1	; 0x0e
    14da:	1f 86       	std	Y+15, r1	; 0x0f
    14dc:	ae cf       	rjmp	.-164    	; 0x143a <KEYPAD_u32_Calculator+0x32>
						continue;																							/* Jump OperationValue						*/
					}
				}//Close Brackets of operation Condition

				LOCAL_u32_val1=LOCAL_u32_val1*10+(local_u8KeypadValue-'0');													/*Cnovert KEY Value FRom Character to decimal */
    14de:	8c 85       	ldd	r24, Y+12	; 0x0c
    14e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    14e2:	ae 85       	ldd	r26, Y+14	; 0x0e
    14e4:	bf 85       	ldd	r27, Y+15	; 0x0f
    14e6:	2a e0       	ldi	r18, 0x0A	; 10
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	40 e0       	ldi	r20, 0x00	; 0
    14ec:	50 e0       	ldi	r21, 0x00	; 0
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 26 11 	call	0x224c	; 0x224c <__mulsi3>
    14f6:	9b 01       	movw	r18, r22
    14f8:	ac 01       	movw	r20, r24
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	88 2f       	mov	r24, r24
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	c0 97       	sbiw	r24, 0x30	; 48
    1502:	aa 27       	eor	r26, r26
    1504:	97 fd       	sbrc	r25, 7
    1506:	a0 95       	com	r26
    1508:	ba 2f       	mov	r27, r26
    150a:	82 0f       	add	r24, r18
    150c:	93 1f       	adc	r25, r19
    150e:	a4 1f       	adc	r26, r20
    1510:	b5 1f       	adc	r27, r21
    1512:	8c 87       	std	Y+12, r24	; 0x0c
    1514:	9d 87       	std	Y+13, r25	; 0x0d
    1516:	ae 87       	std	Y+14, r26	; 0x0e
    1518:	bf 87       	std	Y+15, r27	; 0x0f

				if(LOCAL_u32_f)																								/*Cheack if Flag is enable*/
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	88 23       	and	r24, r24
    151e:	09 f4       	brne	.+2      	; 0x1522 <KEYPAD_u32_Calculator+0x11a>
    1520:	8c cf       	rjmp	.-232    	; 0x143a <KEYPAD_u32_Calculator+0x32>
				{// Open Brackets of Enable flag Condition
					LOCAL_u32_val1*=-1;																						/* Muktiplay value by -1	*/
    1522:	8c 85       	ldd	r24, Y+12	; 0x0c
    1524:	9d 85       	ldd	r25, Y+13	; 0x0d
    1526:	ae 85       	ldd	r26, Y+14	; 0x0e
    1528:	bf 85       	ldd	r27, Y+15	; 0x0f
    152a:	b0 95       	com	r27
    152c:	a0 95       	com	r26
    152e:	90 95       	com	r25
    1530:	81 95       	neg	r24
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	af 4f       	sbci	r26, 0xFF	; 255
    1536:	bf 4f       	sbci	r27, 0xFF	; 255
    1538:	8c 87       	std	Y+12, r24	; 0x0c
    153a:	9d 87       	std	Y+13, r25	; 0x0d
    153c:	ae 87       	std	Y+14, r26	; 0x0e
    153e:	bf 87       	std	Y+15, r27	; 0x0f
					LOCAL_u32_f=KEYPAD_u8_FLAG_DOWN;																		/* disEnable Flag			*/
    1540:	19 82       	std	Y+1, r1	; 0x01
    1542:	7b cf       	rjmp	.-266    	; 0x143a <KEYPAD_u32_Calculator+0x32>
			}//Close Brackets of Numbers&operation Condition


		else																												/*	if KEY VAlue Equal =	*/
		{// Open Brackets of else
			HLCD_voidSendData(local_u8KeypadValue);																			/* Display Key Value On Screen	*/
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <HLCD_voidSendData>

			switch(LOCAL_u8_Operation)																						/* Check Operation Value		*/
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	39 8b       	std	Y+17, r19	; 0x11
    1552:	28 8b       	std	Y+16, r18	; 0x10
    1554:	88 89       	ldd	r24, Y+16	; 0x10
    1556:	99 89       	ldd	r25, Y+17	; 0x11
    1558:	8b 32       	cpi	r24, 0x2B	; 43
    155a:	91 05       	cpc	r25, r1
    155c:	b1 f0       	breq	.+44     	; 0x158a <KEYPAD_u32_Calculator+0x182>
    155e:	28 89       	ldd	r18, Y+16	; 0x10
    1560:	39 89       	ldd	r19, Y+17	; 0x11
    1562:	2c 32       	cpi	r18, 0x2C	; 44
    1564:	31 05       	cpc	r19, r1
    1566:	34 f4       	brge	.+12     	; 0x1574 <KEYPAD_u32_Calculator+0x16c>
    1568:	88 89       	ldd	r24, Y+16	; 0x10
    156a:	99 89       	ldd	r25, Y+17	; 0x11
    156c:	8a 32       	cpi	r24, 0x2A	; 42
    156e:	91 05       	cpc	r25, r1
    1570:	71 f1       	breq	.+92     	; 0x15ce <KEYPAD_u32_Calculator+0x1c6>
    1572:	5d c0       	rjmp	.+186    	; 0x162e <KEYPAD_u32_Calculator+0x226>
    1574:	28 89       	ldd	r18, Y+16	; 0x10
    1576:	39 89       	ldd	r19, Y+17	; 0x11
    1578:	2d 32       	cpi	r18, 0x2D	; 45
    157a:	31 05       	cpc	r19, r1
    157c:	b9 f0       	breq	.+46     	; 0x15ac <KEYPAD_u32_Calculator+0x1a4>
    157e:	88 89       	ldd	r24, Y+16	; 0x10
    1580:	99 89       	ldd	r25, Y+17	; 0x11
    1582:	8f 32       	cpi	r24, 0x2F	; 47
    1584:	91 05       	cpc	r25, r1
    1586:	b1 f1       	breq	.+108    	; 0x15f4 <KEYPAD_u32_Calculator+0x1ec>
    1588:	52 c0       	rjmp	.+164    	; 0x162e <KEYPAD_u32_Calculator+0x226>
			{// Opemn Brackets of Switch
				case '+':
						LOCAL_u32_Result=LOCAL_u32_val2+LOCAL_u32_val1;														/*Result Equal Summation of tow values	*/
    158a:	88 85       	ldd	r24, Y+8	; 0x08
    158c:	99 85       	ldd	r25, Y+9	; 0x09
    158e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1590:	bb 85       	ldd	r27, Y+11	; 0x0b
    1592:	2c 85       	ldd	r18, Y+12	; 0x0c
    1594:	3d 85       	ldd	r19, Y+13	; 0x0d
    1596:	4e 85       	ldd	r20, Y+14	; 0x0e
    1598:	5f 85       	ldd	r21, Y+15	; 0x0f
    159a:	82 0f       	add	r24, r18
    159c:	93 1f       	adc	r25, r19
    159e:	a4 1f       	adc	r26, r20
    15a0:	b5 1f       	adc	r27, r21
    15a2:	8c 83       	std	Y+4, r24	; 0x04
    15a4:	9d 83       	std	Y+5, r25	; 0x05
    15a6:	ae 83       	std	Y+6, r26	; 0x06
    15a8:	bf 83       	std	Y+7, r27	; 0x07
    15aa:	41 c0       	rjmp	.+130    	; 0x162e <KEYPAD_u32_Calculator+0x226>
						break;
				case '-':

						LOCAL_u32_Result=LOCAL_u32_val2-LOCAL_u32_val1;												        /*Result Equal Subtraction of tow values	*/
    15ac:	88 85       	ldd	r24, Y+8	; 0x08
    15ae:	99 85       	ldd	r25, Y+9	; 0x09
    15b0:	aa 85       	ldd	r26, Y+10	; 0x0a
    15b2:	bb 85       	ldd	r27, Y+11	; 0x0b
    15b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b6:	3d 85       	ldd	r19, Y+13	; 0x0d
    15b8:	4e 85       	ldd	r20, Y+14	; 0x0e
    15ba:	5f 85       	ldd	r21, Y+15	; 0x0f
    15bc:	82 1b       	sub	r24, r18
    15be:	93 0b       	sbc	r25, r19
    15c0:	a4 0b       	sbc	r26, r20
    15c2:	b5 0b       	sbc	r27, r21
    15c4:	8c 83       	std	Y+4, r24	; 0x04
    15c6:	9d 83       	std	Y+5, r25	; 0x05
    15c8:	ae 83       	std	Y+6, r26	; 0x06
    15ca:	bf 83       	std	Y+7, r27	; 0x07
    15cc:	30 c0       	rjmp	.+96     	; 0x162e <KEYPAD_u32_Calculator+0x226>
						break;
				case '*':
						LOCAL_u32_Result=LOCAL_u32_val2*LOCAL_u32_val1;												        /*Result Equal Multiplication of tow values	*/
    15ce:	88 85       	ldd	r24, Y+8	; 0x08
    15d0:	99 85       	ldd	r25, Y+9	; 0x09
    15d2:	aa 85       	ldd	r26, Y+10	; 0x0a
    15d4:	bb 85       	ldd	r27, Y+11	; 0x0b
    15d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    15d8:	3d 85       	ldd	r19, Y+13	; 0x0d
    15da:	4e 85       	ldd	r20, Y+14	; 0x0e
    15dc:	5f 85       	ldd	r21, Y+15	; 0x0f
    15de:	bc 01       	movw	r22, r24
    15e0:	cd 01       	movw	r24, r26
    15e2:	0e 94 26 11 	call	0x224c	; 0x224c <__mulsi3>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	8c 83       	std	Y+4, r24	; 0x04
    15ec:	9d 83       	std	Y+5, r25	; 0x05
    15ee:	ae 83       	std	Y+6, r26	; 0x06
    15f0:	bf 83       	std	Y+7, r27	; 0x07
    15f2:	1d c0       	rjmp	.+58     	; 0x162e <KEYPAD_u32_Calculator+0x226>
						break;
				case '/':

						if(LOCAL_u32_val1==0)																		        /* Check if Second Value Equal Zero*/
    15f4:	8c 85       	ldd	r24, Y+12	; 0x0c
    15f6:	9d 85       	ldd	r25, Y+13	; 0x0d
    15f8:	ae 85       	ldd	r26, Y+14	; 0x0e
    15fa:	bf 85       	ldd	r27, Y+15	; 0x0f
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	a1 05       	cpc	r26, r1
    1600:	b1 05       	cpc	r27, r1
    1602:	19 f4       	brne	.+6      	; 0x160a <KEYPAD_u32_Calculator+0x202>
						{
							LOCAL_u32_f=KEYPAD_u8_FLAG_UP;															        /*Enable Becous Can't Divion on Zero	*/
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	12 c0       	rjmp	.+36     	; 0x162e <KEYPAD_u32_Calculator+0x226>
						}

						else
						{
						LOCAL_u32_Result=LOCAL_u32_val2/LOCAL_u32_val1;												        /*Result Equal division of tow values	*/
    160a:	88 85       	ldd	r24, Y+8	; 0x08
    160c:	99 85       	ldd	r25, Y+9	; 0x09
    160e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1610:	bb 85       	ldd	r27, Y+11	; 0x0b
    1612:	2c 85       	ldd	r18, Y+12	; 0x0c
    1614:	3d 85       	ldd	r19, Y+13	; 0x0d
    1616:	4e 85       	ldd	r20, Y+14	; 0x0e
    1618:	5f 85       	ldd	r21, Y+15	; 0x0f
    161a:	bc 01       	movw	r22, r24
    161c:	cd 01       	movw	r24, r26
    161e:	0e 94 45 11 	call	0x228a	; 0x228a <__divmodsi4>
    1622:	da 01       	movw	r26, r20
    1624:	c9 01       	movw	r24, r18
    1626:	8c 83       	std	Y+4, r24	; 0x04
    1628:	9d 83       	std	Y+5, r25	; 0x05
    162a:	ae 83       	std	Y+6, r26	; 0x06
    162c:	bf 83       	std	Y+7, r27	; 0x07
						}
						break;
			}// Close Brackets of Switch
			if(LOCAL_u32_f)                                                                                                    /* Cheack if Flag is enable	*/
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	88 23       	and	r24, r24
    1632:	39 f0       	breq	.+14     	; 0x1642 <KEYPAD_u32_Calculator+0x23a>
				{
					HLCD_voidClearDisplay();                                                                                   /* Clear Screen				*/
    1634:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <HLCD_voidClearDisplay>
					HLCD_voidSendString("MATH ERORR !");                                                                       /* Display MAth Error		*/
    1638:	80 e6       	ldi	r24, 0x60	; 96
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <HLCD_voidSendString>
    1640:	08 c0       	rjmp	.+16     	; 0x1652 <KEYPAD_u32_Calculator+0x24a>


			else
				{

					HLCD_voidDisplayNumber(LOCAL_u32_Result);
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	ae 81       	ldd	r26, Y+6	; 0x06
    1648:	bf 81       	ldd	r27, Y+7	; 0x07
    164a:	bc 01       	movw	r22, r24
    164c:	cd 01       	movw	r24, r26
    164e:	0e 94 26 10 	call	0x204c	; 0x204c <HLCD_voidDisplayNumber>
				}
				LOCAL_u32_val2=LOCAL_u32_val1=0;																				/* return Two Values To zero*/
    1652:	1c 86       	std	Y+12, r1	; 0x0c
    1654:	1d 86       	std	Y+13, r1	; 0x0d
    1656:	1e 86       	std	Y+14, r1	; 0x0e
    1658:	1f 86       	std	Y+15, r1	; 0x0f
    165a:	8c 85       	ldd	r24, Y+12	; 0x0c
    165c:	9d 85       	ldd	r25, Y+13	; 0x0d
    165e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1660:	bf 85       	ldd	r27, Y+15	; 0x0f
    1662:	88 87       	std	Y+8, r24	; 0x08
    1664:	99 87       	std	Y+9, r25	; 0x09
    1666:	aa 87       	std	Y+10, r26	; 0x0a
    1668:	bb 87       	std	Y+11, r27	; 0x0b
				LOCAL_u32_f=KEYPAD_u8_FLAG_DOWN;																				/* disEnable Flag			*/
    166a:	19 82       	std	Y+1, r1	; 0x01
    166c:	e6 ce       	rjmp	.-564    	; 0x143a <KEYPAD_u32_Calculator+0x32>

0000166e <main>:
	}// Close Brackets of While LOOP

}// Close Brackets of KEYPAD_u32_Calculator() Function

void main (void)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	2e 97       	sbiw	r28, 0x0e	; 14
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a0 ea       	ldi	r26, 0xA0	; 160
    1688:	b1 e4       	ldi	r27, 0x41	; 65
    168a:	8b 87       	std	Y+11, r24	; 0x0b
    168c:	9c 87       	std	Y+12, r25	; 0x0c
    168e:	ad 87       	std	Y+13, r26	; 0x0d
    1690:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	4a ef       	ldi	r20, 0xFA	; 250
    16a0:	54 e4       	ldi	r21, 0x44	; 68
    16a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	8f 83       	std	Y+7, r24	; 0x07
    16ac:	98 87       	std	Y+8, r25	; 0x08
    16ae:	a9 87       	std	Y+9, r26	; 0x09
    16b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b2:	6f 81       	ldd	r22, Y+7	; 0x07
    16b4:	78 85       	ldd	r23, Y+8	; 0x08
    16b6:	89 85       	ldd	r24, Y+9	; 0x09
    16b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e8       	ldi	r20, 0x80	; 128
    16c0:	5f e3       	ldi	r21, 0x3F	; 63
    16c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16c6:	88 23       	and	r24, r24
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <main+0x66>
		__ticks = 1;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	3f c0       	rjmp	.+126    	; 0x1752 <main+0xe4>
	else if (__tmp > 65535)
    16d4:	6f 81       	ldd	r22, Y+7	; 0x07
    16d6:	78 85       	ldd	r23, Y+8	; 0x08
    16d8:	89 85       	ldd	r24, Y+9	; 0x09
    16da:	9a 85       	ldd	r25, Y+10	; 0x0a
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	3f ef       	ldi	r19, 0xFF	; 255
    16e0:	4f e7       	ldi	r20, 0x7F	; 127
    16e2:	57 e4       	ldi	r21, 0x47	; 71
    16e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16e8:	18 16       	cp	r1, r24
    16ea:	4c f5       	brge	.+82     	; 0x173e <main+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e2       	ldi	r20, 0x20	; 32
    16fa:	51 e4       	ldi	r21, 0x41	; 65
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	bc 01       	movw	r22, r24
    1706:	cd 01       	movw	r24, r26
    1708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	9e 83       	std	Y+6, r25	; 0x06
    1712:	8d 83       	std	Y+5, r24	; 0x05
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <main+0xc6>
    1716:	88 ec       	ldi	r24, 0xC8	; 200
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	f1 f7       	brne	.-4      	; 0x1722 <main+0xb4>
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	9e 83       	std	Y+6, r25	; 0x06
    1732:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	69 f7       	brne	.-38     	; 0x1716 <main+0xa8>
    173c:	14 c0       	rjmp	.+40     	; 0x1766 <main+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173e:	6f 81       	ldd	r22, Y+7	; 0x07
    1740:	78 85       	ldd	r23, Y+8	; 0x08
    1742:	89 85       	ldd	r24, Y+9	; 0x09
    1744:	9a 85       	ldd	r25, Y+10	; 0x0a
    1746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a 81       	ldd	r25, Y+2	; 0x02
    175e:	01 97       	sbiw	r24, 0x01	; 1
    1760:	f1 f7       	brne	.-4      	; 0x175e <main+0xf0>
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);																												/* Delay 20 msec					*/
	KEYPAD_u32_Calculator();																									/* Calling alculator Function	*/
    1766:	0e 94 04 0a 	call	0x1408	; 0x1408 <KEYPAD_u32_Calculator>
}
    176a:	2e 96       	adiw	r28, 0x0e	; 14
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <Private_voidSendInstruction>:
#include"../Include/HAL/LCD/LCD_Private.h"
#include"../Include/HAL/LCD/LCD_Configuraion.h"


void Private_voidSendInstruction (u8 copy_u8Instruction)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	2f 97       	sbiw	r28, 0x0f	; 15
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	8f 87       	std	Y+15, r24	; 0x0f
	/* Instruction --> RS = 0, Write to LCD --> RW = 0 */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_LOW);
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	62 e0       	ldi	r22, 0x02	; 2
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	40 e0       	ldi	r20, 0x00	; 0
    17a2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
	/* Instruction --> Data Port */
	MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Instruction);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    17aa:	0e 94 c9 08 	call	0x1192	; 0x1192 <MDIO_voidSetPortValue>
	/* Enable --> Falling Edge (1 then 0) */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_HIGH);
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b0 e4       	ldi	r27, 0x40	; 64
    17c0:	8b 87       	std	Y+11, r24	; 0x0b
    17c2:	9c 87       	std	Y+12, r25	; 0x0c
    17c4:	ad 87       	std	Y+13, r26	; 0x0d
    17c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    17cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a ef       	ldi	r20, 0xFA	; 250
    17d6:	54 e4       	ldi	r21, 0x44	; 68
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8f 83       	std	Y+7, r24	; 0x07
    17e2:	98 87       	std	Y+8, r25	; 0x08
    17e4:	a9 87       	std	Y+9, r26	; 0x09
    17e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ea:	78 85       	ldd	r23, Y+8	; 0x08
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <Private_voidSendInstruction+0x8e>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <Private_voidSendInstruction+0x10c>
	else if (__tmp > 65535)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <Private_voidSendInstruction+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	6b 85       	ldd	r22, Y+11	; 0x0b
    1824:	7c 85       	ldd	r23, Y+12	; 0x0c
    1826:	8d 85       	ldd	r24, Y+13	; 0x0d
    1828:	9e 85       	ldd	r25, Y+14	; 0x0e
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	0f c0       	rjmp	.+30     	; 0x186a <Private_voidSendInstruction+0xee>
    184c:	88 ec       	ldi	r24, 0xC8	; 200
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <Private_voidSendInstruction+0xdc>
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	69 f7       	brne	.-38     	; 0x184c <Private_voidSendInstruction+0xd0>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <Private_voidSendInstruction+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <Private_voidSendInstruction+0x118>
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_LOW);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>

}
    18a6:	2f 96       	adiw	r28, 0x0f	; 15
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	cf 91       	pop	r28
    18b4:	df 91       	pop	r29
    18b6:	08 95       	ret

000018b8 <HLCD_voidInit>:


void HLCD_voidInit(void)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	e8 97       	sbiw	r28, 0x38	; 56
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a0 ef       	ldi	r26, 0xF0	; 240
    18d2:	b1 e4       	ldi	r27, 0x41	; 65
    18d4:	8d ab       	std	Y+53, r24	; 0x35
    18d6:	9e ab       	std	Y+54, r25	; 0x36
    18d8:	af ab       	std	Y+55, r26	; 0x37
    18da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	6d a9       	ldd	r22, Y+53	; 0x35
    18de:	7e a9       	ldd	r23, Y+54	; 0x36
    18e0:	8f a9       	ldd	r24, Y+55	; 0x37
    18e2:	98 ad       	ldd	r25, Y+56	; 0x38
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	4a ef       	ldi	r20, 0xFA	; 250
    18ea:	54 e4       	ldi	r21, 0x44	; 68
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	89 ab       	std	Y+49, r24	; 0x31
    18f6:	9a ab       	std	Y+50, r25	; 0x32
    18f8:	ab ab       	std	Y+51, r26	; 0x33
    18fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18fc:	69 a9       	ldd	r22, Y+49	; 0x31
    18fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1900:	8b a9       	ldd	r24, Y+51	; 0x33
    1902:	9c a9       	ldd	r25, Y+52	; 0x34
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	2c f4       	brge	.+10     	; 0x191e <HLCD_voidInit+0x66>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	98 ab       	std	Y+48, r25	; 0x30
    191a:	8f a7       	std	Y+47, r24	; 0x2f
    191c:	3f c0       	rjmp	.+126    	; 0x199c <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    191e:	69 a9       	ldd	r22, Y+49	; 0x31
    1920:	7a a9       	ldd	r23, Y+50	; 0x32
    1922:	8b a9       	ldd	r24, Y+51	; 0x33
    1924:	9c a9       	ldd	r25, Y+52	; 0x34
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	3f ef       	ldi	r19, 0xFF	; 255
    192a:	4f e7       	ldi	r20, 0x7F	; 127
    192c:	57 e4       	ldi	r21, 0x47	; 71
    192e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1932:	18 16       	cp	r1, r24
    1934:	4c f5       	brge	.+82     	; 0x1988 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1936:	6d a9       	ldd	r22, Y+53	; 0x35
    1938:	7e a9       	ldd	r23, Y+54	; 0x36
    193a:	8f a9       	ldd	r24, Y+55	; 0x37
    193c:	98 ad       	ldd	r25, Y+56	; 0x38
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e2       	ldi	r20, 0x20	; 32
    1944:	51 e4       	ldi	r21, 0x41	; 65
    1946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	98 ab       	std	Y+48, r25	; 0x30
    195c:	8f a7       	std	Y+47, r24	; 0x2f
    195e:	0f c0       	rjmp	.+30     	; 0x197e <HLCD_voidInit+0xc6>
    1960:	88 ec       	ldi	r24, 0xC8	; 200
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9e a7       	std	Y+46, r25	; 0x2e
    1966:	8d a7       	std	Y+45, r24	; 0x2d
    1968:	8d a5       	ldd	r24, Y+45	; 0x2d
    196a:	9e a5       	ldd	r25, Y+46	; 0x2e
    196c:	01 97       	sbiw	r24, 0x01	; 1
    196e:	f1 f7       	brne	.-4      	; 0x196c <HLCD_voidInit+0xb4>
    1970:	9e a7       	std	Y+46, r25	; 0x2e
    1972:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1974:	8f a5       	ldd	r24, Y+47	; 0x2f
    1976:	98 a9       	ldd	r25, Y+48	; 0x30
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	98 ab       	std	Y+48, r25	; 0x30
    197c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    197e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1980:	98 a9       	ldd	r25, Y+48	; 0x30
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	69 f7       	brne	.-38     	; 0x1960 <HLCD_voidInit+0xa8>
    1986:	14 c0       	rjmp	.+40     	; 0x19b0 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	69 a9       	ldd	r22, Y+49	; 0x31
    198a:	7a a9       	ldd	r23, Y+50	; 0x32
    198c:	8b a9       	ldd	r24, Y+51	; 0x33
    198e:	9c a9       	ldd	r25, Y+52	; 0x34
    1990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	98 ab       	std	Y+48, r25	; 0x30
    199a:	8f a7       	std	Y+47, r24	; 0x2f
    199c:	8f a5       	ldd	r24, Y+47	; 0x2f
    199e:	98 a9       	ldd	r25, Y+48	; 0x30
    19a0:	9c a7       	std	Y+44, r25	; 0x2c
    19a2:	8b a7       	std	Y+43, r24	; 0x2b
    19a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <HLCD_voidInit+0xf0>
    19ac:	9c a7       	std	Y+44, r25	; 0x2c
    19ae:	8b a7       	std	Y+43, r24	; 0x2b
	/* wait for 30ms */
	_delay_ms(30);
	/* Function Set Instruction */
	Private_voidSendInstruction(LCD_u8_FUNCTION_SET);
    19b0:	8c e3       	ldi	r24, 0x3C	; 60
    19b2:	0e 94 be 0b 	call	0x177c	; 0x177c <Private_voidSendInstruction>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a0 e8       	ldi	r26, 0x80	; 128
    19bc:	bf e3       	ldi	r27, 0x3F	; 63
    19be:	8f a3       	std	Y+39, r24	; 0x27
    19c0:	98 a7       	std	Y+40, r25	; 0x28
    19c2:	a9 a7       	std	Y+41, r26	; 0x29
    19c4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c6:	6f a1       	ldd	r22, Y+39	; 0x27
    19c8:	78 a5       	ldd	r23, Y+40	; 0x28
    19ca:	89 a5       	ldd	r24, Y+41	; 0x29
    19cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	4a ef       	ldi	r20, 0xFA	; 250
    19d4:	54 e4       	ldi	r21, 0x44	; 68
    19d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	8b a3       	std	Y+35, r24	; 0x23
    19e0:	9c a3       	std	Y+36, r25	; 0x24
    19e2:	ad a3       	std	Y+37, r26	; 0x25
    19e4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19e6:	6b a1       	ldd	r22, Y+35	; 0x23
    19e8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ea:	8d a1       	ldd	r24, Y+37	; 0x25
    19ec:	9e a1       	ldd	r25, Y+38	; 0x26
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e8       	ldi	r20, 0x80	; 128
    19f4:	5f e3       	ldi	r21, 0x3F	; 63
    19f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fa:	88 23       	and	r24, r24
    19fc:	2c f4       	brge	.+10     	; 0x1a08 <HLCD_voidInit+0x150>
		__ticks = 1;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9a a3       	std	Y+34, r25	; 0x22
    1a04:	89 a3       	std	Y+33, r24	; 0x21
    1a06:	3f c0       	rjmp	.+126    	; 0x1a86 <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    1a08:	6b a1       	ldd	r22, Y+35	; 0x23
    1a0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	3f ef       	ldi	r19, 0xFF	; 255
    1a14:	4f e7       	ldi	r20, 0x7F	; 127
    1a16:	57 e4       	ldi	r21, 0x47	; 71
    1a18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a1c:	18 16       	cp	r1, r24
    1a1e:	4c f5       	brge	.+82     	; 0x1a72 <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a20:	6f a1       	ldd	r22, Y+39	; 0x27
    1a22:	78 a5       	ldd	r23, Y+40	; 0x28
    1a24:	89 a5       	ldd	r24, Y+41	; 0x29
    1a26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e2       	ldi	r20, 0x20	; 32
    1a2e:	51 e4       	ldi	r21, 0x41	; 65
    1a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	bc 01       	movw	r22, r24
    1a3a:	cd 01       	movw	r24, r26
    1a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a40:	dc 01       	movw	r26, r24
    1a42:	cb 01       	movw	r24, r22
    1a44:	9a a3       	std	Y+34, r25	; 0x22
    1a46:	89 a3       	std	Y+33, r24	; 0x21
    1a48:	0f c0       	rjmp	.+30     	; 0x1a68 <HLCD_voidInit+0x1b0>
    1a4a:	88 ec       	ldi	r24, 0xC8	; 200
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	98 a3       	std	Y+32, r25	; 0x20
    1a50:	8f 8f       	std	Y+31, r24	; 0x1f
    1a52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a54:	98 a1       	ldd	r25, Y+32	; 0x20
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <HLCD_voidInit+0x19e>
    1a5a:	98 a3       	std	Y+32, r25	; 0x20
    1a5c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a60:	9a a1       	ldd	r25, Y+34	; 0x22
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9a a3       	std	Y+34, r25	; 0x22
    1a66:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a68:	89 a1       	ldd	r24, Y+33	; 0x21
    1a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <HLCD_voidInit+0x192>
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a72:	6b a1       	ldd	r22, Y+35	; 0x23
    1a74:	7c a1       	ldd	r23, Y+36	; 0x24
    1a76:	8d a1       	ldd	r24, Y+37	; 0x25
    1a78:	9e a1       	ldd	r25, Y+38	; 0x26
    1a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	9a a3       	std	Y+34, r25	; 0x22
    1a84:	89 a3       	std	Y+33, r24	; 0x21
    1a86:	89 a1       	ldd	r24, Y+33	; 0x21
    1a88:	9a a1       	ldd	r25, Y+34	; 0x22
    1a8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a8c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	f1 f7       	brne	.-4      	; 0x1a92 <HLCD_voidInit+0x1da>
    1a96:	9e 8f       	std	Y+30, r25	; 0x1e
    1a98:	8d 8f       	std	Y+29, r24	; 0x1d
	/* wait for more 39 usec */
	_delay_ms(1);
	/* Display ON/OFF Control */
	Private_voidSendInstruction(LCD_u8_DISPLAY_CONTROL);
    1a9a:	8c e0       	ldi	r24, 0x0C	; 12
    1a9c:	0e 94 be 0b 	call	0x177c	; 0x177c <Private_voidSendInstruction>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 e8       	ldi	r26, 0x80	; 128
    1aa6:	bf e3       	ldi	r27, 0x3F	; 63
    1aa8:	89 8f       	std	Y+25, r24	; 0x19
    1aaa:	9a 8f       	std	Y+26, r25	; 0x1a
    1aac:	ab 8f       	std	Y+27, r26	; 0x1b
    1aae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ab2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ab4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ab6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a ef       	ldi	r20, 0xFA	; 250
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8d 8b       	std	Y+21, r24	; 0x15
    1aca:	9e 8b       	std	Y+22, r25	; 0x16
    1acc:	af 8b       	std	Y+23, r26	; 0x17
    1ace:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <HLCD_voidInit+0x23a>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9c 8b       	std	Y+20, r25	; 0x14
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
    1af0:	3f c0       	rjmp	.+126    	; 0x1b70 <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1af2:	6d 89       	ldd	r22, Y+21	; 0x15
    1af4:	7e 89       	ldd	r23, Y+22	; 0x16
    1af6:	8f 89       	ldd	r24, Y+23	; 0x17
    1af8:	98 8d       	ldd	r25, Y+24	; 0x18
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	3f ef       	ldi	r19, 0xFF	; 255
    1afe:	4f e7       	ldi	r20, 0x7F	; 127
    1b00:	57 e4       	ldi	r21, 0x47	; 71
    1b02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b06:	18 16       	cp	r1, r24
    1b08:	4c f5       	brge	.+82     	; 0x1b5c <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e2       	ldi	r20, 0x20	; 32
    1b18:	51 e4       	ldi	r21, 0x41	; 65
    1b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
    1b32:	0f c0       	rjmp	.+30     	; 0x1b52 <HLCD_voidInit+0x29a>
    1b34:	88 ec       	ldi	r24, 0xC8	; 200
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9a 8b       	std	Y+18, r25	; 0x12
    1b3a:	89 8b       	std	Y+17, r24	; 0x11
    1b3c:	89 89       	ldd	r24, Y+17	; 0x11
    1b3e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <HLCD_voidInit+0x288>
    1b44:	9a 8b       	std	Y+18, r25	; 0x12
    1b46:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b48:	8b 89       	ldd	r24, Y+19	; 0x13
    1b4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	9c 8b       	std	Y+20, r25	; 0x14
    1b50:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b52:	8b 89       	ldd	r24, Y+19	; 0x13
    1b54:	9c 89       	ldd	r25, Y+20	; 0x14
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	69 f7       	brne	.-38     	; 0x1b34 <HLCD_voidInit+0x27c>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b60:	8f 89       	ldd	r24, Y+23	; 0x17
    1b62:	98 8d       	ldd	r25, Y+24	; 0x18
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9c 8b       	std	Y+20, r25	; 0x14
    1b6e:	8b 8b       	std	Y+19, r24	; 0x13
    1b70:	8b 89       	ldd	r24, Y+19	; 0x13
    1b72:	9c 89       	ldd	r25, Y+20	; 0x14
    1b74:	98 8b       	std	Y+16, r25	; 0x10
    1b76:	8f 87       	std	Y+15, r24	; 0x0f
    1b78:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7a:	98 89       	ldd	r25, Y+16	; 0x10
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <HLCD_voidInit+0x2c4>
    1b80:	98 8b       	std	Y+16, r25	; 0x10
    1b82:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait for more 39 usec */
	_delay_ms(1);
	/* Clear Display */
	Private_voidSendInstruction(LCD_u8_CLEAR_DISPLAY);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	0e 94 be 0b 	call	0x177c	; 0x177c <Private_voidSendInstruction>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	a0 e0       	ldi	r26, 0x00	; 0
    1b90:	b0 e4       	ldi	r27, 0x40	; 64
    1b92:	8b 87       	std	Y+11, r24	; 0x0b
    1b94:	9c 87       	std	Y+12, r25	; 0x0c
    1b96:	ad 87       	std	Y+13, r26	; 0x0d
    1b98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	4a ef       	ldi	r20, 0xFA	; 250
    1ba8:	54 e4       	ldi	r21, 0x44	; 68
    1baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	8f 83       	std	Y+7, r24	; 0x07
    1bb4:	98 87       	std	Y+8, r25	; 0x08
    1bb6:	a9 87       	std	Y+9, r26	; 0x09
    1bb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bba:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbc:	78 85       	ldd	r23, Y+8	; 0x08
    1bbe:	89 85       	ldd	r24, Y+9	; 0x09
    1bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e8       	ldi	r20, 0x80	; 128
    1bc8:	5f e3       	ldi	r21, 0x3F	; 63
    1bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bce:	88 23       	and	r24, r24
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <HLCD_voidInit+0x324>
		__ticks = 1;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9e 83       	std	Y+6, r25	; 0x06
    1bd8:	8d 83       	std	Y+5, r24	; 0x05
    1bda:	3f c0       	rjmp	.+126    	; 0x1c5a <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bde:	78 85       	ldd	r23, Y+8	; 0x08
    1be0:	89 85       	ldd	r24, Y+9	; 0x09
    1be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	3f ef       	ldi	r19, 0xFF	; 255
    1be8:	4f e7       	ldi	r20, 0x7F	; 127
    1bea:	57 e4       	ldi	r21, 0x47	; 71
    1bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf0:	18 16       	cp	r1, r24
    1bf2:	4c f5       	brge	.+82     	; 0x1c46 <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e 83       	std	Y+6, r25	; 0x06
    1c1a:	8d 83       	std	Y+5, r24	; 0x05
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <HLCD_voidInit+0x384>
    1c1e:	88 ec       	ldi	r24, 0xC8	; 200
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <HLCD_voidInit+0x372>
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9e 83       	std	Y+6, r25	; 0x06
    1c3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <HLCD_voidInit+0x366>
    1c44:	14 c0       	rjmp	.+40     	; 0x1c6e <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	6f 81       	ldd	r22, Y+7	; 0x07
    1c48:	78 85       	ldd	r23, Y+8	; 0x08
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	9e 83       	std	Y+6, r25	; 0x06
    1c58:	8d 83       	std	Y+5, r24	; 0x05
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5e:	9a 83       	std	Y+2, r25	; 0x02
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <HLCD_voidInit+0x3ae>
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
	/* wait for more 1.53 msec */
	_delay_ms(2);
	/* ENtry Set Mode */
	Private_voidSendInstruction(LCD_u8_ENTRY_SET);
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	0e 94 be 0b 	call	0x177c	; 0x177c <Private_voidSendInstruction>
}
    1c74:	e8 96       	adiw	r28, 0x38	; 56
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	08 95       	ret

00001c86 <HLCD_voidSendData>:


void HLCD_voidSendData(u8 copy_u8Char)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	2f 97       	sbiw	r28, 0x0f	; 15
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
    1c9a:	8f 87       	std	Y+15, r24	; 0x0f
	/* Data --> RS = 1, Write to LCD --> RW = 0 */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_HIGH);
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	62 e0       	ldi	r22, 0x02	; 2
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	40 e0       	ldi	r20, 0x00	; 0
    1cac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
	/* Character --> Data Port */
	MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Char);
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cb4:	0e 94 c9 08 	call	0x1192	; 0x1192 <MDIO_voidSetPortValue>
	/* Enable --> Falling Edge (1 then 0) */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_HIGH);
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e0       	ldi	r26, 0x00	; 0
    1cc8:	b0 e4       	ldi	r27, 0x40	; 64
    1cca:	8b 87       	std	Y+11, r24	; 0x0b
    1ccc:	9c 87       	std	Y+12, r25	; 0x0c
    1cce:	ad 87       	std	Y+13, r26	; 0x0d
    1cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a ef       	ldi	r20, 0xFA	; 250
    1ce0:	54 e4       	ldi	r21, 0x44	; 68
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8f 83       	std	Y+7, r24	; 0x07
    1cec:	98 87       	std	Y+8, r25	; 0x08
    1cee:	a9 87       	std	Y+9, r26	; 0x09
    1cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <HLCD_voidSendData+0xee>
    1d56:	88 ec       	ldi	r24, 0xC8	; 200
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9c 83       	std	Y+4, r25	; 0x04
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <HLCD_voidSendData+0xdc>
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <HLCD_voidSendData+0xd0>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	9a 83       	std	Y+2, r25	; 0x02
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <HLCD_voidSendData+0x118>
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_LOW);
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <MDIO_voidSetPinValue>
}
    1db0:	2f 96       	adiw	r28, 0x0f	; 15
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <HLCD_voidSendString>:

void HLCD_voidSendString (u8 *copy_Pu8String)
{
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <HLCD_voidSendString+0x6>
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	9a 83       	std	Y+2, r25	; 0x02
    1dce:	89 83       	std	Y+1, r24	; 0x01
    1dd0:	0b c0       	rjmp	.+22     	; 0x1de8 <HLCD_voidSendString+0x26>
	while (*copy_Pu8String > 0) // Termination Condition
	{
		HLCD_voidSendData(*copy_Pu8String++); //Send char then move pointer to next char
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	20 81       	ld	r18, Z
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	82 2f       	mov	r24, r18
    1de4:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <HLCD_voidSendData>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_LOW);
}

void HLCD_voidSendString (u8 *copy_Pu8String)
{
	while (*copy_Pu8String > 0) // Termination Condition
    1de8:	e9 81       	ldd	r30, Y+1	; 0x01
    1dea:	fa 81       	ldd	r31, Y+2	; 0x02
    1dec:	80 81       	ld	r24, Z
    1dee:	88 23       	and	r24, r24
    1df0:	81 f7       	brne	.-32     	; 0x1dd2 <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*copy_Pu8String++); //Send char then move pointer to next char
	}
}
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	cf 91       	pop	r28
    1df8:	df 91       	pop	r29
    1dfa:	08 95       	ret

00001dfc <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay (void)
{
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	2e 97       	sbiw	r28, 0x0e	; 14
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
	Private_voidSendInstruction(LCD_u8_CLEAR_DISPLAY);
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	0e 94 be 0b 	call	0x177c	; 0x177c <Private_voidSendInstruction>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 e0       	ldi	r26, 0x00	; 0
    1e1c:	b0 e4       	ldi	r27, 0x40	; 64
    1e1e:	8b 87       	std	Y+11, r24	; 0x0b
    1e20:	9c 87       	std	Y+12, r25	; 0x0c
    1e22:	ad 87       	std	Y+13, r26	; 0x0d
    1e24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a ef       	ldi	r20, 0xFA	; 250
    1e34:	54 e4       	ldi	r21, 0x44	; 68
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8f 83       	std	Y+7, r24	; 0x07
    1e40:	98 87       	std	Y+8, r25	; 0x08
    1e42:	a9 87       	std	Y+9, r26	; 0x09
    1e44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 83       	std	Y+6, r25	; 0x06
    1e64:	8d 83       	std	Y+5, r24	; 0x05
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <HLCD_voidClearDisplay+0xcc>
    1eaa:	88 ec       	ldi	r24, 0xC8	; 200
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 83       	std	Y+4, r25	; 0x04
    1eb0:	8b 83       	std	Y+3, r24	; 0x03
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <HLCD_voidClearDisplay+0xba>
    1eba:	9c 83       	std	Y+4, r25	; 0x04
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9e 83       	std	Y+6, r25	; 0x06
    1ec6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	9e 81       	ldd	r25, Y+6	; 0x06
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <HLCD_voidClearDisplay+0xae>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed4:	78 85       	ldd	r23, Y+8	; 0x08
    1ed6:	89 85       	ldd	r24, Y+9	; 0x09
    1ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9e 83       	std	Y+6, r25	; 0x06
    1ee4:	8d 83       	std	Y+5, r24	; 0x05
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	9a 83       	std	Y+2, r25	; 0x02
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <HLCD_voidClearDisplay+0xf6>
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01
	/* wait for more 1.53 msec */
	_delay_ms(2);
}
    1efa:	2e 96       	adiw	r28, 0x0e	; 14
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <HLCD_voidGoToPos>:



void HLCD_voidGoToPos (u8 copy_u8RowNum, u8 copy_u8ColumnNo)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	cd b7       	in	r28, 0x3d	; 61
    1f12:	de b7       	in	r29, 0x3e	; 62
    1f14:	62 97       	sbiw	r28, 0x12	; 18
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	8f 87       	std	Y+15, r24	; 0x0f
    1f22:	68 8b       	std	Y+16, r22	; 0x10
	switch (copy_u8RowNum)
    1f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	3a 8b       	std	Y+18, r19	; 0x12
    1f2c:	29 8b       	std	Y+17, r18	; 0x11
    1f2e:	89 89       	ldd	r24, Y+17	; 0x11
    1f30:	9a 89       	ldd	r25, Y+18	; 0x12
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	91 05       	cpc	r25, r1
    1f36:	31 f0       	breq	.+12     	; 0x1f44 <HLCD_voidGoToPos+0x38>
    1f38:	29 89       	ldd	r18, Y+17	; 0x11
    1f3a:	3a 89       	ldd	r19, Y+18	; 0x12
    1f3c:	22 30       	cpi	r18, 0x02	; 2
    1f3e:	31 05       	cpc	r19, r1
    1f40:	31 f0       	breq	.+12     	; 0x1f4e <HLCD_voidGoToPos+0x42>
    1f42:	09 c0       	rjmp	.+18     	; 0x1f56 <HLCD_voidGoToPos+0x4a>
	{
	 case LCD_u8_LINE1: Private_voidSendInstruction(LCD_u8_ROW1_ADDRESS + copy_u8ColumnNo); break;
    1f44:	88 89       	ldd	r24, Y+16	; 0x10
    1f46:	81 58       	subi	r24, 0x81	; 129
    1f48:	0e 94 be 0b 	call	0x177c	; 0x177c <Private_voidSendInstruction>
    1f4c:	04 c0       	rjmp	.+8      	; 0x1f56 <HLCD_voidGoToPos+0x4a>
	 case LCD_u8_LINE2: Private_voidSendInstruction(LCD_u8_ROW2_ADDRESS + copy_u8ColumnNo); break;
    1f4e:	88 89       	ldd	r24, Y+16	; 0x10
    1f50:	81 54       	subi	r24, 0x41	; 65
    1f52:	0e 94 be 0b 	call	0x177c	; 0x177c <Private_voidSendInstruction>
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	a0 e8       	ldi	r26, 0x80	; 128
    1f5c:	bf e3       	ldi	r27, 0x3F	; 63
    1f5e:	8b 87       	std	Y+11, r24	; 0x0b
    1f60:	9c 87       	std	Y+12, r25	; 0x0c
    1f62:	ad 87       	std	Y+13, r26	; 0x0d
    1f64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4a ef       	ldi	r20, 0xFA	; 250
    1f74:	54 e4       	ldi	r21, 0x44	; 68
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8f 83       	std	Y+7, r24	; 0x07
    1f80:	98 87       	std	Y+8, r25	; 0x08
    1f82:	a9 87       	std	Y+9, r26	; 0x09
    1f84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f86:	6f 81       	ldd	r22, Y+7	; 0x07
    1f88:	78 85       	ldd	r23, Y+8	; 0x08
    1f8a:	89 85       	ldd	r24, Y+9	; 0x09
    1f8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	5f e3       	ldi	r21, 0x3F	; 63
    1f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	2c f4       	brge	.+10     	; 0x1fa8 <HLCD_voidGoToPos+0x9c>
		__ticks = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9e 83       	std	Y+6, r25	; 0x06
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
    1fa6:	3f c0       	rjmp	.+126    	; 0x2026 <HLCD_voidGoToPos+0x11a>
	else if (__tmp > 65535)
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	4f e7       	ldi	r20, 0x7F	; 127
    1fb6:	57 e4       	ldi	r21, 0x47	; 71
    1fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	4c f5       	brge	.+82     	; 0x2012 <HLCD_voidGoToPos+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e2       	ldi	r20, 0x20	; 32
    1fce:	51 e4       	ldi	r21, 0x41	; 65
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	bc 01       	movw	r22, r24
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9e 83       	std	Y+6, r25	; 0x06
    1fe6:	8d 83       	std	Y+5, r24	; 0x05
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <HLCD_voidGoToPos+0xfc>
    1fea:	88 ec       	ldi	r24, 0xC8	; 200
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9c 83       	std	Y+4, r25	; 0x04
    1ff0:	8b 83       	std	Y+3, r24	; 0x03
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <HLCD_voidGoToPos+0xea>
    1ffa:	9c 83       	std	Y+4, r25	; 0x04
    1ffc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	8d 81       	ldd	r24, Y+5	; 0x05
    200a:	9e 81       	ldd	r25, Y+6	; 0x06
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	69 f7       	brne	.-38     	; 0x1fea <HLCD_voidGoToPos+0xde>
    2010:	14 c0       	rjmp	.+40     	; 0x203a <HLCD_voidGoToPos+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2012:	6f 81       	ldd	r22, Y+7	; 0x07
    2014:	78 85       	ldd	r23, Y+8	; 0x08
    2016:	89 85       	ldd	r24, Y+9	; 0x09
    2018:	9a 85       	ldd	r25, Y+10	; 0x0a
    201a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9e 83       	std	Y+6, r25	; 0x06
    2024:	8d 83       	std	Y+5, r24	; 0x05
    2026:	8d 81       	ldd	r24, Y+5	; 0x05
    2028:	9e 81       	ldd	r25, Y+6	; 0x06
    202a:	9a 83       	std	Y+2, r25	; 0x02
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	9a 81       	ldd	r25, Y+2	; 0x02
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <HLCD_voidGoToPos+0x126>
    2036:	9a 83       	std	Y+2, r25	; 0x02
    2038:	89 83       	std	Y+1, r24	; 0x01
	}
	/* wait for more 39 usec */
	_delay_ms(1);
}
    203a:	62 96       	adiw	r28, 0x12	; 18
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <HLCD_voidDisplayNumber>:


void HLCD_voidDisplayNumber(s32 copy_u32Number)
{
    204c:	ef 92       	push	r14
    204e:	ff 92       	push	r15
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	28 97       	sbiw	r28, 0x08	; 8
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	6d 83       	std	Y+5, r22	; 0x05
    206a:	7e 83       	std	Y+6, r23	; 0x06
    206c:	8f 83       	std	Y+7, r24	; 0x07
    206e:	98 87       	std	Y+8, r25	; 0x08
	s32 local_u32Num = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a0 e0       	ldi	r26, 0x00	; 0
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	89 83       	std	Y+1, r24	; 0x01
    207a:	9a 83       	std	Y+2, r25	; 0x02
    207c:	ab 83       	std	Y+3, r26	; 0x03
    207e:	bc 83       	std	Y+4, r27	; 0x04
	if (copy_u32Number == 0)
    2080:	8d 81       	ldd	r24, Y+5	; 0x05
    2082:	9e 81       	ldd	r25, Y+6	; 0x06
    2084:	af 81       	ldd	r26, Y+7	; 0x07
    2086:	b8 85       	ldd	r27, Y+8	; 0x08
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	a1 05       	cpc	r26, r1
    208c:	b1 05       	cpc	r27, r1
    208e:	19 f4       	brne	.+6      	; 0x2096 <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    2090:	80 e3       	ldi	r24, 0x30	; 48
    2092:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <HLCD_voidSendData>
	}
	if (copy_u32Number < 0)
    2096:	8d 81       	ldd	r24, Y+5	; 0x05
    2098:	9e 81       	ldd	r25, Y+6	; 0x06
    209a:	af 81       	ldd	r26, Y+7	; 0x07
    209c:	b8 85       	ldd	r27, Y+8	; 0x08
    209e:	bb 23       	and	r27, r27
    20a0:	0c f0       	brlt	.+2      	; 0x20a4 <HLCD_voidDisplayNumber+0x58>
    20a2:	49 c0       	rjmp	.+146    	; 0x2136 <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    20a4:	8d e2       	ldi	r24, 0x2D	; 45
    20a6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <HLCD_voidSendData>
		copy_u32Number *= -1;
    20aa:	8d 81       	ldd	r24, Y+5	; 0x05
    20ac:	9e 81       	ldd	r25, Y+6	; 0x06
    20ae:	af 81       	ldd	r26, Y+7	; 0x07
    20b0:	b8 85       	ldd	r27, Y+8	; 0x08
    20b2:	b0 95       	com	r27
    20b4:	a0 95       	com	r26
    20b6:	90 95       	com	r25
    20b8:	81 95       	neg	r24
    20ba:	9f 4f       	sbci	r25, 0xFF	; 255
    20bc:	af 4f       	sbci	r26, 0xFF	; 255
    20be:	bf 4f       	sbci	r27, 0xFF	; 255
    20c0:	8d 83       	std	Y+5, r24	; 0x05
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	af 83       	std	Y+7, r26	; 0x07
    20c6:	b8 87       	std	Y+8, r27	; 0x08
    20c8:	36 c0       	rjmp	.+108    	; 0x2136 <HLCD_voidDisplayNumber+0xea>
	}
	while (copy_u32Number != 0)
	{
		local_u32Num = ((local_u32Num * 10) + (copy_u32Number % 10));
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	ab 81       	ldd	r26, Y+3	; 0x03
    20d0:	bc 81       	ldd	r27, Y+4	; 0x04
    20d2:	2a e0       	ldi	r18, 0x0A	; 10
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	50 e0       	ldi	r21, 0x00	; 0
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 26 11 	call	0x224c	; 0x224c <__mulsi3>
    20e2:	7b 01       	movw	r14, r22
    20e4:	8c 01       	movw	r16, r24
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ea:	af 81       	ldd	r26, Y+7	; 0x07
    20ec:	b8 85       	ldd	r27, Y+8	; 0x08
    20ee:	2a e0       	ldi	r18, 0x0A	; 10
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	50 e0       	ldi	r21, 0x00	; 0
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 45 11 	call	0x228a	; 0x228a <__divmodsi4>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8e 0d       	add	r24, r14
    2104:	9f 1d       	adc	r25, r15
    2106:	a0 1f       	adc	r26, r16
    2108:	b1 1f       	adc	r27, r17
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	9a 83       	std	Y+2, r25	; 0x02
    210e:	ab 83       	std	Y+3, r26	; 0x03
    2110:	bc 83       	std	Y+4, r27	; 0x04
		copy_u32Number = (copy_u32Number / 10);
    2112:	8d 81       	ldd	r24, Y+5	; 0x05
    2114:	9e 81       	ldd	r25, Y+6	; 0x06
    2116:	af 81       	ldd	r26, Y+7	; 0x07
    2118:	b8 85       	ldd	r27, Y+8	; 0x08
    211a:	2a e0       	ldi	r18, 0x0A	; 10
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	40 e0       	ldi	r20, 0x00	; 0
    2120:	50 e0       	ldi	r21, 0x00	; 0
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 45 11 	call	0x228a	; 0x228a <__divmodsi4>
    212a:	da 01       	movw	r26, r20
    212c:	c9 01       	movw	r24, r18
    212e:	8d 83       	std	Y+5, r24	; 0x05
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	af 83       	std	Y+7, r26	; 0x07
    2134:	b8 87       	std	Y+8, r27	; 0x08
	if (copy_u32Number < 0)
	{
		HLCD_voidSendData('-');
		copy_u32Number *= -1;
	}
	while (copy_u32Number != 0)
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	af 81       	ldd	r26, Y+7	; 0x07
    213c:	b8 85       	ldd	r27, Y+8	; 0x08
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	a1 05       	cpc	r26, r1
    2142:	b1 05       	cpc	r27, r1
    2144:	11 f6       	brne	.-124    	; 0x20ca <HLCD_voidDisplayNumber+0x7e>
    2146:	23 c0       	rjmp	.+70     	; 0x218e <HLCD_voidDisplayNumber+0x142>
		local_u32Num = ((local_u32Num * 10) + (copy_u32Number % 10));
		copy_u32Number = (copy_u32Number / 10);
	}
	while (local_u32Num != 1)
	{
		HLCD_voidSendData((local_u32Num % 10) + 48);
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	9a 81       	ldd	r25, Y+2	; 0x02
    214c:	ab 81       	ldd	r26, Y+3	; 0x03
    214e:	bc 81       	ldd	r27, Y+4	; 0x04
    2150:	2a e0       	ldi	r18, 0x0A	; 10
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 45 11 	call	0x228a	; 0x228a <__divmodsi4>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	80 5d       	subi	r24, 0xD0	; 208
    2166:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <HLCD_voidSendData>
		local_u32Num = (local_u32Num / 10);
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	9a 81       	ldd	r25, Y+2	; 0x02
    216e:	ab 81       	ldd	r26, Y+3	; 0x03
    2170:	bc 81       	ldd	r27, Y+4	; 0x04
    2172:	2a e0       	ldi	r18, 0x0A	; 10
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	bc 01       	movw	r22, r24
    217c:	cd 01       	movw	r24, r26
    217e:	0e 94 45 11 	call	0x228a	; 0x228a <__divmodsi4>
    2182:	da 01       	movw	r26, r20
    2184:	c9 01       	movw	r24, r18
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	ab 83       	std	Y+3, r26	; 0x03
    218c:	bc 83       	std	Y+4, r27	; 0x04
	while (copy_u32Number != 0)
	{
		local_u32Num = ((local_u32Num * 10) + (copy_u32Number % 10));
		copy_u32Number = (copy_u32Number / 10);
	}
	while (local_u32Num != 1)
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	9a 81       	ldd	r25, Y+2	; 0x02
    2192:	ab 81       	ldd	r26, Y+3	; 0x03
    2194:	bc 81       	ldd	r27, Y+4	; 0x04
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	91 05       	cpc	r25, r1
    219a:	a1 05       	cpc	r26, r1
    219c:	b1 05       	cpc	r27, r1
    219e:	a1 f6       	brne	.-88     	; 0x2148 <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Num % 10) + 48);
		local_u32Num = (local_u32Num / 10);
	}
}
    21a0:	28 96       	adiw	r28, 0x08	; 8
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	1f 91       	pop	r17
    21b2:	0f 91       	pop	r16
    21b4:	ff 90       	pop	r15
    21b6:	ef 90       	pop	r14
    21b8:	08 95       	ret

000021ba <LCD_voidSendSpecialCharacter>:


void LCD_voidSendSpecialCharacter (u8 *copy_pu8CharArr, u8 copy_u8PatternNum,
								   u8 copy_u8LineNum,   u8 copy_ColNum)
{
    21ba:	df 93       	push	r29
    21bc:	cf 93       	push	r28
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	27 97       	sbiw	r28, 0x07	; 7
    21c4:	0f b6       	in	r0, 0x3f	; 63
    21c6:	f8 94       	cli
    21c8:	de bf       	out	0x3e, r29	; 62
    21ca:	0f be       	out	0x3f, r0	; 63
    21cc:	cd bf       	out	0x3d, r28	; 61
    21ce:	9c 83       	std	Y+4, r25	; 0x04
    21d0:	8b 83       	std	Y+3, r24	; 0x03
    21d2:	6d 83       	std	Y+5, r22	; 0x05
    21d4:	4e 83       	std	Y+6, r20	; 0x06
    21d6:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress, local_u8Counter;
	/* Calculate CGRAM Address = Pattern Number * 8 */
	local_u8CGRAMAddress = copy_u8PatternNum * 8;
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	80 64       	ori	r24, 0x40	; 64
    21f0:	8a 83       	std	Y+2, r24	; 0x02
	/* Send Command to set CGRAM Address */
	Private_voidSendInstruction(local_u8CGRAMAddress);
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	0e 94 be 0b 	call	0x177c	; 0x177c <Private_voidSendInstruction>

	for (local_u8Counter=0; local_u8Counter < 8; local_u8Counter++)
    21f8:	19 82       	std	Y+1, r1	; 0x01
    21fa:	0e c0       	rjmp	.+28     	; 0x2218 <LCD_voidSendSpecialCharacter+0x5e>
	{
		/* Send byte from character array */
		HLCD_voidSendData(copy_pu8CharArr[local_u8Counter]);
    21fc:	89 81       	ldd	r24, Y+1	; 0x01
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	fc 01       	movw	r30, r24
    2208:	e2 0f       	add	r30, r18
    220a:	f3 1f       	adc	r31, r19
    220c:	80 81       	ld	r24, Z
    220e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <HLCD_voidSendData>
	local_u8CGRAMAddress = copy_u8PatternNum * 8;
	SET_BIT(local_u8CGRAMAddress,6);
	/* Send Command to set CGRAM Address */
	Private_voidSendInstruction(local_u8CGRAMAddress);

	for (local_u8Counter=0; local_u8Counter < 8; local_u8Counter++)
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	8f 5f       	subi	r24, 0xFF	; 255
    2216:	89 83       	std	Y+1, r24	; 0x01
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	88 30       	cpi	r24, 0x08	; 8
    221c:	78 f3       	brcs	.-34     	; 0x21fc <LCD_voidSendSpecialCharacter+0x42>
		/* Send byte from character array */
		HLCD_voidSendData(copy_pu8CharArr[local_u8Counter]);
	}

	/* Send Command to set DDRAM Address */
	HLCD_voidGoToPos(copy_u8LineNum,copy_ColNum);
    221e:	8e 81       	ldd	r24, Y+6	; 0x06
    2220:	6f 81       	ldd	r22, Y+7	; 0x07
    2222:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <HLCD_voidGoToPos>
	/* Display pattern from CGRAM */
	HLCD_voidSendData(copy_u8PatternNum);
    2226:	8d 81       	ldd	r24, Y+5	; 0x05
    2228:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <HLCD_voidSendData>
}
    222c:	27 96       	adiw	r28, 0x07	; 7
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <void_Timer0_Init>:
#include<stdio.h>
static void(*TIMERS_pfTimer0OVF)(void) =NULL;
static void(*TIMERS_pfTimer0CTC)(void) = NULL;

void void_Timer0_Init(void)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62

}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <__mulsi3>:
    224c:	62 9f       	mul	r22, r18
    224e:	d0 01       	movw	r26, r0
    2250:	73 9f       	mul	r23, r19
    2252:	f0 01       	movw	r30, r0
    2254:	82 9f       	mul	r24, r18
    2256:	e0 0d       	add	r30, r0
    2258:	f1 1d       	adc	r31, r1
    225a:	64 9f       	mul	r22, r20
    225c:	e0 0d       	add	r30, r0
    225e:	f1 1d       	adc	r31, r1
    2260:	92 9f       	mul	r25, r18
    2262:	f0 0d       	add	r31, r0
    2264:	83 9f       	mul	r24, r19
    2266:	f0 0d       	add	r31, r0
    2268:	74 9f       	mul	r23, r20
    226a:	f0 0d       	add	r31, r0
    226c:	65 9f       	mul	r22, r21
    226e:	f0 0d       	add	r31, r0
    2270:	99 27       	eor	r25, r25
    2272:	72 9f       	mul	r23, r18
    2274:	b0 0d       	add	r27, r0
    2276:	e1 1d       	adc	r30, r1
    2278:	f9 1f       	adc	r31, r25
    227a:	63 9f       	mul	r22, r19
    227c:	b0 0d       	add	r27, r0
    227e:	e1 1d       	adc	r30, r1
    2280:	f9 1f       	adc	r31, r25
    2282:	bd 01       	movw	r22, r26
    2284:	cf 01       	movw	r24, r30
    2286:	11 24       	eor	r1, r1
    2288:	08 95       	ret

0000228a <__divmodsi4>:
    228a:	97 fb       	bst	r25, 7
    228c:	09 2e       	mov	r0, r25
    228e:	05 26       	eor	r0, r21
    2290:	0e d0       	rcall	.+28     	; 0x22ae <__divmodsi4_neg1>
    2292:	57 fd       	sbrc	r21, 7
    2294:	04 d0       	rcall	.+8      	; 0x229e <__divmodsi4_neg2>
    2296:	14 d0       	rcall	.+40     	; 0x22c0 <__udivmodsi4>
    2298:	0a d0       	rcall	.+20     	; 0x22ae <__divmodsi4_neg1>
    229a:	00 1c       	adc	r0, r0
    229c:	38 f4       	brcc	.+14     	; 0x22ac <__divmodsi4_exit>

0000229e <__divmodsi4_neg2>:
    229e:	50 95       	com	r21
    22a0:	40 95       	com	r20
    22a2:	30 95       	com	r19
    22a4:	21 95       	neg	r18
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	4f 4f       	sbci	r20, 0xFF	; 255
    22aa:	5f 4f       	sbci	r21, 0xFF	; 255

000022ac <__divmodsi4_exit>:
    22ac:	08 95       	ret

000022ae <__divmodsi4_neg1>:
    22ae:	f6 f7       	brtc	.-4      	; 0x22ac <__divmodsi4_exit>
    22b0:	90 95       	com	r25
    22b2:	80 95       	com	r24
    22b4:	70 95       	com	r23
    22b6:	61 95       	neg	r22
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	8f 4f       	sbci	r24, 0xFF	; 255
    22bc:	9f 4f       	sbci	r25, 0xFF	; 255
    22be:	08 95       	ret

000022c0 <__udivmodsi4>:
    22c0:	a1 e2       	ldi	r26, 0x21	; 33
    22c2:	1a 2e       	mov	r1, r26
    22c4:	aa 1b       	sub	r26, r26
    22c6:	bb 1b       	sub	r27, r27
    22c8:	fd 01       	movw	r30, r26
    22ca:	0d c0       	rjmp	.+26     	; 0x22e6 <__udivmodsi4_ep>

000022cc <__udivmodsi4_loop>:
    22cc:	aa 1f       	adc	r26, r26
    22ce:	bb 1f       	adc	r27, r27
    22d0:	ee 1f       	adc	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	a2 17       	cp	r26, r18
    22d6:	b3 07       	cpc	r27, r19
    22d8:	e4 07       	cpc	r30, r20
    22da:	f5 07       	cpc	r31, r21
    22dc:	20 f0       	brcs	.+8      	; 0x22e6 <__udivmodsi4_ep>
    22de:	a2 1b       	sub	r26, r18
    22e0:	b3 0b       	sbc	r27, r19
    22e2:	e4 0b       	sbc	r30, r20
    22e4:	f5 0b       	sbc	r31, r21

000022e6 <__udivmodsi4_ep>:
    22e6:	66 1f       	adc	r22, r22
    22e8:	77 1f       	adc	r23, r23
    22ea:	88 1f       	adc	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	1a 94       	dec	r1
    22f0:	69 f7       	brne	.-38     	; 0x22cc <__udivmodsi4_loop>
    22f2:	60 95       	com	r22
    22f4:	70 95       	com	r23
    22f6:	80 95       	com	r24
    22f8:	90 95       	com	r25
    22fa:	9b 01       	movw	r18, r22
    22fc:	ac 01       	movw	r20, r24
    22fe:	bd 01       	movw	r22, r26
    2300:	cf 01       	movw	r24, r30
    2302:	08 95       	ret

00002304 <__prologue_saves__>:
    2304:	2f 92       	push	r2
    2306:	3f 92       	push	r3
    2308:	4f 92       	push	r4
    230a:	5f 92       	push	r5
    230c:	6f 92       	push	r6
    230e:	7f 92       	push	r7
    2310:	8f 92       	push	r8
    2312:	9f 92       	push	r9
    2314:	af 92       	push	r10
    2316:	bf 92       	push	r11
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	ca 1b       	sub	r28, r26
    232e:	db 0b       	sbc	r29, r27
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	09 94       	ijmp

0000233c <__epilogue_restores__>:
    233c:	2a 88       	ldd	r2, Y+18	; 0x12
    233e:	39 88       	ldd	r3, Y+17	; 0x11
    2340:	48 88       	ldd	r4, Y+16	; 0x10
    2342:	5f 84       	ldd	r5, Y+15	; 0x0f
    2344:	6e 84       	ldd	r6, Y+14	; 0x0e
    2346:	7d 84       	ldd	r7, Y+13	; 0x0d
    2348:	8c 84       	ldd	r8, Y+12	; 0x0c
    234a:	9b 84       	ldd	r9, Y+11	; 0x0b
    234c:	aa 84       	ldd	r10, Y+10	; 0x0a
    234e:	b9 84       	ldd	r11, Y+9	; 0x09
    2350:	c8 84       	ldd	r12, Y+8	; 0x08
    2352:	df 80       	ldd	r13, Y+7	; 0x07
    2354:	ee 80       	ldd	r14, Y+6	; 0x06
    2356:	fd 80       	ldd	r15, Y+5	; 0x05
    2358:	0c 81       	ldd	r16, Y+4	; 0x04
    235a:	1b 81       	ldd	r17, Y+3	; 0x03
    235c:	aa 81       	ldd	r26, Y+2	; 0x02
    235e:	b9 81       	ldd	r27, Y+1	; 0x01
    2360:	ce 0f       	add	r28, r30
    2362:	d1 1d       	adc	r29, r1
    2364:	0f b6       	in	r0, 0x3f	; 63
    2366:	f8 94       	cli
    2368:	de bf       	out	0x3e, r29	; 62
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	cd bf       	out	0x3d, r28	; 61
    236e:	ed 01       	movw	r28, r26
    2370:	08 95       	ret

00002372 <_exit>:
    2372:	f8 94       	cli

00002374 <__stop_program>:
    2374:	ff cf       	rjmp	.-2      	; 0x2374 <__stop_program>
