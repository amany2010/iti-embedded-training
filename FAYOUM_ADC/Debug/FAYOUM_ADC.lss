
FAYOUM_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002186  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002186  0000221a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800068  00800068  00002222  2**0
                  ALLOC
  3 .stab         00001974  00000000  00000000  00002224  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c4c  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000066dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000075c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008378  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000084d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008765  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008f33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_1>
       8:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <__vector_2>
       c:	0c 94 bb 0b 	jmp	0x1776	; 0x1776 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 36       	cpi	r26, 0x6F	; 111
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e8       	ldi	r30, 0x86	; 134
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 14 10 	call	0x2028	; 0x2028 <main>
      8a:	0c 94 c1 10 	jmp	0x2182	; 0x2182 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 10 	jmp	0x212c	; 0x212c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 10 	jmp	0x212c	; 0x212c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 96 10 	jmp	0x212c	; 0x212c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 96 10 	jmp	0x212c	; 0x212c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 96 10 	jmp	0x212c	; 0x212c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b6 10 	jmp	0x216c	; 0x216c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:

#include "../Include/MCAL/ADC/ADC_Interface.h"
#include "../Include/MCAL/ADC/ADC_Private.h"

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
		2- Right Adjust
		3- Disable AutoTrigger
		4- Select CLK/64
		5- Enable ADC
	 */
	CLR_BIT(ADC_u8_ADMUX_REG,7);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8f 77       	andi	r24, 0x7F	; 127
     b5a:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADMUX_REG,5);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7d       	andi	r24, 0xDF	; 223
     b76:	8c 93       	st	X, r24

	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7d       	andi	r24, 0xDF	; 223
     b84:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,2);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	84 60       	ori	r24, 0x04	; 4
     b92:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	8c 93       	st	X, r24

	SET_BIT(ADC_u8_ADCSRA_REG,7);
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 68       	ori	r24, 0x80	; 128
     bbc:	8c 93       	st	X, r24
}
     bbe:	cf 91       	pop	r28
     bc0:	df 91       	pop	r29
     bc2:	08 95       	ret

00000bc4 <ADC_u8GetDigitalValue>:

u16   ADC_u8GetDigitalValue(u8 Copy_u8ChannelNb)
{
     bc4:	df 93       	push	r29
     bc6:	cf 93       	push	r28
     bc8:	00 d0       	rcall	.+0      	; 0xbca <ADC_u8GetDigitalValue+0x6>
     bca:	0f 92       	push	r0
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16DigitalValue=0;
     bd2:	1a 82       	std	Y+2, r1	; 0x02
     bd4:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8ChannelNb < 32))
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	80 32       	cpi	r24, 0x20	; 32
     bda:	c8 f5       	brcc	.+114    	; 0xc4e <ADC_u8GetDigitalValue+0x8a>
	{
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     bdc:	a7 e2       	ldi	r26, 0x27	; 39
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	e7 e2       	ldi	r30, 0x27	; 39
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	80 7e       	andi	r24, 0xE0	; 224
     be8:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     bea:	a7 e2       	ldi	r26, 0x27	; 39
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	e7 e2       	ldi	r30, 0x27	; 39
     bf0:	f0 e0       	ldi	r31, 0x00	; 0
     bf2:	90 81       	ld	r25, Z
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	89 2b       	or	r24, r25
     bf8:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     bfa:	a6 e2       	ldi	r26, 0x26	; 38
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e6 e2       	ldi	r30, 0x26	; 38
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	80 64       	ori	r24, 0x40	; 64
     c06:	8c 93       	st	X, r24
		/* Wait flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)== 0))
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	82 95       	swap	r24
     c10:	8f 70       	andi	r24, 0x0F	; 15
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	81 70       	andi	r24, 0x01	; 1
     c18:	90 70       	andi	r25, 0x00	; 0
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	a9 f3       	breq	.-22     	; 0xc08 <ADC_u8GetDigitalValue+0x44>
		{

		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
     c1e:	e6 e2       	ldi	r30, 0x26	; 38
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	82 95       	swap	r24
     c26:	8f 70       	andi	r24, 0x0F	; 15
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	81 70       	andi	r24, 0x01	; 1
     c2e:	90 70       	andi	r25, 0x00	; 0
     c30:	88 23       	and	r24, r24
     c32:	69 f0       	breq	.+26     	; 0xc4e <ADC_u8GetDigitalValue+0x8a>
		{
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     c34:	a6 e2       	ldi	r26, 0x26	; 38
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e6 e2       	ldi	r30, 0x26	; 38
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	80 61       	ori	r24, 0x10	; 16
     c40:	8c 93       	st	X, r24
			/* Read the Digital Value */
			local_u16DigitalValue = ADC_u16_ADC_REG;
     c42:	e4 e2       	ldi	r30, 0x24	; 36
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	80 81       	ld	r24, Z
     c48:	91 81       	ldd	r25, Z+1	; 0x01
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
return local_u16DigitalValue;
     c4e:	89 81       	ldd	r24, Y+1	; 0x01
     c50:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <MDIO_voidInit>:
/* I/P Parameters: No thing									          		  */
/* Returns:it returns No thing                                				  */
/* Desc:This Function Set the initial direction & value of All pins       	  */
/******************************************************************************/
void MDIO_voidInit (void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
	/*Set all port A pins Direction due to pre-configurations.*/
	DIO_u8_DDRA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION,
     c66:	ea e3       	ldi	r30, 0x3A	; 58
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	8e ef       	ldi	r24, 0xFE	; 254
     c6c:	80 83       	st	Z, r24
			 	 	 	 	  DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION,
							  DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);

	/*Set all port B pins Direction due to pre-configurations.*/
	DIO_u8_DDRB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION,
     c6e:	e7 e3       	ldi	r30, 0x37	; 55
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	80 83       	st	Z, r24
				 	 	 	  DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION,
							  DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);

	/*Set all port C pins Direction due to pre-configurations.*/
	DIO_u8_DDRC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION,
     c76:	e4 e3       	ldi	r30, 0x34	; 52
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	87 e0       	ldi	r24, 0x07	; 7
     c7c:	80 83       	st	Z, r24
					 	 	  DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION,
							  DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);

	/*Set all port D pins Direction due to pre-configurations.*/
	DIO_u8_DDRD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION,
     c7e:	e1 e3       	ldi	r30, 0x31	; 49
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	8b ef       	ldi	r24, 0xFB	; 251
     c84:	80 83       	st	Z, r24
					 	 	  DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION,
							  DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);

	/*Set all port A pins Values due to pre-configurations.*/
	DIO_u8_PORTA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE,
     c86:	eb e3       	ldi	r30, 0x3B	; 59
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	10 82       	st	Z, r1
	 	 	                   DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE,
			                   DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);

	/*Set all port B pins Values due to pre-configurations.*/
	DIO_u8_PORTB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE,
     c8c:	e8 e3       	ldi	r30, 0x38	; 56
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	10 82       	st	Z, r1
    			 	 	 	   DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE,
    						   DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);

	/*Set all port C pins Values due to pre-configurations.*/
    DIO_u8_PORTC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE,
     c92:	e5 e3       	ldi	r30, 0x35	; 53
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	10 82       	st	Z, r1
    				 	 	   DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE,
    						   DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);

    /*Set all port D pins Values due to pre-configurations.*/
    DIO_u8_PORTD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE,
     c98:	e2 e3       	ldi	r30, 0x32	; 50
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	8f ef       	ldi	r24, 0xFF	; 255
     c9e:	80 83       	st	Z, r24
    				 	 	   DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE,
    						   DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);
 }
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <MDIO_voidSetPinDirection>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8PinDirection: DIO_u8_OUTPUT - DIO_u8_INPUT						  */
/******************************************************************************/
void MDIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	2d 97       	sbiw	r28, 0x0d	; 13
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	6a 83       	std	Y+2, r22	; 0x02
     cbe:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <MDIO_voidSetPinDirection+0x22>
     cc6:	04 c1       	rjmp	.+520    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	88 30       	cpi	r24, 0x08	; 8
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <MDIO_voidSetPinDirection+0x2a>
     cce:	00 c1       	rjmp	.+512    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	3d 87       	std	Y+13, r19	; 0x0d
     cd8:	2c 87       	std	Y+12, r18	; 0x0c
     cda:	8c 85       	ldd	r24, Y+12	; 0x0c
     cdc:	9d 85       	ldd	r25, Y+13	; 0x0d
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	91 05       	cpc	r25, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <MDIO_voidSetPinDirection+0x40>
     ce4:	4f c0       	rjmp	.+158    	; 0xd84 <MDIO_voidSetPinDirection+0xde>
     ce6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ce8:	3d 85       	ldd	r19, Y+13	; 0x0d
     cea:	22 30       	cpi	r18, 0x02	; 2
     cec:	31 05       	cpc	r19, r1
     cee:	2c f4       	brge	.+10     	; 0xcfa <MDIO_voidSetPinDirection+0x54>
     cf0:	8c 85       	ldd	r24, Y+12	; 0x0c
     cf2:	9d 85       	ldd	r25, Y+13	; 0x0d
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	71 f0       	breq	.+28     	; 0xd14 <MDIO_voidSetPinDirection+0x6e>
     cf8:	eb c0       	rjmp	.+470    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
     cfa:	2c 85       	ldd	r18, Y+12	; 0x0c
     cfc:	3d 85       	ldd	r19, Y+13	; 0x0d
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <MDIO_voidSetPinDirection+0x60>
     d04:	77 c0       	rjmp	.+238    	; 0xdf4 <MDIO_voidSetPinDirection+0x14e>
     d06:	8c 85       	ldd	r24, Y+12	; 0x0c
     d08:	9d 85       	ldd	r25, Y+13	; 0x0d
     d0a:	83 30       	cpi	r24, 0x03	; 3
     d0c:	91 05       	cpc	r25, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <MDIO_voidSetPinDirection+0x6c>
     d10:	a9 c0       	rjmp	.+338    	; 0xe64 <MDIO_voidSetPinDirection+0x1be>
     d12:	de c0       	rjmp	.+444    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8PinDirection) //Check on Direction
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	3b 87       	std	Y+11, r19	; 0x0b
     d1c:	2a 87       	std	Y+10, r18	; 0x0a
     d1e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d20:	9b 85       	ldd	r25, Y+11	; 0x0b
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	d1 f0       	breq	.+52     	; 0xd5a <MDIO_voidSetPinDirection+0xb4>
     d26:	2a 85       	ldd	r18, Y+10	; 0x0a
     d28:	3b 85       	ldd	r19, Y+11	; 0x0b
     d2a:	21 30       	cpi	r18, 0x01	; 1
     d2c:	31 05       	cpc	r19, r1
     d2e:	09 f0       	breq	.+2      	; 0xd32 <MDIO_voidSetPinDirection+0x8c>
     d30:	cf c0       	rjmp	.+414    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Output
     d32:	aa e3       	ldi	r26, 0x3A	; 58
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ea e3       	ldi	r30, 0x3A	; 58
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <MDIO_voidSetPinDirection+0xaa>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <MDIO_voidSetPinDirection+0xa6>
     d54:	84 2b       	or	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	bb c0       	rjmp	.+374    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRA_REG,copy_u8PinId); break;  //Set pin as Input
     d5a:	aa e3       	ldi	r26, 0x3A	; 58
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ea e3       	ldi	r30, 0x3A	; 58
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <MDIO_voidSetPinDirection+0xd2>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <MDIO_voidSetPinDirection+0xce>
     d7c:	80 95       	com	r24
     d7e:	84 23       	and	r24, r20
     d80:	8c 93       	st	X, r24
     d82:	a6 c0       	rjmp	.+332    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8PinDirection) //Check on Direction
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	39 87       	std	Y+9, r19	; 0x09
     d8c:	28 87       	std	Y+8, r18	; 0x08
     d8e:	88 85       	ldd	r24, Y+8	; 0x08
     d90:	99 85       	ldd	r25, Y+9	; 0x09
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	d1 f0       	breq	.+52     	; 0xdca <MDIO_voidSetPinDirection+0x124>
     d96:	28 85       	ldd	r18, Y+8	; 0x08
     d98:	39 85       	ldd	r19, Y+9	; 0x09
     d9a:	21 30       	cpi	r18, 0x01	; 1
     d9c:	31 05       	cpc	r19, r1
     d9e:	09 f0       	breq	.+2      	; 0xda2 <MDIO_voidSetPinDirection+0xfc>
     da0:	97 c0       	rjmp	.+302    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Output
     da2:	a7 e3       	ldi	r26, 0x37	; 55
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e7 e3       	ldi	r30, 0x37	; 55
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <MDIO_voidSetPinDirection+0x11a>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <MDIO_voidSetPinDirection+0x116>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	83 c0       	rjmp	.+262    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRB_REG,copy_u8PinId); break;  //Set pin as Input
     dca:	a7 e3       	ldi	r26, 0x37	; 55
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e7 e3       	ldi	r30, 0x37	; 55
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <MDIO_voidSetPinDirection+0x142>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <MDIO_voidSetPinDirection+0x13e>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	6e c0       	rjmp	.+220    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8PinDirection) //Check on Direction
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	3f 83       	std	Y+7, r19	; 0x07
     dfc:	2e 83       	std	Y+6, r18	; 0x06
     dfe:	8e 81       	ldd	r24, Y+6	; 0x06
     e00:	9f 81       	ldd	r25, Y+7	; 0x07
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	d1 f0       	breq	.+52     	; 0xe3a <MDIO_voidSetPinDirection+0x194>
     e06:	2e 81       	ldd	r18, Y+6	; 0x06
     e08:	3f 81       	ldd	r19, Y+7	; 0x07
     e0a:	21 30       	cpi	r18, 0x01	; 1
     e0c:	31 05       	cpc	r19, r1
     e0e:	09 f0       	breq	.+2      	; 0xe12 <MDIO_voidSetPinDirection+0x16c>
     e10:	5f c0       	rjmp	.+190    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Output
     e12:	a4 e3       	ldi	r26, 0x34	; 52
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e4 e3       	ldi	r30, 0x34	; 52
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <MDIO_voidSetPinDirection+0x18a>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <MDIO_voidSetPinDirection+0x186>
     e34:	84 2b       	or	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	4b c0       	rjmp	.+150    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRC_REG,copy_u8PinId); break;  //Set pin as Input
     e3a:	a4 e3       	ldi	r26, 0x34	; 52
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e4 e3       	ldi	r30, 0x34	; 52
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <MDIO_voidSetPinDirection+0x1b2>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <MDIO_voidSetPinDirection+0x1ae>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	36 c0       	rjmp	.+108    	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8PinDirection) //Check on Direction
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	3d 83       	std	Y+5, r19	; 0x05
     e6c:	2c 83       	std	Y+4, r18	; 0x04
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	9d 81       	ldd	r25, Y+5	; 0x05
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	c9 f0       	breq	.+50     	; 0xea8 <MDIO_voidSetPinDirection+0x202>
     e76:	2c 81       	ldd	r18, Y+4	; 0x04
     e78:	3d 81       	ldd	r19, Y+5	; 0x05
     e7a:	21 30       	cpi	r18, 0x01	; 1
     e7c:	31 05       	cpc	r19, r1
     e7e:	41 f5       	brne	.+80     	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
							{
								case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Output
     e80:	a1 e3       	ldi	r26, 0x31	; 49
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e1 e3       	ldi	r30, 0x31	; 49
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	48 2f       	mov	r20, r24
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	28 2f       	mov	r18, r24
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	02 2e       	mov	r0, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <MDIO_voidSetPinDirection+0x1f8>
     e9a:	88 0f       	add	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	0a 94       	dec	r0
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <MDIO_voidSetPinDirection+0x1f4>
     ea2:	84 2b       	or	r24, r20
     ea4:	8c 93       	st	X, r24
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <MDIO_voidSetPinDirection+0x22a>
								case DIO_u8_INPUT : CLR_BIT(DIO_u8_DDRD_REG,copy_u8PinId); break;  //Set pin as Input
     ea8:	a1 e3       	ldi	r26, 0x31	; 49
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e1 e3       	ldi	r30, 0x31	; 49
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	48 2f       	mov	r20, r24
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	02 2e       	mov	r0, r18
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <MDIO_voidSetPinDirection+0x220>
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	0a 94       	dec	r0
     ec8:	e2 f7       	brpl	.-8      	; 0xec2 <MDIO_voidSetPinDirection+0x21c>
     eca:	80 95       	com	r24
     ecc:	84 23       	and	r24, r20
     ece:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
     ed0:	2d 96       	adiw	r28, 0x0d	; 13
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <MDIO_voidSetPinValue>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8Value: DIO_u8_HIGH - DIO_u8_LOW		    						  */
/******************************************************************************/
void MDIO_voidSetPinValue (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8Value)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	2d 97       	sbiw	r28, 0x0d	; 13
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	6a 83       	std	Y+2, r22	; 0x02
     efa:	4b 83       	std	Y+3, r20	; 0x03
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	08 f0       	brcs	.+2      	; 0xf04 <MDIO_voidSetPinValue+0x22>
     f02:	04 c1       	rjmp	.+520    	; 0x110c <MDIO_voidSetPinValue+0x22a>
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	08 f0       	brcs	.+2      	; 0xf0c <MDIO_voidSetPinValue+0x2a>
     f0a:	00 c1       	rjmp	.+512    	; 0x110c <MDIO_voidSetPinValue+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3d 87       	std	Y+13, r19	; 0x0d
     f14:	2c 87       	std	Y+12, r18	; 0x0c
     f16:	8c 85       	ldd	r24, Y+12	; 0x0c
     f18:	9d 85       	ldd	r25, Y+13	; 0x0d
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <MDIO_voidSetPinValue+0x40>
     f20:	4f c0       	rjmp	.+158    	; 0xfc0 <MDIO_voidSetPinValue+0xde>
     f22:	2c 85       	ldd	r18, Y+12	; 0x0c
     f24:	3d 85       	ldd	r19, Y+13	; 0x0d
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	2c f4       	brge	.+10     	; 0xf36 <MDIO_voidSetPinValue+0x54>
     f2c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f2e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	71 f0       	breq	.+28     	; 0xf50 <MDIO_voidSetPinValue+0x6e>
     f34:	eb c0       	rjmp	.+470    	; 0x110c <MDIO_voidSetPinValue+0x22a>
     f36:	2c 85       	ldd	r18, Y+12	; 0x0c
     f38:	3d 85       	ldd	r19, Y+13	; 0x0d
     f3a:	22 30       	cpi	r18, 0x02	; 2
     f3c:	31 05       	cpc	r19, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <MDIO_voidSetPinValue+0x60>
     f40:	77 c0       	rjmp	.+238    	; 0x1030 <MDIO_voidSetPinValue+0x14e>
     f42:	8c 85       	ldd	r24, Y+12	; 0x0c
     f44:	9d 85       	ldd	r25, Y+13	; 0x0d
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <MDIO_voidSetPinValue+0x6c>
     f4c:	a9 c0       	rjmp	.+338    	; 0x10a0 <MDIO_voidSetPinValue+0x1be>
     f4e:	de c0       	rjmp	.+444    	; 0x110c <MDIO_voidSetPinValue+0x22a>
		{
		case DIO_u8_PORTA:
							switch(copy_u8Value) //Check on Value
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	3b 87       	std	Y+11, r19	; 0x0b
     f58:	2a 87       	std	Y+10, r18	; 0x0a
     f5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f5c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	d1 f0       	breq	.+52     	; 0xf96 <MDIO_voidSetPinValue+0xb4>
     f62:	2a 85       	ldd	r18, Y+10	; 0x0a
     f64:	3b 85       	ldd	r19, Y+11	; 0x0b
     f66:	21 30       	cpi	r18, 0x01	; 1
     f68:	31 05       	cpc	r19, r1
     f6a:	09 f0       	breq	.+2      	; 0xf6e <MDIO_voidSetPinValue+0x8c>
     f6c:	cf c0       	rjmp	.+414    	; 0x110c <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as High
     f6e:	ab e3       	ldi	r26, 0x3B	; 59
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	eb e3       	ldi	r30, 0x3B	; 59
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	48 2f       	mov	r20, r24
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	02 2e       	mov	r0, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <MDIO_voidSetPinValue+0xaa>
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	0a 94       	dec	r0
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <MDIO_voidSetPinValue+0xa6>
     f90:	84 2b       	or	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	bb c0       	rjmp	.+374    	; 0x110c <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinId); break;  //Set pin as Low
     f96:	ab e3       	ldi	r26, 0x3B	; 59
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	eb e3       	ldi	r30, 0x3B	; 59
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <MDIO_voidSetPinValue+0xd2>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <MDIO_voidSetPinValue+0xce>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
     fbe:	a6 c0       	rjmp	.+332    	; 0x110c <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTB:
							switch(copy_u8Value) //Check on Value
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	39 87       	std	Y+9, r19	; 0x09
     fc8:	28 87       	std	Y+8, r18	; 0x08
     fca:	88 85       	ldd	r24, Y+8	; 0x08
     fcc:	99 85       	ldd	r25, Y+9	; 0x09
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	d1 f0       	breq	.+52     	; 0x1006 <MDIO_voidSetPinValue+0x124>
     fd2:	28 85       	ldd	r18, Y+8	; 0x08
     fd4:	39 85       	ldd	r19, Y+9	; 0x09
     fd6:	21 30       	cpi	r18, 0x01	; 1
     fd8:	31 05       	cpc	r19, r1
     fda:	09 f0       	breq	.+2      	; 0xfde <MDIO_voidSetPinValue+0xfc>
     fdc:	97 c0       	rjmp	.+302    	; 0x110c <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as High
     fde:	a8 e3       	ldi	r26, 0x38	; 56
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e8 e3       	ldi	r30, 0x38	; 56
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8a 81       	ldd	r24, Y+2	; 0x02
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <MDIO_voidSetPinValue+0x11a>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <MDIO_voidSetPinValue+0x116>
    1000:	84 2b       	or	r24, r20
    1002:	8c 93       	st	X, r24
    1004:	83 c0       	rjmp	.+262    	; 0x110c <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinId); break;  //Set pin as Low
    1006:	a8 e3       	ldi	r26, 0x38	; 56
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e8 e3       	ldi	r30, 0x38	; 56
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8a 81       	ldd	r24, Y+2	; 0x02
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <MDIO_voidSetPinValue+0x142>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <MDIO_voidSetPinValue+0x13e>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	6e c0       	rjmp	.+220    	; 0x110c <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTC:
							switch(copy_u8Value) //Check on Value
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	3f 83       	std	Y+7, r19	; 0x07
    1038:	2e 83       	std	Y+6, r18	; 0x06
    103a:	8e 81       	ldd	r24, Y+6	; 0x06
    103c:	9f 81       	ldd	r25, Y+7	; 0x07
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	d1 f0       	breq	.+52     	; 0x1076 <MDIO_voidSetPinValue+0x194>
    1042:	2e 81       	ldd	r18, Y+6	; 0x06
    1044:	3f 81       	ldd	r19, Y+7	; 0x07
    1046:	21 30       	cpi	r18, 0x01	; 1
    1048:	31 05       	cpc	r19, r1
    104a:	09 f0       	breq	.+2      	; 0x104e <MDIO_voidSetPinValue+0x16c>
    104c:	5f c0       	rjmp	.+190    	; 0x110c <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as High
    104e:	a5 e3       	ldi	r26, 0x35	; 53
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e3       	ldi	r30, 0x35	; 53
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <MDIO_voidSetPinValue+0x18a>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <MDIO_voidSetPinValue+0x186>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	4b c0       	rjmp	.+150    	; 0x110c <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinId); break;  //Set pin as Low
    1076:	a5 e3       	ldi	r26, 0x35	; 53
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e3       	ldi	r30, 0x35	; 53
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <MDIO_voidSetPinValue+0x1b2>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <MDIO_voidSetPinValue+0x1ae>
    1098:	80 95       	com	r24
    109a:	84 23       	and	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	36 c0       	rjmp	.+108    	; 0x110c <MDIO_voidSetPinValue+0x22a>
							}//end of switch
							break;
		case DIO_u8_PORTD:
							switch(copy_u8Value) //Check on Value
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3d 83       	std	Y+5, r19	; 0x05
    10a8:	2c 83       	std	Y+4, r18	; 0x04
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	c9 f0       	breq	.+50     	; 0x10e4 <MDIO_voidSetPinValue+0x202>
    10b2:	2c 81       	ldd	r18, Y+4	; 0x04
    10b4:	3d 81       	ldd	r19, Y+5	; 0x05
    10b6:	21 30       	cpi	r18, 0x01	; 1
    10b8:	31 05       	cpc	r19, r1
    10ba:	41 f5       	brne	.+80     	; 0x110c <MDIO_voidSetPinValue+0x22a>
							{
								case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as High
    10bc:	a2 e3       	ldi	r26, 0x32	; 50
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e2 e3       	ldi	r30, 0x32	; 50
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <MDIO_voidSetPinValue+0x1f8>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <MDIO_voidSetPinValue+0x1f4>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <MDIO_voidSetPinValue+0x22a>
								case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinId); break;  //Set pin as Low
    10e4:	a2 e3       	ldi	r26, 0x32	; 50
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e2 e3       	ldi	r30, 0x32	; 50
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <MDIO_voidSetPinValue+0x220>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <MDIO_voidSetPinValue+0x21c>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
							}//end of switch
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}//end of function
    110c:	2d 96       	adiw	r28, 0x0d	; 13
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <MDIO_u8GetPinValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/******************************************************************************/
u8   MDIO_u8GetPinValue (u8 copy_u8PortId, u8 copy_u8PinId)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <MDIO_u8GetPinValue+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <MDIO_u8GetPinValue+0x8>
    1126:	0f 92       	push	r0
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	8a 83       	std	Y+2, r24	; 0x02
    112e:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8Value=2; //set initial value for needed pin value
    1130:	82 e0       	ldi	r24, 0x02	; 2
    1132:	89 83       	std	Y+1, r24	; 0x01

	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) || (copy_u8PinId > DIO_u8_PIN7) ||
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	84 30       	cpi	r24, 0x04	; 4
    1138:	08 f0       	brcs	.+2      	; 0x113c <MDIO_u8GetPinValue+0x1e>
    113a:	6b c0       	rjmp	.+214    	; 0x1212 <MDIO_u8GetPinValue+0xf4>
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	88 30       	cpi	r24, 0x08	; 8
    1140:	08 f0       	brcs	.+2      	; 0x1144 <MDIO_u8GetPinValue+0x26>
    1142:	67 c0       	rjmp	.+206    	; 0x1212 <MDIO_u8GetPinValue+0xf4>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3d 83       	std	Y+5, r19	; 0x05
    114c:	2c 83       	std	Y+4, r18	; 0x04
    114e:	4c 81       	ldd	r20, Y+4	; 0x04
    1150:	5d 81       	ldd	r21, Y+5	; 0x05
    1152:	41 30       	cpi	r20, 0x01	; 1
    1154:	51 05       	cpc	r21, r1
    1156:	41 f1       	breq	.+80     	; 0x11a8 <MDIO_u8GetPinValue+0x8a>
    1158:	8c 81       	ldd	r24, Y+4	; 0x04
    115a:	9d 81       	ldd	r25, Y+5	; 0x05
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	91 05       	cpc	r25, r1
    1160:	34 f4       	brge	.+12     	; 0x116e <MDIO_u8GetPinValue+0x50>
    1162:	2c 81       	ldd	r18, Y+4	; 0x04
    1164:	3d 81       	ldd	r19, Y+5	; 0x05
    1166:	21 15       	cp	r18, r1
    1168:	31 05       	cpc	r19, r1
    116a:	61 f0       	breq	.+24     	; 0x1184 <MDIO_u8GetPinValue+0x66>
    116c:	52 c0       	rjmp	.+164    	; 0x1212 <MDIO_u8GetPinValue+0xf4>
    116e:	4c 81       	ldd	r20, Y+4	; 0x04
    1170:	5d 81       	ldd	r21, Y+5	; 0x05
    1172:	42 30       	cpi	r20, 0x02	; 2
    1174:	51 05       	cpc	r21, r1
    1176:	51 f1       	breq	.+84     	; 0x11cc <MDIO_u8GetPinValue+0xae>
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	83 30       	cpi	r24, 0x03	; 3
    117e:	91 05       	cpc	r25, r1
    1180:	b9 f1       	breq	.+110    	; 0x11f0 <MDIO_u8GetPinValue+0xd2>
    1182:	47 c0       	rjmp	.+142    	; 0x1212 <MDIO_u8GetPinValue+0xf4>
		{
		case DIO_u8_PORTA:
							local_u8Value = GET_BIT(DIO_u8_PINA_REG,copy_u8PinId);  // Read the pin value
    1184:	e9 e3       	ldi	r30, 0x39	; 57
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <MDIO_u8GetPinValue+0x7e>
    1198:	55 95       	asr	r21
    119a:	47 95       	ror	r20
    119c:	8a 95       	dec	r24
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <MDIO_u8GetPinValue+0x7a>
    11a0:	ca 01       	movw	r24, r20
    11a2:	81 70       	andi	r24, 0x01	; 1
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	35 c0       	rjmp	.+106    	; 0x1212 <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTB:
							local_u8Value = GET_BIT(DIO_u8_PINB_REG,copy_u8PinId); // Read the pin value
    11a8:	e6 e3       	ldi	r30, 0x36	; 54
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <MDIO_u8GetPinValue+0xa2>
    11bc:	55 95       	asr	r21
    11be:	47 95       	ror	r20
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <MDIO_u8GetPinValue+0x9e>
    11c4:	ca 01       	movw	r24, r20
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	23 c0       	rjmp	.+70     	; 0x1212 <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTC:
							local_u8Value = GET_BIT(DIO_u8_PINC_REG,copy_u8PinId); // Read the pin value
    11cc:	e3 e3       	ldi	r30, 0x33	; 51
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <MDIO_u8GetPinValue+0xc6>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <MDIO_u8GetPinValue+0xc2>
    11e8:	ca 01       	movw	r24, r20
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	11 c0       	rjmp	.+34     	; 0x1212 <MDIO_u8GetPinValue+0xf4>
							break;
		case DIO_u8_PORTD:
							local_u8Value = GET_BIT(DIO_u8_PIND_REG,copy_u8PinId); // Read the pin value
    11f0:	e0 e3       	ldi	r30, 0x30	; 48
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <MDIO_u8GetPinValue+0xea>
    1204:	55 95       	asr	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <MDIO_u8GetPinValue+0xe6>
    120c:	ca 01       	movw	r24, r20
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else

	return local_u8Value;
    1212:	89 81       	ldd	r24, Y+1	; 0x01
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <MDIO_voidSetPortDirection>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinDirection: Set the Direction in hex format 					  */
/******************************************************************************/
void MDIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <MDIO_voidSetPortDirection+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <MDIO_voidSetPortDirection+0x8>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	90 f5       	brcc	.+100    	; 0x129e <MDIO_voidSetPortDirection+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	3c 83       	std	Y+4, r19	; 0x04
    1242:	2b 83       	std	Y+3, r18	; 0x03
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	91 05       	cpc	r25, r1
    124c:	d1 f0       	breq	.+52     	; 0x1282 <MDIO_voidSetPortDirection+0x5e>
    124e:	2b 81       	ldd	r18, Y+3	; 0x03
    1250:	3c 81       	ldd	r19, Y+4	; 0x04
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	2c f4       	brge	.+10     	; 0x1262 <MDIO_voidSetPortDirection+0x3e>
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	61 f0       	breq	.+24     	; 0x1278 <MDIO_voidSetPortDirection+0x54>
    1260:	1e c0       	rjmp	.+60     	; 0x129e <MDIO_voidSetPortDirection+0x7a>
    1262:	2b 81       	ldd	r18, Y+3	; 0x03
    1264:	3c 81       	ldd	r19, Y+4	; 0x04
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	81 f0       	breq	.+32     	; 0x128c <MDIO_voidSetPortDirection+0x68>
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	83 30       	cpi	r24, 0x03	; 3
    1272:	91 05       	cpc	r25, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <MDIO_voidSetPortDirection+0x72>
    1276:	13 c0       	rjmp	.+38     	; 0x129e <MDIO_voidSetPortDirection+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_DDRA_REG=copy_u8PortDirection;  // Set the port Direction
    1278:	ea e3       	ldi	r30, 0x3A	; 58
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	80 83       	st	Z, r24
    1280:	0e c0       	rjmp	.+28     	; 0x129e <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_DDRB_REG=copy_u8PortDirection;  // Set the port Direction
    1282:	e7 e3       	ldi	r30, 0x37	; 55
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	09 c0       	rjmp	.+18     	; 0x129e <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_DDRC_REG=copy_u8PortDirection;  // Set the port Direction
    128c:	e4 e3       	ldi	r30, 0x34	; 52
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	04 c0       	rjmp	.+8      	; 0x129e <MDIO_voidSetPortDirection+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_DDRD_REG=copy_u8PortDirection;  // Set the port Direction
    1296:	e1 e3       	ldi	r30, 0x31	; 49
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <MDIO_voidSetPortValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinValue: Set the Direction in hex format 					  	  */
/******************************************************************************/
void MDIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <MDIO_voidSetPortValue+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <MDIO_voidSetPortValue+0x8>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	6a 83       	std	Y+2, r22	; 0x02
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	84 30       	cpi	r24, 0x04	; 4
    12c0:	90 f5       	brcc	.+100    	; 0x1326 <MDIO_voidSetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	3c 83       	std	Y+4, r19	; 0x04
    12ca:	2b 83       	std	Y+3, r18	; 0x03
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	d1 f0       	breq	.+52     	; 0x130a <MDIO_voidSetPortValue+0x5e>
    12d6:	2b 81       	ldd	r18, Y+3	; 0x03
    12d8:	3c 81       	ldd	r19, Y+4	; 0x04
    12da:	22 30       	cpi	r18, 0x02	; 2
    12dc:	31 05       	cpc	r19, r1
    12de:	2c f4       	brge	.+10     	; 0x12ea <MDIO_voidSetPortValue+0x3e>
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	61 f0       	breq	.+24     	; 0x1300 <MDIO_voidSetPortValue+0x54>
    12e8:	1e c0       	rjmp	.+60     	; 0x1326 <MDIO_voidSetPortValue+0x7a>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	81 f0       	breq	.+32     	; 0x1314 <MDIO_voidSetPortValue+0x68>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	83 30       	cpi	r24, 0x03	; 3
    12fa:	91 05       	cpc	r25, r1
    12fc:	81 f0       	breq	.+32     	; 0x131e <MDIO_voidSetPortValue+0x72>
    12fe:	13 c0       	rjmp	.+38     	; 0x1326 <MDIO_voidSetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							DIO_u8_PORTA_REG=copy_u8PortValue;  // Set the port Value
    1300:	eb e3       	ldi	r30, 0x3B	; 59
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	80 83       	st	Z, r24
    1308:	0e c0       	rjmp	.+28     	; 0x1326 <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							DIO_u8_PORTB_REG=copy_u8PortValue;  // Set the port Value
    130a:	e8 e3       	ldi	r30, 0x38	; 56
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	80 83       	st	Z, r24
    1312:	09 c0       	rjmp	.+18     	; 0x1326 <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							DIO_u8_PORTC_REG=copy_u8PortValue;  // Set the port Value
    1314:	e5 e3       	ldi	r30, 0x35	; 53
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <MDIO_voidSetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							DIO_u8_PORTD_REG=copy_u8PortValue;  // Set the port Value
    131e:	e2 e3       	ldi	r30, 0x32	; 50
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
							break;
		}//end of switch
	}//end of else
	return; // return the control back to caller function
}
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	0f 90       	pop	r0
    132c:	0f 90       	pop	r0
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <MDIO_voidGetPortValue>:
/******************************************************************************/
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/******************************************************************************/
u8 MDIO_voidGetPortValue(u8 copy_u8PortId)
{
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	00 d0       	rcall	.+0      	; 0x133a <MDIO_voidGetPortValue+0x6>
    133a:	00 d0       	rcall	.+0      	; 0x133c <MDIO_voidGetPortValue+0x8>
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8PortValue=0;
    1342:	19 82       	std	Y+1, r1	; 0x01
	/* Input Validation */
	if ((copy_u8PortId > DIO_u8_PORTD) ||
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	84 30       	cpi	r24, 0x04	; 4
    1348:	90 f5       	brcc	.+100    	; 0x13ae <MDIO_voidGetPortValue+0x7a>
	{

	}
	else
	{
		switch (copy_u8PortId) //check on port ID
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	3c 83       	std	Y+4, r19	; 0x04
    1352:	2b 83       	std	Y+3, r18	; 0x03
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	81 30       	cpi	r24, 0x01	; 1
    135a:	91 05       	cpc	r25, r1
    135c:	d1 f0       	breq	.+52     	; 0x1392 <MDIO_voidGetPortValue+0x5e>
    135e:	2b 81       	ldd	r18, Y+3	; 0x03
    1360:	3c 81       	ldd	r19, Y+4	; 0x04
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	31 05       	cpc	r19, r1
    1366:	2c f4       	brge	.+10     	; 0x1372 <MDIO_voidGetPortValue+0x3e>
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	61 f0       	breq	.+24     	; 0x1388 <MDIO_voidGetPortValue+0x54>
    1370:	1e c0       	rjmp	.+60     	; 0x13ae <MDIO_voidGetPortValue+0x7a>
    1372:	2b 81       	ldd	r18, Y+3	; 0x03
    1374:	3c 81       	ldd	r19, Y+4	; 0x04
    1376:	22 30       	cpi	r18, 0x02	; 2
    1378:	31 05       	cpc	r19, r1
    137a:	81 f0       	breq	.+32     	; 0x139c <MDIO_voidGetPortValue+0x68>
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	81 f0       	breq	.+32     	; 0x13a6 <MDIO_voidGetPortValue+0x72>
    1386:	13 c0       	rjmp	.+38     	; 0x13ae <MDIO_voidGetPortValue+0x7a>
		{
		case DIO_u8_PORTA:
							local_u8PortValue = DIO_u8_PINA_REG;  // Read the port Value
    1388:	e9 e3       	ldi	r30, 0x39	; 57
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	0e c0       	rjmp	.+28     	; 0x13ae <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTB:
							local_u8PortValue = DIO_u8_PINB_REG;  // Read the port Value
    1392:	e6 e3       	ldi	r30, 0x36	; 54
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	09 c0       	rjmp	.+18     	; 0x13ae <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTC:
							local_u8PortValue = DIO_u8_PINC_REG;  // Read the port Value
    139c:	e3 e3       	ldi	r30, 0x33	; 51
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <MDIO_voidGetPortValue+0x7a>
							break;
		case DIO_u8_PORTD:
							local_u8PortValue = DIO_u8_PIND_REG;  // Read the port Value
    13a6:	e0 e3       	ldi	r30, 0x30	; 48
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	89 83       	std	Y+1, r24	; 0x01
							break;
		}//end of switch
	}//end of else
	return local_u8PortValue; // return port value
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <MEXTI_voidEXTIEnable>:
// Array of pointers to function
static void (*pf[3]) (void)={NULL,NULL,NULL};


void MEXTI_voidEXTIEnable(u8 copy_u8EXTI_Num, u8 copy_u8EXTI_Sense)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	2a 97       	sbiw	r28, 0x0a	; 10
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	de bf       	out	0x3e, r29	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	cd bf       	out	0x3d, r28	; 61
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_u8EXTI_Num < 0 || copy_u8EXTI_Num > 2 || copy_u8EXTI_Sense < 0 || copy_u8EXTI_Sense > 3)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	08 f0       	brcs	.+2      	; 0x13de <MEXTI_voidEXTIEnable+0x20>
    13dc:	0b c1       	rjmp	.+534    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	84 30       	cpi	r24, 0x04	; 4
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <MEXTI_voidEXTIEnable+0x28>
    13e4:	07 c1       	rjmp	.+526    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
	{

	}
	else if ((copy_u8EXTI_Num == EXTI_u8_EXTI2) && (copy_u8EXTI_Sense < 2))
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	21 f4       	brne	.+8      	; 0x13f4 <MEXTI_voidEXTIEnable+0x36>
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	82 30       	cpi	r24, 0x02	; 2
    13f0:	08 f4       	brcc	.+2      	; 0x13f4 <MEXTI_voidEXTIEnable+0x36>
    13f2:	00 c1       	rjmp	.+512    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
	{

	}
	else
	{
		switch (copy_u8EXTI_Num)
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3a 87       	std	Y+10, r19	; 0x0a
    13fc:	29 87       	std	Y+9, r18	; 0x09
    13fe:	89 85       	ldd	r24, Y+9	; 0x09
    1400:	9a 85       	ldd	r25, Y+10	; 0x0a
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	91 05       	cpc	r25, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <MEXTI_voidEXTIEnable+0x4c>
    1408:	6d c0       	rjmp	.+218    	; 0x14e4 <MEXTI_voidEXTIEnable+0x126>
    140a:	29 85       	ldd	r18, Y+9	; 0x09
    140c:	3a 85       	ldd	r19, Y+10	; 0x0a
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	09 f4       	brne	.+2      	; 0x1416 <MEXTI_voidEXTIEnable+0x58>
    1414:	c9 c0       	rjmp	.+402    	; 0x15a8 <MEXTI_voidEXTIEnable+0x1ea>
    1416:	89 85       	ldd	r24, Y+9	; 0x09
    1418:	9a 85       	ldd	r25, Y+10	; 0x0a
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	09 f0       	breq	.+2      	; 0x1420 <MEXTI_voidEXTIEnable+0x62>
    141e:	ea c0       	rjmp	.+468    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
		{
		  case EXTI_u8_EXTI0:

						      SET_BIT(EXTI_u8_GICR,EXTI_u8_EXTI0_ENABLE_BIT);
    1420:	ab e5       	ldi	r26, 0x5B	; 91
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	eb e5       	ldi	r30, 0x5B	; 91
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 64       	ori	r24, 0x40	; 64
    142c:	8c 93       	st	X, r24
						      switch (copy_u8EXTI_Sense)
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	38 87       	std	Y+8, r19	; 0x08
    1436:	2f 83       	std	Y+7, r18	; 0x07
    1438:	8f 81       	ldd	r24, Y+7	; 0x07
    143a:	98 85       	ldd	r25, Y+8	; 0x08
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	91 05       	cpc	r25, r1
    1440:	21 f1       	breq	.+72     	; 0x148a <MEXTI_voidEXTIEnable+0xcc>
    1442:	2f 81       	ldd	r18, Y+7	; 0x07
    1444:	38 85       	ldd	r19, Y+8	; 0x08
    1446:	22 30       	cpi	r18, 0x02	; 2
    1448:	31 05       	cpc	r19, r1
    144a:	2c f4       	brge	.+10     	; 0x1456 <MEXTI_voidEXTIEnable+0x98>
    144c:	8f 81       	ldd	r24, Y+7	; 0x07
    144e:	98 85       	ldd	r25, Y+8	; 0x08
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	61 f0       	breq	.+24     	; 0x146c <MEXTI_voidEXTIEnable+0xae>
    1454:	cf c0       	rjmp	.+414    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
    1456:	2f 81       	ldd	r18, Y+7	; 0x07
    1458:	38 85       	ldd	r19, Y+8	; 0x08
    145a:	22 30       	cpi	r18, 0x02	; 2
    145c:	31 05       	cpc	r19, r1
    145e:	21 f1       	breq	.+72     	; 0x14a8 <MEXTI_voidEXTIEnable+0xea>
    1460:	8f 81       	ldd	r24, Y+7	; 0x07
    1462:	98 85       	ldd	r25, Y+8	; 0x08
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	91 05       	cpc	r25, r1
    1468:	71 f1       	breq	.+92     	; 0x14c6 <MEXTI_voidEXTIEnable+0x108>
    146a:	c4 c0       	rjmp	.+392    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
						      {
						         case EXTI_u8_LOW_LEVEL_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT0);
    146c:	a5 e5       	ldi	r26, 0x55	; 85
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e5 e5       	ldi	r30, 0x55	; 85
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	8e 7f       	andi	r24, 0xFE	; 254
    1478:	8c 93       	st	X, r24
															 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT1);
    147a:	a5 e5       	ldi	r26, 0x55	; 85
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e5 e5       	ldi	r30, 0x55	; 85
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8d 7f       	andi	r24, 0xFD	; 253
    1486:	8c 93       	st	X, r24
    1488:	b5 c0       	rjmp	.+362    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_IOC_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT0);
    148a:	a5 e5       	ldi	r26, 0x55	; 85
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e5 e5       	ldi	r30, 0x55	; 85
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	81 60       	ori	r24, 0x01	; 1
    1496:	8c 93       	st	X, r24
															 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT1);
    1498:	a5 e5       	ldi	r26, 0x55	; 85
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e5 e5       	ldi	r30, 0x55	; 85
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	8d 7f       	andi	r24, 0xFD	; 253
    14a4:	8c 93       	st	X, r24
    14a6:	a6 c0       	rjmp	.+332    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_FALLING_EDGE_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT0);
    14a8:	a5 e5       	ldi	r26, 0x55	; 85
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e5 e5       	ldi	r30, 0x55	; 85
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8e 7f       	andi	r24, 0xFE	; 254
    14b4:	8c 93       	st	X, r24
															 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT1);
    14b6:	a5 e5       	ldi	r26, 0x55	; 85
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e5 e5       	ldi	r30, 0x55	; 85
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	82 60       	ori	r24, 0x02	; 2
    14c2:	8c 93       	st	X, r24
    14c4:	97 c0       	rjmp	.+302    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_RISING_EDGE_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT0);
    14c6:	a5 e5       	ldi	r26, 0x55	; 85
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e5       	ldi	r30, 0x55	; 85
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	8c 93       	st	X, r24
															 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT1);
    14d4:	a5 e5       	ldi	r26, 0x55	; 85
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e5 e5       	ldi	r30, 0x55	; 85
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	8c 93       	st	X, r24
    14e2:	88 c0       	rjmp	.+272    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
															 break;
						      }
			  	  	  	  	  break;

		  case EXTI_u8_EXTI1:
							  SET_BIT(EXTI_u8_GICR,EXTI_u8_EXTI1_ENABLE_BIT);
    14e4:	ab e5       	ldi	r26, 0x5B	; 91
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e5       	ldi	r30, 0x5B	; 91
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	80 68       	ori	r24, 0x80	; 128
    14f0:	8c 93       	st	X, r24
						      switch (copy_u8EXTI_Sense)
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	3e 83       	std	Y+6, r19	; 0x06
    14fa:	2d 83       	std	Y+5, r18	; 0x05
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	91 05       	cpc	r25, r1
    1504:	21 f1       	breq	.+72     	; 0x154e <MEXTI_voidEXTIEnable+0x190>
    1506:	2d 81       	ldd	r18, Y+5	; 0x05
    1508:	3e 81       	ldd	r19, Y+6	; 0x06
    150a:	22 30       	cpi	r18, 0x02	; 2
    150c:	31 05       	cpc	r19, r1
    150e:	2c f4       	brge	.+10     	; 0x151a <MEXTI_voidEXTIEnable+0x15c>
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	61 f0       	breq	.+24     	; 0x1530 <MEXTI_voidEXTIEnable+0x172>
    1518:	6d c0       	rjmp	.+218    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
    151a:	2d 81       	ldd	r18, Y+5	; 0x05
    151c:	3e 81       	ldd	r19, Y+6	; 0x06
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	21 f1       	breq	.+72     	; 0x156c <MEXTI_voidEXTIEnable+0x1ae>
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	9e 81       	ldd	r25, Y+6	; 0x06
    1528:	83 30       	cpi	r24, 0x03	; 3
    152a:	91 05       	cpc	r25, r1
    152c:	71 f1       	breq	.+92     	; 0x158a <MEXTI_voidEXTIEnable+0x1cc>
    152e:	62 c0       	rjmp	.+196    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
						      {
						         case EXTI_u8_LOW_LEVEL_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT2);
    1530:	a5 e5       	ldi	r26, 0x55	; 85
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e5       	ldi	r30, 0x55	; 85
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8b 7f       	andi	r24, 0xFB	; 251
    153c:	8c 93       	st	X, r24
															 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT3);
    153e:	a5 e5       	ldi	r26, 0x55	; 85
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 e5       	ldi	r30, 0x55	; 85
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	87 7f       	andi	r24, 0xF7	; 247
    154a:	8c 93       	st	X, r24
    154c:	53 c0       	rjmp	.+166    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_IOC_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT2);
    154e:	a5 e5       	ldi	r26, 0x55	; 85
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e5 e5       	ldi	r30, 0x55	; 85
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	84 60       	ori	r24, 0x04	; 4
    155a:	8c 93       	st	X, r24
															 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT3);
    155c:	a5 e5       	ldi	r26, 0x55	; 85
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e5 e5       	ldi	r30, 0x55	; 85
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	87 7f       	andi	r24, 0xF7	; 247
    1568:	8c 93       	st	X, r24
    156a:	44 c0       	rjmp	.+136    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_FALLING_EDGE_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT2);
    156c:	a5 e5       	ldi	r26, 0x55	; 85
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e5 e5       	ldi	r30, 0x55	; 85
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8b 7f       	andi	r24, 0xFB	; 251
    1578:	8c 93       	st	X, r24
															 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT3);
    157a:	a5 e5       	ldi	r26, 0x55	; 85
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e5 e5       	ldi	r30, 0x55	; 85
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	88 60       	ori	r24, 0x08	; 8
    1586:	8c 93       	st	X, r24
    1588:	35 c0       	rjmp	.+106    	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_RISING_EDGE_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT2);
    158a:	a5 e5       	ldi	r26, 0x55	; 85
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e5 e5       	ldi	r30, 0x55	; 85
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	84 60       	ori	r24, 0x04	; 4
    1596:	8c 93       	st	X, r24
															 SET_BIT(EXTI_u8_MCUCR,EXTI_u8_MCUCR_BIT3);
    1598:	a5 e5       	ldi	r26, 0x55	; 85
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e5 e5       	ldi	r30, 0x55	; 85
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	88 60       	ori	r24, 0x08	; 8
    15a4:	8c 93       	st	X, r24
    15a6:	26 c0       	rjmp	.+76     	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
															 break;
						      }
							  break;

		  case EXTI_u8_EXTI2:
							  SET_BIT(EXTI_u8_GICR,EXTI_u8_EXTI2_ENABLE_BIT);
    15a8:	ab e5       	ldi	r26, 0x5B	; 91
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e5       	ldi	r30, 0x5B	; 91
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	80 62       	ori	r24, 0x20	; 32
    15b4:	8c 93       	st	X, r24
						      switch (copy_u8EXTI_Sense)
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3c 83       	std	Y+4, r19	; 0x04
    15be:	2b 83       	std	Y+3, r18	; 0x03
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	82 30       	cpi	r24, 0x02	; 2
    15c6:	91 05       	cpc	r25, r1
    15c8:	31 f0       	breq	.+12     	; 0x15d6 <MEXTI_voidEXTIEnable+0x218>
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	23 30       	cpi	r18, 0x03	; 3
    15d0:	31 05       	cpc	r19, r1
    15d2:	49 f0       	breq	.+18     	; 0x15e6 <MEXTI_voidEXTIEnable+0x228>
    15d4:	0f c0       	rjmp	.+30     	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
						      {
						         case EXTI_u8_FALLING_EDGE_MODE:
						        	 	 	 	 	 	 	 CLR_BIT(EXTI_u8_MCUCSR,EXTI_u8_MCUCSR_BIT6);
    15d6:	a4 e5       	ldi	r26, 0x54	; 84
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e4 e5       	ldi	r30, 0x54	; 84
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8f 7b       	andi	r24, 0xBF	; 191
    15e2:	8c 93       	st	X, r24
    15e4:	07 c0       	rjmp	.+14     	; 0x15f4 <MEXTI_voidEXTIEnable+0x236>
															 break;
						         case EXTI_u8_RISING_EDGE_MODE:
						        	 	 	 	 	 	 	 SET_BIT(EXTI_u8_MCUCSR,EXTI_u8_MCUCSR_BIT6);
    15e6:	a4 e5       	ldi	r26, 0x54	; 84
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e4 e5       	ldi	r30, 0x54	; 84
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 64       	ori	r24, 0x40	; 64
    15f2:	8c 93       	st	X, r24
						      }
							  break;

		}
	}
}
    15f4:	2a 96       	adiw	r28, 0x0a	; 10
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <MEXTI_voidEXTIDisable>:


void MEXTI_voidEXTIDisable(u8 copy_u8EXTI_Num)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <MEXTI_voidEXTIDisable+0x6>
    160c:	0f 92       	push	r0
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_u8EXTI_Num)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3b 83       	std	Y+3, r19	; 0x03
    161c:	2a 83       	std	Y+2, r18	; 0x02
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	89 f0       	breq	.+34     	; 0x164a <MEXTI_voidEXTIDisable+0x44>
    1628:	2a 81       	ldd	r18, Y+2	; 0x02
    162a:	3b 81       	ldd	r19, Y+3	; 0x03
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	a1 f0       	breq	.+40     	; 0x165a <MEXTI_voidEXTIDisable+0x54>
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	b9 f4       	brne	.+46     	; 0x1668 <MEXTI_voidEXTIDisable+0x62>
	{
		case  EXTI_u8_EXTI0: CLR_BIT(EXTI_u8_GICR,EXTI_u8_EXTI0_ENABLE_BIT); break;
    163a:	ab e5       	ldi	r26, 0x5B	; 91
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	eb e5       	ldi	r30, 0x5B	; 91
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8f 7b       	andi	r24, 0xBF	; 191
    1646:	8c 93       	st	X, r24
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <MEXTI_voidEXTIDisable+0x62>
		case  EXTI_u8_EXTI1: CLR_BIT(EXTI_u8_GICR,EXTI_u8_EXTI1_ENABLE_BIT); break;
    164a:	ab e5       	ldi	r26, 0x5B	; 91
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	eb e5       	ldi	r30, 0x5B	; 91
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8f 77       	andi	r24, 0x7F	; 127
    1656:	8c 93       	st	X, r24
    1658:	07 c0       	rjmp	.+14     	; 0x1668 <MEXTI_voidEXTIDisable+0x62>
		case  EXTI_u8_EXTI2: CLR_BIT(EXTI_u8_GICR,EXTI_u8_EXTI2_ENABLE_BIT); break;
    165a:	ab e5       	ldi	r26, 0x5B	; 91
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	eb e5       	ldi	r30, 0x5B	; 91
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8f 7d       	andi	r24, 0xDF	; 223
    1666:	8c 93       	st	X, r24
		default: break;
	}
}
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <MEXTI_voidSetCallBack>:


void MEXTI_voidSetCallBack (void(*copy_PtrToFunction)(void), u8 copy_u8Index)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	00 d0       	rcall	.+0      	; 0x167a <MEXTI_voidSetCallBack+0x6>
    167a:	0f 92       	push	r0
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	6b 83       	std	Y+3, r22	; 0x03
	pf[copy_u8Index]= copy_PtrToFunction;
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	fc 01       	movw	r30, r24
    1692:	e8 59       	subi	r30, 0x98	; 152
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	89 81       	ldd	r24, Y+1	; 0x01
    1698:	9a 81       	ldd	r25, Y+2	; 0x02
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	80 83       	st	Z, r24
}
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <__vector_1>:


void __vector_1(void)    __attribute__((signal));
void __vector_1(void)
{
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	2f 93       	push	r18
    16b6:	3f 93       	push	r19
    16b8:	4f 93       	push	r20
    16ba:	5f 93       	push	r21
    16bc:	6f 93       	push	r22
    16be:	7f 93       	push	r23
    16c0:	8f 93       	push	r24
    16c2:	9f 93       	push	r25
    16c4:	af 93       	push	r26
    16c6:	bf 93       	push	r27
    16c8:	ef 93       	push	r30
    16ca:	ff 93       	push	r31
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	if (pf[EXTI_u8_EXTI0] != NULL)
    16d4:	80 91 68 00 	lds	r24, 0x0068
    16d8:	90 91 69 00 	lds	r25, 0x0069
    16dc:	00 97       	sbiw	r24, 0x00	; 0
    16de:	29 f0       	breq	.+10     	; 0x16ea <__vector_1+0x40>
	{
		pf[EXTI_u8_EXTI0]();
    16e0:	e0 91 68 00 	lds	r30, 0x0068
    16e4:	f0 91 69 00 	lds	r31, 0x0069
    16e8:	09 95       	icall
	}

}
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	ff 91       	pop	r31
    16f0:	ef 91       	pop	r30
    16f2:	bf 91       	pop	r27
    16f4:	af 91       	pop	r26
    16f6:	9f 91       	pop	r25
    16f8:	8f 91       	pop	r24
    16fa:	7f 91       	pop	r23
    16fc:	6f 91       	pop	r22
    16fe:	5f 91       	pop	r21
    1700:	4f 91       	pop	r20
    1702:	3f 91       	pop	r19
    1704:	2f 91       	pop	r18
    1706:	0f 90       	pop	r0
    1708:	0f be       	out	0x3f, r0	; 63
    170a:	0f 90       	pop	r0
    170c:	1f 90       	pop	r1
    170e:	18 95       	reti

00001710 <__vector_2>:


void __vector_2(void)    __attribute__((signal));
void __vector_2(void)
{
    1710:	1f 92       	push	r1
    1712:	0f 92       	push	r0
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	0f 92       	push	r0
    1718:	11 24       	eor	r1, r1
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	if (pf[EXTI_u8_EXTI1] != NULL)
    173a:	80 91 6a 00 	lds	r24, 0x006A
    173e:	90 91 6b 00 	lds	r25, 0x006B
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	29 f0       	breq	.+10     	; 0x1750 <__vector_2+0x40>
		{
			pf[EXTI_u8_EXTI1]();
    1746:	e0 91 6a 00 	lds	r30, 0x006A
    174a:	f0 91 6b 00 	lds	r31, 0x006B
    174e:	09 95       	icall
		}
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	ff 91       	pop	r31
    1756:	ef 91       	pop	r30
    1758:	bf 91       	pop	r27
    175a:	af 91       	pop	r26
    175c:	9f 91       	pop	r25
    175e:	8f 91       	pop	r24
    1760:	7f 91       	pop	r23
    1762:	6f 91       	pop	r22
    1764:	5f 91       	pop	r21
    1766:	4f 91       	pop	r20
    1768:	3f 91       	pop	r19
    176a:	2f 91       	pop	r18
    176c:	0f 90       	pop	r0
    176e:	0f be       	out	0x3f, r0	; 63
    1770:	0f 90       	pop	r0
    1772:	1f 90       	pop	r1
    1774:	18 95       	reti

00001776 <__vector_3>:


void __vector_3(void)    __attribute__((signal));
void __vector_3(void)
{
    1776:	1f 92       	push	r1
    1778:	0f 92       	push	r0
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	0f 92       	push	r0
    177e:	11 24       	eor	r1, r1
    1780:	2f 93       	push	r18
    1782:	3f 93       	push	r19
    1784:	4f 93       	push	r20
    1786:	5f 93       	push	r21
    1788:	6f 93       	push	r22
    178a:	7f 93       	push	r23
    178c:	8f 93       	push	r24
    178e:	9f 93       	push	r25
    1790:	af 93       	push	r26
    1792:	bf 93       	push	r27
    1794:	ef 93       	push	r30
    1796:	ff 93       	push	r31
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
	if (pf[EXTI_u8_EXTI2] != NULL)
    17a0:	80 91 6c 00 	lds	r24, 0x006C
    17a4:	90 91 6d 00 	lds	r25, 0x006D
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	29 f0       	breq	.+10     	; 0x17b6 <__vector_3+0x40>
		{
			pf[EXTI_u8_EXTI2]();
    17ac:	e0 91 6c 00 	lds	r30, 0x006C
    17b0:	f0 91 6d 00 	lds	r31, 0x006D
    17b4:	09 95       	icall
		}
}
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	ff 91       	pop	r31
    17bc:	ef 91       	pop	r30
    17be:	bf 91       	pop	r27
    17c0:	af 91       	pop	r26
    17c2:	9f 91       	pop	r25
    17c4:	8f 91       	pop	r24
    17c6:	7f 91       	pop	r23
    17c8:	6f 91       	pop	r22
    17ca:	5f 91       	pop	r21
    17cc:	4f 91       	pop	r20
    17ce:	3f 91       	pop	r19
    17d0:	2f 91       	pop	r18
    17d2:	0f 90       	pop	r0
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	0f 90       	pop	r0
    17d8:	1f 90       	pop	r1
    17da:	18 95       	reti

000017dc <GPI_voidInit>:
#include "../Include/MCAL/GBI/GPI_Private.h"
#include "../Include/MCAL/GBI/GPI_Configuration.h"


void GPI_voidInit   (void)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
	#if GPI_u8_MODE == GPI_u8_ENABLE
		SET_BIT(SREG,GPI_u8_INTERRUPT_ENABLE_BIT);
    17e4:	af e5       	ldi	r26, 0x5F	; 95
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	ef e5       	ldi	r30, 0x5F	; 95
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	80 68       	ori	r24, 0x80	; 128
    17f0:	8c 93       	st	X, r24
    #else
		CLR_BIT(SREG,GPI_u8_INTERRUPT_ENABLE_BIT);
    #endif
}
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	08 95       	ret

000017f8 <GPI_voidEnable>:

void GPI_voidEnable (void)
{
    17f8:	df 93       	push	r29
    17fa:	cf 93       	push	r28
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,GPI_u8_INTERRUPT_ENABLE_BIT);
    1800:	af e5       	ldi	r26, 0x5F	; 95
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ef e5       	ldi	r30, 0x5F	; 95
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	80 68       	ori	r24, 0x80	; 128
    180c:	8c 93       	st	X, r24
}
    180e:	cf 91       	pop	r28
    1810:	df 91       	pop	r29
    1812:	08 95       	ret

00001814 <GPI_voidDisable>:

void GPI_voidDisable(void)
{
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,GPI_u8_INTERRUPT_ENABLE_BIT);
    181c:	af e5       	ldi	r26, 0x5F	; 95
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ef e5       	ldi	r30, 0x5F	; 95
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8f 77       	andi	r24, 0x7F	; 127
    1828:	8c 93       	st	X, r24
}
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <Private_voidSendInstruction>:
#include "../Include/MCAL/DIO/DIO_Private.h"
#include "../Include/MCAL/DIO/DIO_Configuration.h"


void Private_voidSendInstruction(u8 copy_u8Instruction)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	2f 97       	sbiw	r28, 0x0f	; 15
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	8f 87       	std	Y+15, r24	; 0x0f
	/*Instruction --> RS = 0, Writer --> RW = 0*/
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,DIO_u8_LOW);
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	61 e0       	ldi	r22, 0x01	; 1
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
	/*Instruction --> Data_Port*/
	MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Instruction);
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	6f 85       	ldd	r22, Y+15	; 0x0f
    185e:	0e 94 56 09 	call	0x12ac	; 0x12ac <MDIO_voidSetPortValue>
	/*Enable --> Falling Edge (1 then 0)*/
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 e0       	ldi	r26, 0x00	; 0
    1872:	b0 e4       	ldi	r27, 0x40	; 64
    1874:	8b 87       	std	Y+11, r24	; 0x0b
    1876:	9c 87       	std	Y+12, r25	; 0x0c
    1878:	ad 87       	std	Y+13, r26	; 0x0d
    187a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187c:	6b 85       	ldd	r22, Y+11	; 0x0b
    187e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1880:	8d 85       	ldd	r24, Y+13	; 0x0d
    1882:	9e 85       	ldd	r25, Y+14	; 0x0e
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	4a ef       	ldi	r20, 0xFA	; 250
    188a:	54 e4       	ldi	r21, 0x44	; 68
    188c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	8f 83       	std	Y+7, r24	; 0x07
    1896:	98 87       	std	Y+8, r25	; 0x08
    1898:	a9 87       	std	Y+9, r26	; 0x09
    189a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    189c:	6f 81       	ldd	r22, Y+7	; 0x07
    189e:	78 85       	ldd	r23, Y+8	; 0x08
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	5f e3       	ldi	r21, 0x3F	; 63
    18ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b0:	88 23       	and	r24, r24
    18b2:	2c f4       	brge	.+10     	; 0x18be <Private_voidSendInstruction+0x8e>
		__ticks = 1;
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	8d 83       	std	Y+5, r24	; 0x05
    18bc:	3f c0       	rjmp	.+126    	; 0x193c <Private_voidSendInstruction+0x10c>
	else if (__tmp > 65535)
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	3f ef       	ldi	r19, 0xFF	; 255
    18ca:	4f e7       	ldi	r20, 0x7F	; 127
    18cc:	57 e4       	ldi	r21, 0x47	; 71
    18ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d2:	18 16       	cp	r1, r24
    18d4:	4c f5       	brge	.+82     	; 0x1928 <Private_voidSendInstruction+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18da:	8d 85       	ldd	r24, Y+13	; 0x0d
    18dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e2       	ldi	r20, 0x20	; 32
    18e4:	51 e4       	ldi	r21, 0x41	; 65
    18e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9e 83       	std	Y+6, r25	; 0x06
    18fc:	8d 83       	std	Y+5, r24	; 0x05
    18fe:	0f c0       	rjmp	.+30     	; 0x191e <Private_voidSendInstruction+0xee>
    1900:	88 ec       	ldi	r24, 0xC8	; 200
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9c 83       	std	Y+4, r25	; 0x04
    1906:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	f1 f7       	brne	.-4      	; 0x190c <Private_voidSendInstruction+0xdc>
    1910:	9c 83       	std	Y+4, r25	; 0x04
    1912:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	9e 83       	std	Y+6, r25	; 0x06
    191c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191e:	8d 81       	ldd	r24, Y+5	; 0x05
    1920:	9e 81       	ldd	r25, Y+6	; 0x06
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	69 f7       	brne	.-38     	; 0x1900 <Private_voidSendInstruction+0xd0>
    1926:	14 c0       	rjmp	.+40     	; 0x1950 <Private_voidSendInstruction+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1928:	6f 81       	ldd	r22, Y+7	; 0x07
    192a:	78 85       	ldd	r23, Y+8	; 0x08
    192c:	89 85       	ldd	r24, Y+9	; 0x09
    192e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	f1 f7       	brne	.-4      	; 0x1948 <Private_voidSendInstruction+0x118>
    194c:	9a 83       	std	Y+2, r25	; 0x02
    194e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_LOW);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	60 e0       	ldi	r22, 0x00	; 0
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
}
    195a:	2f 96       	adiw	r28, 0x0f	; 15
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	08 95       	ret

0000196c <HLCD_voidInit>:


/*LCD Init*/
void HLCD_voidInit()
{
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	c6 54       	subi	r28, 0x46	; 70
    197a:	d0 40       	sbci	r29, 0x00	; 0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	f8 94       	cli
    1980:	de bf       	out	0x3e, r29	; 62
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	cd bf       	out	0x3d, r28	; 61
    1986:	fe 01       	movw	r30, r28
    1988:	ed 5b       	subi	r30, 0xBD	; 189
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	a0 ef       	ldi	r26, 0xF0	; 240
    1992:	b1 e4       	ldi	r27, 0x41	; 65
    1994:	80 83       	st	Z, r24
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	a2 83       	std	Z+2, r26	; 0x02
    199a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199c:	8e 01       	movw	r16, r28
    199e:	01 5c       	subi	r16, 0xC1	; 193
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	fe 01       	movw	r30, r28
    19a4:	ed 5b       	subi	r30, 0xBD	; 189
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	60 81       	ld	r22, Z
    19aa:	71 81       	ldd	r23, Z+1	; 0x01
    19ac:	82 81       	ldd	r24, Z+2	; 0x02
    19ae:	93 81       	ldd	r25, Z+3	; 0x03
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	4a ef       	ldi	r20, 0xFA	; 250
    19b6:	54 e4       	ldi	r21, 0x44	; 68
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	f8 01       	movw	r30, r16
    19c2:	80 83       	st	Z, r24
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	a2 83       	std	Z+2, r26	; 0x02
    19c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ca:	fe 01       	movw	r30, r28
    19cc:	ff 96       	adiw	r30, 0x3f	; 63
    19ce:	60 81       	ld	r22, Z
    19d0:	71 81       	ldd	r23, Z+1	; 0x01
    19d2:	82 81       	ldd	r24, Z+2	; 0x02
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e8       	ldi	r20, 0x80	; 128
    19dc:	5f e3       	ldi	r21, 0x3F	; 63
    19de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	2c f4       	brge	.+10     	; 0x19f0 <HLCD_voidInit+0x84>
		__ticks = 1;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	9e af       	std	Y+62, r25	; 0x3e
    19ec:	8d af       	std	Y+61, r24	; 0x3d
    19ee:	46 c0       	rjmp	.+140    	; 0x1a7c <HLCD_voidInit+0x110>
	else if (__tmp > 65535)
    19f0:	fe 01       	movw	r30, r28
    19f2:	ff 96       	adiw	r30, 0x3f	; 63
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	64 f5       	brge	.+88     	; 0x1a64 <HLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	fe 01       	movw	r30, r28
    1a0e:	ed 5b       	subi	r30, 0xBD	; 189
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	93 81       	ldd	r25, Z+3	; 0x03
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e2       	ldi	r20, 0x20	; 32
    1a20:	51 e4       	ldi	r21, 0x41	; 65
    1a22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	bc 01       	movw	r22, r24
    1a2c:	cd 01       	movw	r24, r26
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	9e af       	std	Y+62, r25	; 0x3e
    1a38:	8d af       	std	Y+61, r24	; 0x3d
    1a3a:	0f c0       	rjmp	.+30     	; 0x1a5a <HLCD_voidInit+0xee>
    1a3c:	88 ec       	ldi	r24, 0xC8	; 200
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9c af       	std	Y+60, r25	; 0x3c
    1a42:	8b af       	std	Y+59, r24	; 0x3b
    1a44:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a46:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	f1 f7       	brne	.-4      	; 0x1a48 <HLCD_voidInit+0xdc>
    1a4c:	9c af       	std	Y+60, r25	; 0x3c
    1a4e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a50:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a52:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	9e af       	std	Y+62, r25	; 0x3e
    1a58:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	69 f7       	brne	.-38     	; 0x1a3c <HLCD_voidInit+0xd0>
    1a62:	16 c0       	rjmp	.+44     	; 0x1a90 <HLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a64:	fe 01       	movw	r30, r28
    1a66:	ff 96       	adiw	r30, 0x3f	; 63
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9e af       	std	Y+62, r25	; 0x3e
    1a7a:	8d af       	std	Y+61, r24	; 0x3d
    1a7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a80:	9a af       	std	Y+58, r25	; 0x3a
    1a82:	89 af       	std	Y+57, r24	; 0x39
    1a84:	89 ad       	ldd	r24, Y+57	; 0x39
    1a86:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <HLCD_voidInit+0x11c>
    1a8c:	9a af       	std	Y+58, r25	; 0x3a
    1a8e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);
	/*Fn set*/
	Private_voidSendInstruction(LCD_u8_FUNCTION_SET);
    1a90:	8c e3       	ldi	r24, 0x3C	; 60
    1a92:	0e 94 18 0c 	call	0x1830	; 0x1830 <Private_voidSendInstruction>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 ef       	ldi	r26, 0xF0	; 240
    1a9c:	b1 e4       	ldi	r27, 0x41	; 65
    1a9e:	8d ab       	std	Y+53, r24	; 0x35
    1aa0:	9e ab       	std	Y+54, r25	; 0x36
    1aa2:	af ab       	std	Y+55, r26	; 0x37
    1aa4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	6d a9       	ldd	r22, Y+53	; 0x35
    1aa8:	7e a9       	ldd	r23, Y+54	; 0x36
    1aaa:	8f a9       	ldd	r24, Y+55	; 0x37
    1aac:	98 ad       	ldd	r25, Y+56	; 0x38
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a ef       	ldi	r20, 0xFA	; 250
    1ab4:	54 e4       	ldi	r21, 0x44	; 68
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	89 ab       	std	Y+49, r24	; 0x31
    1ac0:	9a ab       	std	Y+50, r25	; 0x32
    1ac2:	ab ab       	std	Y+51, r26	; 0x33
    1ac4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ac6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aca:	8b a9       	ldd	r24, Y+51	; 0x33
    1acc:	9c a9       	ldd	r25, Y+52	; 0x34
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <HLCD_voidInit+0x17c>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	98 ab       	std	Y+48, r25	; 0x30
    1ae4:	8f a7       	std	Y+47, r24	; 0x2f
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <HLCD_voidInit+0x1fa>
	else if (__tmp > 65535)
    1ae8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aea:	7a a9       	ldd	r23, Y+50	; 0x32
    1aec:	8b a9       	ldd	r24, Y+51	; 0x33
    1aee:	9c a9       	ldd	r25, Y+52	; 0x34
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <HLCD_voidInit+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	6d a9       	ldd	r22, Y+53	; 0x35
    1b02:	7e a9       	ldd	r23, Y+54	; 0x36
    1b04:	8f a9       	ldd	r24, Y+55	; 0x37
    1b06:	98 ad       	ldd	r25, Y+56	; 0x38
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	98 ab       	std	Y+48, r25	; 0x30
    1b26:	8f a7       	std	Y+47, r24	; 0x2f
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <HLCD_voidInit+0x1dc>
    1b2a:	88 ec       	ldi	r24, 0xC8	; 200
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9e a7       	std	Y+46, r25	; 0x2e
    1b30:	8d a7       	std	Y+45, r24	; 0x2d
    1b32:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b34:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <HLCD_voidInit+0x1ca>
    1b3a:	9e a7       	std	Y+46, r25	; 0x2e
    1b3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b40:	98 a9       	ldd	r25, Y+48	; 0x30
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	98 ab       	std	Y+48, r25	; 0x30
    1b46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <HLCD_voidInit+0x1be>
    1b50:	14 c0       	rjmp	.+40     	; 0x1b7a <HLCD_voidInit+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	69 a9       	ldd	r22, Y+49	; 0x31
    1b54:	7a a9       	ldd	r23, Y+50	; 0x32
    1b56:	8b a9       	ldd	r24, Y+51	; 0x33
    1b58:	9c a9       	ldd	r25, Y+52	; 0x34
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	98 ab       	std	Y+48, r25	; 0x30
    1b64:	8f a7       	std	Y+47, r24	; 0x2f
    1b66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b68:	98 a9       	ldd	r25, Y+48	; 0x30
    1b6a:	9c a7       	std	Y+44, r25	; 0x2c
    1b6c:	8b a7       	std	Y+43, r24	; 0x2b
    1b6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b70:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <HLCD_voidInit+0x206>
    1b76:	9c a7       	std	Y+44, r25	; 0x2c
    1b78:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(30);
	/*Display ON/OFF control*/
	Private_voidSendInstruction(LCD_u8_DISPLAY_CONTROL);
    1b7a:	8c e0       	ldi	r24, 0x0C	; 12
    1b7c:	0e 94 18 0c 	call	0x1830	; 0x1830 <Private_voidSendInstruction>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a0 ef       	ldi	r26, 0xF0	; 240
    1b86:	b1 e4       	ldi	r27, 0x41	; 65
    1b88:	8f a3       	std	Y+39, r24	; 0x27
    1b8a:	98 a7       	std	Y+40, r25	; 0x28
    1b8c:	a9 a7       	std	Y+41, r26	; 0x29
    1b8e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	6f a1       	ldd	r22, Y+39	; 0x27
    1b92:	78 a5       	ldd	r23, Y+40	; 0x28
    1b94:	89 a5       	ldd	r24, Y+41	; 0x29
    1b96:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a ef       	ldi	r20, 0xFA	; 250
    1b9e:	54 e4       	ldi	r21, 0x44	; 68
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8b a3       	std	Y+35, r24	; 0x23
    1baa:	9c a3       	std	Y+36, r25	; 0x24
    1bac:	ad a3       	std	Y+37, r26	; 0x25
    1bae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <HLCD_voidInit+0x266>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9a a3       	std	Y+34, r25	; 0x22
    1bce:	89 a3       	std	Y+33, r24	; 0x21
    1bd0:	3f c0       	rjmp	.+126    	; 0x1c50 <HLCD_voidInit+0x2e4>
	else if (__tmp > 65535)
    1bd2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	3f ef       	ldi	r19, 0xFF	; 255
    1bde:	4f e7       	ldi	r20, 0x7F	; 127
    1be0:	57 e4       	ldi	r21, 0x47	; 71
    1be2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be6:	18 16       	cp	r1, r24
    1be8:	4c f5       	brge	.+82     	; 0x1c3c <HLCD_voidInit+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	6f a1       	ldd	r22, Y+39	; 0x27
    1bec:	78 a5       	ldd	r23, Y+40	; 0x28
    1bee:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9a a3       	std	Y+34, r25	; 0x22
    1c10:	89 a3       	std	Y+33, r24	; 0x21
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <HLCD_voidInit+0x2c6>
    1c14:	88 ec       	ldi	r24, 0xC8	; 200
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	98 a3       	std	Y+32, r25	; 0x20
    1c1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1c1c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c1e:	98 a1       	ldd	r25, Y+32	; 0x20
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <HLCD_voidInit+0x2b4>
    1c24:	98 a3       	std	Y+32, r25	; 0x20
    1c26:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	89 a1       	ldd	r24, Y+33	; 0x21
    1c2a:	9a a1       	ldd	r25, Y+34	; 0x22
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9a a3       	std	Y+34, r25	; 0x22
    1c30:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c32:	89 a1       	ldd	r24, Y+33	; 0x21
    1c34:	9a a1       	ldd	r25, Y+34	; 0x22
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <HLCD_voidInit+0x2a8>
    1c3a:	14 c0       	rjmp	.+40     	; 0x1c64 <HLCD_voidInit+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c40:	8d a1       	ldd	r24, Y+37	; 0x25
    1c42:	9e a1       	ldd	r25, Y+38	; 0x26
    1c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9a a3       	std	Y+34, r25	; 0x22
    1c4e:	89 a3       	std	Y+33, r24	; 0x21
    1c50:	89 a1       	ldd	r24, Y+33	; 0x21
    1c52:	9a a1       	ldd	r25, Y+34	; 0x22
    1c54:	9e 8f       	std	Y+30, r25	; 0x1e
    1c56:	8d 8f       	std	Y+29, r24	; 0x1d
    1c58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <HLCD_voidInit+0x2f0>
    1c60:	9e 8f       	std	Y+30, r25	; 0x1e
    1c62:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(30);
	/*Clear Display*/
	Private_voidSendInstruction(LCD_u8_CLR_DISPLAY);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	0e 94 18 0c 	call	0x1830	; 0x1830 <Private_voidSendInstruction>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 ef       	ldi	r26, 0xF0	; 240
    1c70:	b1 e4       	ldi	r27, 0x41	; 65
    1c72:	89 8f       	std	Y+25, r24	; 0x19
    1c74:	9a 8f       	std	Y+26, r25	; 0x1a
    1c76:	ab 8f       	std	Y+27, r26	; 0x1b
    1c78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	4a ef       	ldi	r20, 0xFA	; 250
    1c88:	54 e4       	ldi	r21, 0x44	; 68
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	8d 8b       	std	Y+21, r24	; 0x15
    1c94:	9e 8b       	std	Y+22, r25	; 0x16
    1c96:	af 8b       	std	Y+23, r26	; 0x17
    1c98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e8       	ldi	r20, 0x80	; 128
    1ca8:	5f e3       	ldi	r21, 0x3F	; 63
    1caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cae:	88 23       	and	r24, r24
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <HLCD_voidInit+0x350>
		__ticks = 1;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9c 8b       	std	Y+20, r25	; 0x14
    1cb8:	8b 8b       	std	Y+19, r24	; 0x13
    1cba:	3f c0       	rjmp	.+126    	; 0x1d3a <HLCD_voidInit+0x3ce>
	else if (__tmp > 65535)
    1cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	3f ef       	ldi	r19, 0xFF	; 255
    1cc8:	4f e7       	ldi	r20, 0x7F	; 127
    1cca:	57 e4       	ldi	r21, 0x47	; 71
    1ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd0:	18 16       	cp	r1, r24
    1cd2:	4c f5       	brge	.+82     	; 0x1d26 <HLCD_voidInit+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e2       	ldi	r20, 0x20	; 32
    1ce2:	51 e4       	ldi	r21, 0x41	; 65
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9c 8b       	std	Y+20, r25	; 0x14
    1cfa:	8b 8b       	std	Y+19, r24	; 0x13
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <HLCD_voidInit+0x3b0>
    1cfe:	88 ec       	ldi	r24, 0xC8	; 200
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9a 8b       	std	Y+18, r25	; 0x12
    1d04:	89 8b       	std	Y+17, r24	; 0x11
    1d06:	89 89       	ldd	r24, Y+17	; 0x11
    1d08:	9a 89       	ldd	r25, Y+18	; 0x12
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <HLCD_voidInit+0x39e>
    1d0e:	9a 8b       	std	Y+18, r25	; 0x12
    1d10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d12:	8b 89       	ldd	r24, Y+19	; 0x13
    1d14:	9c 89       	ldd	r25, Y+20	; 0x14
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	9c 8b       	std	Y+20, r25	; 0x14
    1d1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <HLCD_voidInit+0x392>
    1d24:	14 c0       	rjmp	.+40     	; 0x1d4e <HLCD_voidInit+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d26:	6d 89       	ldd	r22, Y+21	; 0x15
    1d28:	7e 89       	ldd	r23, Y+22	; 0x16
    1d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	9c 8b       	std	Y+20, r25	; 0x14
    1d38:	8b 8b       	std	Y+19, r24	; 0x13
    1d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d3e:	98 8b       	std	Y+16, r25	; 0x10
    1d40:	8f 87       	std	Y+15, r24	; 0x0f
    1d42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d44:	98 89       	ldd	r25, Y+16	; 0x10
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <HLCD_voidInit+0x3da>
    1d4a:	98 8b       	std	Y+16, r25	; 0x10
    1d4c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);
	/*Entry Mode Set*/
	Private_voidSendInstruction(LCD_u8_ENTRY_MODE);
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	0e 94 18 0c 	call	0x1830	; 0x1830 <Private_voidSendInstruction>
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	a0 ef       	ldi	r26, 0xF0	; 240
    1d5a:	b1 e4       	ldi	r27, 0x41	; 65
    1d5c:	8b 87       	std	Y+11, r24	; 0x0b
    1d5e:	9c 87       	std	Y+12, r25	; 0x0c
    1d60:	ad 87       	std	Y+13, r26	; 0x0d
    1d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	8f 83       	std	Y+7, r24	; 0x07
    1d7e:	98 87       	std	Y+8, r25	; 0x08
    1d80:	a9 87       	std	Y+9, r26	; 0x09
    1d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d84:	6f 81       	ldd	r22, Y+7	; 0x07
    1d86:	78 85       	ldd	r23, Y+8	; 0x08
    1d88:	89 85       	ldd	r24, Y+9	; 0x09
    1d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <HLCD_voidInit+0x43a>
		__ticks = 1;
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	3f c0       	rjmp	.+126    	; 0x1e24 <HLCD_voidInit+0x4b8>
	else if (__tmp > 65535)
    1da6:	6f 81       	ldd	r22, Y+7	; 0x07
    1da8:	78 85       	ldd	r23, Y+8	; 0x08
    1daa:	89 85       	ldd	r24, Y+9	; 0x09
    1dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	3f ef       	ldi	r19, 0xFF	; 255
    1db2:	4f e7       	ldi	r20, 0x7F	; 127
    1db4:	57 e4       	ldi	r21, 0x47	; 71
    1db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dba:	18 16       	cp	r1, r24
    1dbc:	4c f5       	brge	.+82     	; 0x1e10 <HLCD_voidInit+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e2       	ldi	r20, 0x20	; 32
    1dcc:	51 e4       	ldi	r21, 0x41	; 65
    1dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	bc 01       	movw	r22, r24
    1dd8:	cd 01       	movw	r24, r26
    1dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	9e 83       	std	Y+6, r25	; 0x06
    1de4:	8d 83       	std	Y+5, r24	; 0x05
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <HLCD_voidInit+0x49a>
    1de8:	88 ec       	ldi	r24, 0xC8	; 200
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	9c 83       	std	Y+4, r25	; 0x04
    1dee:	8b 83       	std	Y+3, r24	; 0x03
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <HLCD_voidInit+0x488>
    1df8:	9c 83       	std	Y+4, r25	; 0x04
    1dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	9e 83       	std	Y+6, r25	; 0x06
    1e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	00 97       	sbiw	r24, 0x00	; 0
    1e0c:	69 f7       	brne	.-38     	; 0x1de8 <HLCD_voidInit+0x47c>
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <HLCD_voidInit+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9e 83       	std	Y+6, r25	; 0x06
    1e22:	8d 83       	std	Y+5, r24	; 0x05
    1e24:	8d 81       	ldd	r24, Y+5	; 0x05
    1e26:	9e 81       	ldd	r25, Y+6	; 0x06
    1e28:	9a 83       	std	Y+2, r25	; 0x02
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	89 81       	ldd	r24, Y+1	; 0x01
    1e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <HLCD_voidInit+0x4c4>
    1e34:	9a 83       	std	Y+2, r25	; 0x02
    1e36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
}
    1e38:	ca 5b       	subi	r28, 0xBA	; 186
    1e3a:	df 4f       	sbci	r29, 0xFF	; 255
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	cf 91       	pop	r28
    1e48:	df 91       	pop	r29
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	08 95       	ret

00001e50 <HLCD_voidSendData>:

/*LCD Send Data*/
void HLCD_voidSendData(u8 copy_u8Char) /* 'A' */
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	2f 97       	sbiw	r28, 0x0f	; 15
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	8f 87       	std	Y+15, r24	; 0x0f
		/*Data --> RS = 1, Writer --> RW = 0*/
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,RS_PIN,DIO_u8_HIGH);
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	62 e0       	ldi	r22, 0x02	; 2
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	61 e0       	ldi	r22, 0x01	; 1
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
		/*Instruction --> Data_Port*/
		MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Char);
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e7e:	0e 94 56 09 	call	0x12ac	; 0x12ac <MDIO_voidSetPortValue>
		/*Enable --> Falling Edge (1 then 0)*/
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	60 e0       	ldi	r22, 0x00	; 0
    1e86:	41 e0       	ldi	r20, 0x01	; 1
    1e88:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	a0 e0       	ldi	r26, 0x00	; 0
    1e92:	b0 e4       	ldi	r27, 0x40	; 64
    1e94:	8b 87       	std	Y+11, r24	; 0x0b
    1e96:	9c 87       	std	Y+12, r25	; 0x0c
    1e98:	ad 87       	std	Y+13, r26	; 0x0d
    1e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	4a ef       	ldi	r20, 0xFA	; 250
    1eaa:	54 e4       	ldi	r21, 0x44	; 68
    1eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	8f 83       	std	Y+7, r24	; 0x07
    1eb6:	98 87       	std	Y+8, r25	; 0x08
    1eb8:	a9 87       	std	Y+9, r26	; 0x09
    1eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ebc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ebe:	78 85       	ldd	r23, Y+8	; 0x08
    1ec0:	89 85       	ldd	r24, Y+9	; 0x09
    1ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e8       	ldi	r20, 0x80	; 128
    1eca:	5f e3       	ldi	r21, 0x3F	; 63
    1ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed0:	88 23       	and	r24, r24
    1ed2:	2c f4       	brge	.+10     	; 0x1ede <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	3f c0       	rjmp	.+126    	; 0x1f5c <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1ede:	6f 81       	ldd	r22, Y+7	; 0x07
    1ee0:	78 85       	ldd	r23, Y+8	; 0x08
    1ee2:	89 85       	ldd	r24, Y+9	; 0x09
    1ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	57 e4       	ldi	r21, 0x47	; 71
    1eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	4c f5       	brge	.+82     	; 0x1f48 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1efa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e2       	ldi	r20, 0x20	; 32
    1f04:	51 e4       	ldi	r21, 0x41	; 65
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	bc 01       	movw	r22, r24
    1f10:	cd 01       	movw	r24, r26
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	9e 83       	std	Y+6, r25	; 0x06
    1f1c:	8d 83       	std	Y+5, r24	; 0x05
    1f1e:	0f c0       	rjmp	.+30     	; 0x1f3e <HLCD_voidSendData+0xee>
    1f20:	88 ec       	ldi	r24, 0xC8	; 200
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	9c 83       	std	Y+4, r25	; 0x04
    1f26:	8b 83       	std	Y+3, r24	; 0x03
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <HLCD_voidSendData+0xdc>
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	69 f7       	brne	.-38     	; 0x1f20 <HLCD_voidSendData+0xd0>
    1f46:	14 c0       	rjmp	.+40     	; 0x1f70 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	9e 83       	std	Y+6, r25	; 0x06
    1f5a:	8d 83       	std	Y+5, r24	; 0x05
    1f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <HLCD_voidSendData+0x118>
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_LOW);
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
}
    1f7a:	2f 96       	adiw	r28, 0x0f	; 15
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	08 95       	ret

00001f8c <HLCD_voidSendString>:

void HLCD_voidSendString (char *copy_ptrString)
{
    1f8c:	df 93       	push	r29
    1f8e:	cf 93       	push	r28
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <HLCD_voidSendString+0x6>
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
    1f96:	9a 83       	std	Y+2, r25	; 0x02
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	0b c0       	rjmp	.+22     	; 0x1fb2 <HLCD_voidSendString+0x26>
	while (*copy_ptrString > 0) //Termination condition
	{
		HLCD_voidSendData(*copy_ptrString++); //Send char then move pointer to next char
    1f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa0:	20 81       	ld	r18, Z
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	01 96       	adiw	r24, 0x01	; 1
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	82 2f       	mov	r24, r18
    1fae:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <HLCD_voidSendData>
		MDIO_voidSetPinValue(LCD_CONTROL_PORT,E_PIN,DIO_u8_LOW);
}

void HLCD_voidSendString (char *copy_ptrString)
{
	while (*copy_ptrString > 0) //Termination condition
    1fb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb6:	80 81       	ld	r24, Z
    1fb8:	88 23       	and	r24, r24
    1fba:	81 f7       	brne	.-32     	; 0x1f9c <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*copy_ptrString++); //Send char then move pointer to next char
	}
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	08 95       	ret

00001fc6 <HLCD_voidGoToPos>:

void HLCD_voidGoToPos (u8 copy_u8RowNum, u8 copy_u8ColumnNum)
{
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <HLCD_voidGoToPos+0x6>
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_u8RowNum >= LCD_u8_Row1) && (copy_u8RowNum <= LCD_u8_Row2) &&
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	88 23       	and	r24, r24
    1fd8:	c1 f0       	breq	.+48     	; 0x200a <HLCD_voidGoToPos+0x44>
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	83 30       	cpi	r24, 0x03	; 3
    1fde:	a8 f4       	brcc	.+42     	; 0x200a <HLCD_voidGoToPos+0x44>
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	88 23       	and	r24, r24
    1fe4:	91 f0       	breq	.+36     	; 0x200a <HLCD_voidGoToPos+0x44>
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	81 31       	cpi	r24, 0x11	; 17
    1fea:	78 f4       	brcc	.+30     	; 0x200a <HLCD_voidGoToPos+0x44>
		(copy_u8ColumnNum >= LCD_u8_Column1) && (copy_u8ColumnNum <= LCD_u8_Column16))
	{
		Private_voidSendInstruction(LCD_u8_POSITION);
    1fec:	80 e8       	ldi	r24, 0x80	; 128
    1fee:	0e 94 18 0c 	call	0x1830	; 0x1830 <Private_voidSendInstruction>
		if (copy_u8RowNum==1)
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	81 30       	cpi	r24, 0x01	; 1
    1ff6:	29 f4       	brne	.+10     	; 0x2002 <HLCD_voidGoToPos+0x3c>
		{
			Private_voidSendInstruction(LCD_u8_ROW1Address + copy_u8ColumnNum);
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	81 58       	subi	r24, 0x81	; 129
    1ffc:	0e 94 18 0c 	call	0x1830	; 0x1830 <Private_voidSendInstruction>
    2000:	04 c0       	rjmp	.+8      	; 0x200a <HLCD_voidGoToPos+0x44>
		}
		else
		{
			Private_voidSendInstruction(LCD_u8_ROW2Address + copy_u8ColumnNum);
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	81 54       	subi	r24, 0x41	; 65
    2006:	0e 94 18 0c 	call	0x1830	; 0x1830 <Private_voidSendInstruction>
		}
	}

}
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <HLCD_voidDisplayClear>:

void HLCD_voidDisplayClear (void)
{
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	Private_voidSendInstruction(LCD_u8_CLR_DISPLAY);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	0e 94 18 0c 	call	0x1830	; 0x1830 <Private_voidSendInstruction>
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <main>:
#include "../Include/MCAL/ADC/ADC_Private.h"



void (main)(void)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <main+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <main+0x8>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
	MDIO_voidInit();
    2034:	0e 94 2f 06 	call	0xc5e	; 0xc5e <MDIO_voidInit>
	ADC_voidInit();
    2038:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	u16 digital =ADC_u8GetDigitalValue(0);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8GetDigitalValue>
    2042:	9c 83       	std	Y+4, r25	; 0x04
    2044:	8b 83       	std	Y+3, r24	; 0x03
	u16 analog=0;
    2046:	1a 82       	std	Y+2, r1	; 0x02
    2048:	19 82       	std	Y+1, r1	; 0x01
	while (1)
	{
		digital =ADC_u8GetDigitalValue(0);
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <ADC_u8GetDigitalValue>
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
		analog = (u16)((digital*500UL)/1024);
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	cc 01       	movw	r24, r24
    205a:	a0 e0       	ldi	r26, 0x00	; 0
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	24 ef       	ldi	r18, 0xF4	; 244
    2060:	31 e0       	ldi	r19, 0x01	; 1
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	50 e0       	ldi	r21, 0x00	; 0
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <__mulsi3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	07 2e       	mov	r0, r23
    2074:	7a e0       	ldi	r23, 0x0A	; 10
    2076:	b6 95       	lsr	r27
    2078:	a7 95       	ror	r26
    207a:	97 95       	ror	r25
    207c:	87 95       	ror	r24
    207e:	7a 95       	dec	r23
    2080:	d1 f7       	brne	.-12     	; 0x2076 <main+0x4e>
    2082:	70 2d       	mov	r23, r0
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	89 83       	std	Y+1, r24	; 0x01
		if (analog >30)
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	9a 81       	ldd	r25, Y+2	; 0x02
    208c:	8f 31       	cpi	r24, 0x1F	; 31
    208e:	91 05       	cpc	r25, r1
    2090:	30 f0       	brcs	.+12     	; 0x209e <main+0x76>
		{
			MDIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_HIGH);
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
    209c:	d6 cf       	rjmp	.-84     	; 0x204a <main+0x22>
		}
		else
		{
			MDIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	61 e0       	ldi	r22, 0x01	; 1
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
    20a8:	d0 cf       	rjmp	.-96     	; 0x204a <main+0x22>

000020aa <ToggleLed>:
	}

}

void ToggleLed(void)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
	static u8 flag=0;
	if (flag==0)
    20b2:	80 91 6e 00 	lds	r24, 0x006E
    20b6:	88 23       	and	r24, r24
    20b8:	21 f4       	brne	.+8      	; 0x20c2 <ToggleLed+0x18>
	{

		flag=1;
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	80 93 6e 00 	sts	0x006E, r24
    20c0:	07 c0       	rjmp	.+14     	; 0x20d0 <ToggleLed+0x26>
	}
	else
	{
		MDIO_voidSetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 71 07 	call	0xee2	; 0xee2 <MDIO_voidSetPinValue>
		flag=0;
    20cc:	10 92 6e 00 	sts	0x006E, r1
	}
}
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <__mulsi3>:
    20d6:	62 9f       	mul	r22, r18
    20d8:	d0 01       	movw	r26, r0
    20da:	73 9f       	mul	r23, r19
    20dc:	f0 01       	movw	r30, r0
    20de:	82 9f       	mul	r24, r18
    20e0:	e0 0d       	add	r30, r0
    20e2:	f1 1d       	adc	r31, r1
    20e4:	64 9f       	mul	r22, r20
    20e6:	e0 0d       	add	r30, r0
    20e8:	f1 1d       	adc	r31, r1
    20ea:	92 9f       	mul	r25, r18
    20ec:	f0 0d       	add	r31, r0
    20ee:	83 9f       	mul	r24, r19
    20f0:	f0 0d       	add	r31, r0
    20f2:	74 9f       	mul	r23, r20
    20f4:	f0 0d       	add	r31, r0
    20f6:	65 9f       	mul	r22, r21
    20f8:	f0 0d       	add	r31, r0
    20fa:	99 27       	eor	r25, r25
    20fc:	72 9f       	mul	r23, r18
    20fe:	b0 0d       	add	r27, r0
    2100:	e1 1d       	adc	r30, r1
    2102:	f9 1f       	adc	r31, r25
    2104:	63 9f       	mul	r22, r19
    2106:	b0 0d       	add	r27, r0
    2108:	e1 1d       	adc	r30, r1
    210a:	f9 1f       	adc	r31, r25
    210c:	bd 01       	movw	r22, r26
    210e:	cf 01       	movw	r24, r30
    2110:	11 24       	eor	r1, r1
    2112:	08 95       	ret

00002114 <__prologue_saves__>:
    2114:	2f 92       	push	r2
    2116:	3f 92       	push	r3
    2118:	4f 92       	push	r4
    211a:	5f 92       	push	r5
    211c:	6f 92       	push	r6
    211e:	7f 92       	push	r7
    2120:	8f 92       	push	r8
    2122:	9f 92       	push	r9
    2124:	af 92       	push	r10
    2126:	bf 92       	push	r11
    2128:	cf 92       	push	r12
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	ca 1b       	sub	r28, r26
    213e:	db 0b       	sbc	r29, r27
    2140:	0f b6       	in	r0, 0x3f	; 63
    2142:	f8 94       	cli
    2144:	de bf       	out	0x3e, r29	; 62
    2146:	0f be       	out	0x3f, r0	; 63
    2148:	cd bf       	out	0x3d, r28	; 61
    214a:	09 94       	ijmp

0000214c <__epilogue_restores__>:
    214c:	2a 88       	ldd	r2, Y+18	; 0x12
    214e:	39 88       	ldd	r3, Y+17	; 0x11
    2150:	48 88       	ldd	r4, Y+16	; 0x10
    2152:	5f 84       	ldd	r5, Y+15	; 0x0f
    2154:	6e 84       	ldd	r6, Y+14	; 0x0e
    2156:	7d 84       	ldd	r7, Y+13	; 0x0d
    2158:	8c 84       	ldd	r8, Y+12	; 0x0c
    215a:	9b 84       	ldd	r9, Y+11	; 0x0b
    215c:	aa 84       	ldd	r10, Y+10	; 0x0a
    215e:	b9 84       	ldd	r11, Y+9	; 0x09
    2160:	c8 84       	ldd	r12, Y+8	; 0x08
    2162:	df 80       	ldd	r13, Y+7	; 0x07
    2164:	ee 80       	ldd	r14, Y+6	; 0x06
    2166:	fd 80       	ldd	r15, Y+5	; 0x05
    2168:	0c 81       	ldd	r16, Y+4	; 0x04
    216a:	1b 81       	ldd	r17, Y+3	; 0x03
    216c:	aa 81       	ldd	r26, Y+2	; 0x02
    216e:	b9 81       	ldd	r27, Y+1	; 0x01
    2170:	ce 0f       	add	r28, r30
    2172:	d1 1d       	adc	r29, r1
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	ed 01       	movw	r28, r26
    2180:	08 95       	ret

00002182 <_exit>:
    2182:	f8 94       	cli

00002184 <__stop_program>:
    2184:	ff cf       	rjmp	.-2      	; 0x2184 <__stop_program>
