
Hardware_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  000026b6  0000272a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001a70  00000000  00000000  00002860  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f24  00000000  00000000  000042d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  000051f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000020e  00000000  00000000  000053b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000268b  00000000  00000000  000055c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d1  00000000  00000000  00007c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012ab  00000000  00000000  0000911e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  0000a3cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  0000a5ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0a  00000000  00000000  0000a8a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b2b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 bd 12 	call	0x257a	; 0x257a <main>
      7a:	0c 94 59 13 	jmp	0x26b2	; 0x26b2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 1d 04 	call	0x83a	; 0x83a <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e6       	ldi	r22, 0x6D	; 109
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 46 13 	jmp	0x268c	; 0x268c <__epilogue_restores__+0x10>

0000077a <__eqsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__eqsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__eqsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__eqsf2+0x58>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

000007da <__gtsf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gtsf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gtsf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gtsf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

0000083a <__gesf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

0000089a <__ltsf2>:
     89a:	a8 e1       	ldi	r26, 0x18	; 24
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__+0x18>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	2d 83       	std	Y+5, r18	; 0x05
     8b0:	3e 83       	std	Y+6, r19	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	58 87       	std	Y+8, r21	; 0x08
     8b6:	89 e0       	ldi	r24, 0x09	; 9
     8b8:	e8 2e       	mov	r14, r24
     8ba:	f1 2c       	mov	r15, r1
     8bc:	ec 0e       	add	r14, r28
     8be:	fd 1e       	adc	r15, r29
     8c0:	ce 01       	movw	r24, r28
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	b7 01       	movw	r22, r14
     8c6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8ca:	8e 01       	movw	r16, r28
     8cc:	0f 5e       	subi	r16, 0xEF	; 239
     8ce:	1f 4f       	sbci	r17, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	05 96       	adiw	r24, 0x05	; 5
     8d4:	b8 01       	movw	r22, r16
     8d6:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     8da:	89 85       	ldd	r24, Y+9	; 0x09
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	40 f0       	brcs	.+16     	; 0x8f0 <__ltsf2+0x56>
     8e0:	89 89       	ldd	r24, Y+17	; 0x11
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	28 f0       	brcs	.+10     	; 0x8f0 <__ltsf2+0x56>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fpcmp_parts_f>
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <__ltsf2+0x58>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	68 96       	adiw	r28, 0x18	; 24
     8f4:	e6 e0       	ldi	r30, 0x06	; 6
     8f6:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__+0x18>

000008fa <__floatsisf>:
     8fa:	a8 e0       	ldi	r26, 0x08	; 8
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e3 e8       	ldi	r30, 0x83	; 131
     900:	f4 e0       	ldi	r31, 0x04	; 4
     902:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__prologue_saves__+0x12>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	89 83       	std	Y+1, r24	; 0x01
     90e:	da 01       	movw	r26, r20
     910:	c9 01       	movw	r24, r18
     912:	88 27       	eor	r24, r24
     914:	b7 fd       	sbrc	r27, 7
     916:	83 95       	inc	r24
     918:	99 27       	eor	r25, r25
     91a:	aa 27       	eor	r26, r26
     91c:	bb 27       	eor	r27, r27
     91e:	b8 2e       	mov	r11, r24
     920:	21 15       	cp	r18, r1
     922:	31 05       	cpc	r19, r1
     924:	41 05       	cpc	r20, r1
     926:	51 05       	cpc	r21, r1
     928:	19 f4       	brne	.+6      	; 0x930 <__floatsisf+0x36>
     92a:	82 e0       	ldi	r24, 0x02	; 2
     92c:	89 83       	std	Y+1, r24	; 0x01
     92e:	3a c0       	rjmp	.+116    	; 0x9a4 <__floatsisf+0xaa>
     930:	88 23       	and	r24, r24
     932:	a9 f0       	breq	.+42     	; 0x95e <__floatsisf+0x64>
     934:	20 30       	cpi	r18, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	38 07       	cpc	r19, r24
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	48 07       	cpc	r20, r24
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	58 07       	cpc	r21, r24
     942:	29 f4       	brne	.+10     	; 0x94e <__floatsisf+0x54>
     944:	60 e0       	ldi	r22, 0x00	; 0
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	9f ec       	ldi	r25, 0xCF	; 207
     94c:	30 c0       	rjmp	.+96     	; 0x9ae <__floatsisf+0xb4>
     94e:	ee 24       	eor	r14, r14
     950:	ff 24       	eor	r15, r15
     952:	87 01       	movw	r16, r14
     954:	e2 1a       	sub	r14, r18
     956:	f3 0a       	sbc	r15, r19
     958:	04 0b       	sbc	r16, r20
     95a:	15 0b       	sbc	r17, r21
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__floatsisf+0x68>
     95e:	79 01       	movw	r14, r18
     960:	8a 01       	movw	r16, r20
     962:	8e e1       	ldi	r24, 0x1E	; 30
     964:	c8 2e       	mov	r12, r24
     966:	d1 2c       	mov	r13, r1
     968:	dc 82       	std	Y+4, r13	; 0x04
     96a:	cb 82       	std	Y+3, r12	; 0x03
     96c:	ed 82       	std	Y+5, r14	; 0x05
     96e:	fe 82       	std	Y+6, r15	; 0x06
     970:	0f 83       	std	Y+7, r16	; 0x07
     972:	18 87       	std	Y+8, r17	; 0x08
     974:	c8 01       	movw	r24, r16
     976:	b7 01       	movw	r22, r14
     978:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__clzsi2>
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	18 16       	cp	r1, r24
     980:	19 06       	cpc	r1, r25
     982:	84 f4       	brge	.+32     	; 0x9a4 <__floatsisf+0xaa>
     984:	08 2e       	mov	r0, r24
     986:	04 c0       	rjmp	.+8      	; 0x990 <__floatsisf+0x96>
     988:	ee 0c       	add	r14, r14
     98a:	ff 1c       	adc	r15, r15
     98c:	00 1f       	adc	r16, r16
     98e:	11 1f       	adc	r17, r17
     990:	0a 94       	dec	r0
     992:	d2 f7       	brpl	.-12     	; 0x988 <__floatsisf+0x8e>
     994:	ed 82       	std	Y+5, r14	; 0x05
     996:	fe 82       	std	Y+6, r15	; 0x06
     998:	0f 83       	std	Y+7, r16	; 0x07
     99a:	18 87       	std	Y+8, r17	; 0x08
     99c:	c8 1a       	sub	r12, r24
     99e:	d9 0a       	sbc	r13, r25
     9a0:	dc 82       	std	Y+4, r13	; 0x04
     9a2:	cb 82       	std	Y+3, r12	; 0x03
     9a4:	ba 82       	std	Y+2, r11	; 0x02
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 7e 05 	call	0xafc	; 0xafc <__pack_f>
     9ae:	28 96       	adiw	r28, 0x08	; 8
     9b0:	e9 e0       	ldi	r30, 0x09	; 9
     9b2:	0c 94 47 13 	jmp	0x268e	; 0x268e <__epilogue_restores__+0x12>

000009b6 <__fixsfsi>:
     9b6:	ac e0       	ldi	r26, 0x0C	; 12
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e1 ee       	ldi	r30, 0xE1	; 225
     9bc:	f4 e0       	ldi	r31, 0x04	; 4
     9be:	0c 94 32 13 	jmp	0x2664	; 0x2664 <__prologue_saves__+0x20>
     9c2:	69 83       	std	Y+1, r22	; 0x01
     9c4:	7a 83       	std	Y+2, r23	; 0x02
     9c6:	8b 83       	std	Y+3, r24	; 0x03
     9c8:	9c 83       	std	Y+4, r25	; 0x04
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	be 01       	movw	r22, r28
     9d0:	6b 5f       	subi	r22, 0xFB	; 251
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	0e 94 53 06 	call	0xca6	; 0xca6 <__unpack_f>
     9d8:	8d 81       	ldd	r24, Y+5	; 0x05
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	61 f1       	breq	.+88     	; 0xa36 <__fixsfsi+0x80>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	50 f1       	brcs	.+84     	; 0xa36 <__fixsfsi+0x80>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	21 f4       	brne	.+8      	; 0x9ee <__fixsfsi+0x38>
     9e6:	8e 81       	ldd	r24, Y+6	; 0x06
     9e8:	88 23       	and	r24, r24
     9ea:	51 f1       	breq	.+84     	; 0xa40 <__fixsfsi+0x8a>
     9ec:	2e c0       	rjmp	.+92     	; 0xa4a <__fixsfsi+0x94>
     9ee:	2f 81       	ldd	r18, Y+7	; 0x07
     9f0:	38 85       	ldd	r19, Y+8	; 0x08
     9f2:	37 fd       	sbrc	r19, 7
     9f4:	20 c0       	rjmp	.+64     	; 0xa36 <__fixsfsi+0x80>
     9f6:	6e 81       	ldd	r22, Y+6	; 0x06
     9f8:	2f 31       	cpi	r18, 0x1F	; 31
     9fa:	31 05       	cpc	r19, r1
     9fc:	1c f0       	brlt	.+6      	; 0xa04 <__fixsfsi+0x4e>
     9fe:	66 23       	and	r22, r22
     a00:	f9 f0       	breq	.+62     	; 0xa40 <__fixsfsi+0x8a>
     a02:	23 c0       	rjmp	.+70     	; 0xa4a <__fixsfsi+0x94>
     a04:	8e e1       	ldi	r24, 0x1E	; 30
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	82 1b       	sub	r24, r18
     a0a:	93 0b       	sbc	r25, r19
     a0c:	29 85       	ldd	r18, Y+9	; 0x09
     a0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a10:	4b 85       	ldd	r20, Y+11	; 0x0b
     a12:	5c 85       	ldd	r21, Y+12	; 0x0c
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__fixsfsi+0x68>
     a16:	56 95       	lsr	r21
     a18:	47 95       	ror	r20
     a1a:	37 95       	ror	r19
     a1c:	27 95       	ror	r18
     a1e:	8a 95       	dec	r24
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__fixsfsi+0x60>
     a22:	66 23       	and	r22, r22
     a24:	b1 f0       	breq	.+44     	; 0xa52 <__fixsfsi+0x9c>
     a26:	50 95       	com	r21
     a28:	40 95       	com	r20
     a2a:	30 95       	com	r19
     a2c:	21 95       	neg	r18
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	4f 4f       	sbci	r20, 0xFF	; 255
     a32:	5f 4f       	sbci	r21, 0xFF	; 255
     a34:	0e c0       	rjmp	.+28     	; 0xa52 <__fixsfsi+0x9c>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	09 c0       	rjmp	.+18     	; 0xa52 <__fixsfsi+0x9c>
     a40:	2f ef       	ldi	r18, 0xFF	; 255
     a42:	3f ef       	ldi	r19, 0xFF	; 255
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	5f e7       	ldi	r21, 0x7F	; 127
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <__fixsfsi+0x9c>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	50 e8       	ldi	r21, 0x80	; 128
     a52:	b9 01       	movw	r22, r18
     a54:	ca 01       	movw	r24, r20
     a56:	2c 96       	adiw	r28, 0x0c	; 12
     a58:	e2 e0       	ldi	r30, 0x02	; 2
     a5a:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__epilogue_restores__+0x20>

00000a5e <__clzsi2>:
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	7b 01       	movw	r14, r22
     a68:	8c 01       	movw	r16, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	e8 16       	cp	r14, r24
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	f8 06       	cpc	r15, r24
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	08 07       	cpc	r16, r24
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	18 07       	cpc	r17, r24
     a7a:	88 f4       	brcc	.+34     	; 0xa9e <__clzsi2+0x40>
     a7c:	8f ef       	ldi	r24, 0xFF	; 255
     a7e:	e8 16       	cp	r14, r24
     a80:	f1 04       	cpc	r15, r1
     a82:	01 05       	cpc	r16, r1
     a84:	11 05       	cpc	r17, r1
     a86:	31 f0       	breq	.+12     	; 0xa94 <__clzsi2+0x36>
     a88:	28 f0       	brcs	.+10     	; 0xa94 <__clzsi2+0x36>
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	a0 e0       	ldi	r26, 0x00	; 0
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	17 c0       	rjmp	.+46     	; 0xac2 <__clzsi2+0x64>
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <__clzsi2+0x64>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	e8 16       	cp	r14, r24
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	f8 06       	cpc	r15, r24
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	08 07       	cpc	r16, r24
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	18 07       	cpc	r17, r24
     aae:	28 f0       	brcs	.+10     	; 0xaba <__clzsi2+0x5c>
     ab0:	88 e1       	ldi	r24, 0x18	; 24
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x64>
     aba:	80 e1       	ldi	r24, 0x10	; 16
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	a0 e0       	ldi	r26, 0x00	; 0
     ac0:	b0 e0       	ldi	r27, 0x00	; 0
     ac2:	20 e2       	ldi	r18, 0x20	; 32
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	28 1b       	sub	r18, r24
     acc:	39 0b       	sbc	r19, r25
     ace:	4a 0b       	sbc	r20, r26
     ad0:	5b 0b       	sbc	r21, r27
     ad2:	04 c0       	rjmp	.+8      	; 0xadc <__clzsi2+0x7e>
     ad4:	16 95       	lsr	r17
     ad6:	07 95       	ror	r16
     ad8:	f7 94       	ror	r15
     ada:	e7 94       	ror	r14
     adc:	8a 95       	dec	r24
     ade:	d2 f7       	brpl	.-12     	; 0xad4 <__clzsi2+0x76>
     ae0:	f7 01       	movw	r30, r14
     ae2:	eb 58       	subi	r30, 0x8B	; 139
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	80 81       	ld	r24, Z
     ae8:	28 1b       	sub	r18, r24
     aea:	31 09       	sbc	r19, r1
     aec:	41 09       	sbc	r20, r1
     aee:	51 09       	sbc	r21, r1
     af0:	c9 01       	movw	r24, r18
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	08 95       	ret

00000afc <__pack_f>:
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	fc 01       	movw	r30, r24
     b08:	e4 80       	ldd	r14, Z+4	; 0x04
     b0a:	f5 80       	ldd	r15, Z+5	; 0x05
     b0c:	06 81       	ldd	r16, Z+6	; 0x06
     b0e:	17 81       	ldd	r17, Z+7	; 0x07
     b10:	d1 80       	ldd	r13, Z+1	; 0x01
     b12:	80 81       	ld	r24, Z
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	48 f4       	brcc	.+18     	; 0xb2a <__pack_f+0x2e>
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	a0 e1       	ldi	r26, 0x10	; 16
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e8 2a       	or	r14, r24
     b22:	f9 2a       	or	r15, r25
     b24:	0a 2b       	or	r16, r26
     b26:	1b 2b       	or	r17, r27
     b28:	a5 c0       	rjmp	.+330    	; 0xc74 <__pack_f+0x178>
     b2a:	84 30       	cpi	r24, 0x04	; 4
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__pack_f+0x34>
     b2e:	9f c0       	rjmp	.+318    	; 0xc6e <__pack_f+0x172>
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	21 f4       	brne	.+8      	; 0xb3c <__pack_f+0x40>
     b34:	ee 24       	eor	r14, r14
     b36:	ff 24       	eor	r15, r15
     b38:	87 01       	movw	r16, r14
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <__pack_f+0x4a>
     b3c:	e1 14       	cp	r14, r1
     b3e:	f1 04       	cpc	r15, r1
     b40:	01 05       	cpc	r16, r1
     b42:	11 05       	cpc	r17, r1
     b44:	19 f4       	brne	.+6      	; 0xb4c <__pack_f+0x50>
     b46:	e0 e0       	ldi	r30, 0x00	; 0
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	96 c0       	rjmp	.+300    	; 0xc78 <__pack_f+0x17c>
     b4c:	62 81       	ldd	r22, Z+2	; 0x02
     b4e:	73 81       	ldd	r23, Z+3	; 0x03
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	62 38       	cpi	r22, 0x82	; 130
     b54:	79 07       	cpc	r23, r25
     b56:	0c f0       	brlt	.+2      	; 0xb5a <__pack_f+0x5e>
     b58:	5b c0       	rjmp	.+182    	; 0xc10 <__pack_f+0x114>
     b5a:	22 e8       	ldi	r18, 0x82	; 130
     b5c:	3f ef       	ldi	r19, 0xFF	; 255
     b5e:	26 1b       	sub	r18, r22
     b60:	37 0b       	sbc	r19, r23
     b62:	2a 31       	cpi	r18, 0x1A	; 26
     b64:	31 05       	cpc	r19, r1
     b66:	2c f0       	brlt	.+10     	; 0xb72 <__pack_f+0x76>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	2a c0       	rjmp	.+84     	; 0xbc6 <__pack_f+0xca>
     b72:	b8 01       	movw	r22, r16
     b74:	a7 01       	movw	r20, r14
     b76:	02 2e       	mov	r0, r18
     b78:	04 c0       	rjmp	.+8      	; 0xb82 <__pack_f+0x86>
     b7a:	76 95       	lsr	r23
     b7c:	67 95       	ror	r22
     b7e:	57 95       	ror	r21
     b80:	47 95       	ror	r20
     b82:	0a 94       	dec	r0
     b84:	d2 f7       	brpl	.-12     	; 0xb7a <__pack_f+0x7e>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__pack_f+0x9c>
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	2a 95       	dec	r18
     b9a:	d2 f7       	brpl	.-12     	; 0xb90 <__pack_f+0x94>
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	8e 21       	and	r24, r14
     ba4:	9f 21       	and	r25, r15
     ba6:	a0 23       	and	r26, r16
     ba8:	b1 23       	and	r27, r17
     baa:	00 97       	sbiw	r24, 0x00	; 0
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	21 f0       	breq	.+8      	; 0xbba <__pack_f+0xbe>
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	9a 01       	movw	r18, r20
     bbc:	ab 01       	movw	r20, r22
     bbe:	28 2b       	or	r18, r24
     bc0:	39 2b       	or	r19, r25
     bc2:	4a 2b       	or	r20, r26
     bc4:	5b 2b       	or	r21, r27
     bc6:	da 01       	movw	r26, r20
     bc8:	c9 01       	movw	r24, r18
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0xee>
     bdc:	27 ff       	sbrs	r18, 7
     bde:	09 c0       	rjmp	.+18     	; 0xbf2 <__pack_f+0xf6>
     be0:	20 5c       	subi	r18, 0xC0	; 192
     be2:	3f 4f       	sbci	r19, 0xFF	; 255
     be4:	4f 4f       	sbci	r20, 0xFF	; 255
     be6:	5f 4f       	sbci	r21, 0xFF	; 255
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0xf6>
     bea:	21 5c       	subi	r18, 0xC1	; 193
     bec:	3f 4f       	sbci	r19, 0xFF	; 255
     bee:	4f 4f       	sbci	r20, 0xFF	; 255
     bf0:	5f 4f       	sbci	r21, 0xFF	; 255
     bf2:	e0 e0       	ldi	r30, 0x00	; 0
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	20 30       	cpi	r18, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	3a 07       	cpc	r19, r26
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	4a 07       	cpc	r20, r26
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	5a 07       	cpc	r21, r26
     c04:	10 f0       	brcs	.+4      	; 0xc0a <__pack_f+0x10e>
     c06:	e1 e0       	ldi	r30, 0x01	; 1
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	79 01       	movw	r14, r18
     c0c:	8a 01       	movw	r16, r20
     c0e:	27 c0       	rjmp	.+78     	; 0xc5e <__pack_f+0x162>
     c10:	60 38       	cpi	r22, 0x80	; 128
     c12:	71 05       	cpc	r23, r1
     c14:	64 f5       	brge	.+88     	; 0xc6e <__pack_f+0x172>
     c16:	fb 01       	movw	r30, r22
     c18:	e1 58       	subi	r30, 0x81	; 129
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	d8 01       	movw	r26, r16
     c1e:	c7 01       	movw	r24, r14
     c20:	8f 77       	andi	r24, 0x7F	; 127
     c22:	90 70       	andi	r25, 0x00	; 0
     c24:	a0 70       	andi	r26, 0x00	; 0
     c26:	b0 70       	andi	r27, 0x00	; 0
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	91 05       	cpc	r25, r1
     c2c:	a1 05       	cpc	r26, r1
     c2e:	b1 05       	cpc	r27, r1
     c30:	39 f4       	brne	.+14     	; 0xc40 <__pack_f+0x144>
     c32:	e7 fe       	sbrs	r14, 7
     c34:	0d c0       	rjmp	.+26     	; 0xc50 <__pack_f+0x154>
     c36:	80 e4       	ldi	r24, 0x40	; 64
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	04 c0       	rjmp	.+8      	; 0xc48 <__pack_f+0x14c>
     c40:	8f e3       	ldi	r24, 0x3F	; 63
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e8 0e       	add	r14, r24
     c4a:	f9 1e       	adc	r15, r25
     c4c:	0a 1f       	adc	r16, r26
     c4e:	1b 1f       	adc	r17, r27
     c50:	17 ff       	sbrs	r17, 7
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x162>
     c54:	16 95       	lsr	r17
     c56:	07 95       	ror	r16
     c58:	f7 94       	ror	r15
     c5a:	e7 94       	ror	r14
     c5c:	31 96       	adiw	r30, 0x01	; 1
     c5e:	87 e0       	ldi	r24, 0x07	; 7
     c60:	16 95       	lsr	r17
     c62:	07 95       	ror	r16
     c64:	f7 94       	ror	r15
     c66:	e7 94       	ror	r14
     c68:	8a 95       	dec	r24
     c6a:	d1 f7       	brne	.-12     	; 0xc60 <__pack_f+0x164>
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <__pack_f+0x17c>
     c6e:	ee 24       	eor	r14, r14
     c70:	ff 24       	eor	r15, r15
     c72:	87 01       	movw	r16, r14
     c74:	ef ef       	ldi	r30, 0xFF	; 255
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	6e 2f       	mov	r22, r30
     c7a:	67 95       	ror	r22
     c7c:	66 27       	eor	r22, r22
     c7e:	67 95       	ror	r22
     c80:	90 2f       	mov	r25, r16
     c82:	9f 77       	andi	r25, 0x7F	; 127
     c84:	d7 94       	ror	r13
     c86:	dd 24       	eor	r13, r13
     c88:	d7 94       	ror	r13
     c8a:	8e 2f       	mov	r24, r30
     c8c:	86 95       	lsr	r24
     c8e:	49 2f       	mov	r20, r25
     c90:	46 2b       	or	r20, r22
     c92:	58 2f       	mov	r21, r24
     c94:	5d 29       	or	r21, r13
     c96:	b7 01       	movw	r22, r14
     c98:	ca 01       	movw	r24, r20
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	08 95       	ret

00000ca6 <__unpack_f>:
     ca6:	fc 01       	movw	r30, r24
     ca8:	db 01       	movw	r26, r22
     caa:	40 81       	ld	r20, Z
     cac:	51 81       	ldd	r21, Z+1	; 0x01
     cae:	22 81       	ldd	r18, Z+2	; 0x02
     cb0:	62 2f       	mov	r22, r18
     cb2:	6f 77       	andi	r22, 0x7F	; 127
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	22 1f       	adc	r18, r18
     cb8:	22 27       	eor	r18, r18
     cba:	22 1f       	adc	r18, r18
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	89 2f       	mov	r24, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	82 2b       	or	r24, r18
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	99 1f       	adc	r25, r25
     cca:	99 27       	eor	r25, r25
     ccc:	99 1f       	adc	r25, r25
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	9c 93       	st	X, r25
     cd2:	11 97       	sbiw	r26, 0x01	; 1
     cd4:	21 15       	cp	r18, r1
     cd6:	31 05       	cpc	r19, r1
     cd8:	a9 f5       	brne	.+106    	; 0xd44 <__unpack_f+0x9e>
     cda:	41 15       	cp	r20, r1
     cdc:	51 05       	cpc	r21, r1
     cde:	61 05       	cpc	r22, r1
     ce0:	71 05       	cpc	r23, r1
     ce2:	11 f4       	brne	.+4      	; 0xce8 <__unpack_f+0x42>
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	37 c0       	rjmp	.+110    	; 0xd56 <__unpack_f+0xb0>
     ce8:	82 e8       	ldi	r24, 0x82	; 130
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	13 96       	adiw	r26, 0x03	; 3
     cee:	9c 93       	st	X, r25
     cf0:	8e 93       	st	-X, r24
     cf2:	12 97       	sbiw	r26, 0x02	; 2
     cf4:	9a 01       	movw	r18, r20
     cf6:	ab 01       	movw	r20, r22
     cf8:	67 e0       	ldi	r22, 0x07	; 7
     cfa:	22 0f       	add	r18, r18
     cfc:	33 1f       	adc	r19, r19
     cfe:	44 1f       	adc	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	6a 95       	dec	r22
     d04:	d1 f7       	brne	.-12     	; 0xcfa <__unpack_f+0x54>
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	8c 93       	st	X, r24
     d0a:	0d c0       	rjmp	.+26     	; 0xd26 <__unpack_f+0x80>
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	44 1f       	adc	r20, r20
     d12:	55 1f       	adc	r21, r21
     d14:	12 96       	adiw	r26, 0x02	; 2
     d16:	8d 91       	ld	r24, X+
     d18:	9c 91       	ld	r25, X
     d1a:	13 97       	sbiw	r26, 0x03	; 3
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
     d24:	12 97       	sbiw	r26, 0x02	; 2
     d26:	20 30       	cpi	r18, 0x00	; 0
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	38 07       	cpc	r19, r24
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	48 07       	cpc	r20, r24
     d30:	80 e4       	ldi	r24, 0x40	; 64
     d32:	58 07       	cpc	r21, r24
     d34:	58 f3       	brcs	.-42     	; 0xd0c <__unpack_f+0x66>
     d36:	14 96       	adiw	r26, 0x04	; 4
     d38:	2d 93       	st	X+, r18
     d3a:	3d 93       	st	X+, r19
     d3c:	4d 93       	st	X+, r20
     d3e:	5c 93       	st	X, r21
     d40:	17 97       	sbiw	r26, 0x07	; 7
     d42:	08 95       	ret
     d44:	2f 3f       	cpi	r18, 0xFF	; 255
     d46:	31 05       	cpc	r19, r1
     d48:	79 f4       	brne	.+30     	; 0xd68 <__unpack_f+0xc2>
     d4a:	41 15       	cp	r20, r1
     d4c:	51 05       	cpc	r21, r1
     d4e:	61 05       	cpc	r22, r1
     d50:	71 05       	cpc	r23, r1
     d52:	19 f4       	brne	.+6      	; 0xd5a <__unpack_f+0xb4>
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	8c 93       	st	X, r24
     d58:	08 95       	ret
     d5a:	64 ff       	sbrs	r22, 4
     d5c:	03 c0       	rjmp	.+6      	; 0xd64 <__unpack_f+0xbe>
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	8c 93       	st	X, r24
     d62:	12 c0       	rjmp	.+36     	; 0xd88 <__unpack_f+0xe2>
     d64:	1c 92       	st	X, r1
     d66:	10 c0       	rjmp	.+32     	; 0xd88 <__unpack_f+0xe2>
     d68:	2f 57       	subi	r18, 0x7F	; 127
     d6a:	30 40       	sbci	r19, 0x00	; 0
     d6c:	13 96       	adiw	r26, 0x03	; 3
     d6e:	3c 93       	st	X, r19
     d70:	2e 93       	st	-X, r18
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	83 e0       	ldi	r24, 0x03	; 3
     d76:	8c 93       	st	X, r24
     d78:	87 e0       	ldi	r24, 0x07	; 7
     d7a:	44 0f       	add	r20, r20
     d7c:	55 1f       	adc	r21, r21
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	8a 95       	dec	r24
     d84:	d1 f7       	brne	.-12     	; 0xd7a <__unpack_f+0xd4>
     d86:	70 64       	ori	r23, 0x40	; 64
     d88:	14 96       	adiw	r26, 0x04	; 4
     d8a:	4d 93       	st	X+, r20
     d8c:	5d 93       	st	X+, r21
     d8e:	6d 93       	st	X+, r22
     d90:	7c 93       	st	X, r23
     d92:	17 97       	sbiw	r26, 0x07	; 7
     d94:	08 95       	ret

00000d96 <__fpcmp_parts_f>:
     d96:	1f 93       	push	r17
     d98:	dc 01       	movw	r26, r24
     d9a:	fb 01       	movw	r30, r22
     d9c:	9c 91       	ld	r25, X
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	08 f4       	brcc	.+2      	; 0xda4 <__fpcmp_parts_f+0xe>
     da2:	47 c0       	rjmp	.+142    	; 0xe32 <__fpcmp_parts_f+0x9c>
     da4:	80 81       	ld	r24, Z
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	08 f4       	brcc	.+2      	; 0xdac <__fpcmp_parts_f+0x16>
     daa:	43 c0       	rjmp	.+134    	; 0xe32 <__fpcmp_parts_f+0x9c>
     dac:	94 30       	cpi	r25, 0x04	; 4
     dae:	51 f4       	brne	.+20     	; 0xdc4 <__fpcmp_parts_f+0x2e>
     db0:	11 96       	adiw	r26, 0x01	; 1
     db2:	1c 91       	ld	r17, X
     db4:	84 30       	cpi	r24, 0x04	; 4
     db6:	99 f5       	brne	.+102    	; 0xe1e <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	68 2f       	mov	r22, r24
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	61 1b       	sub	r22, r17
     dc0:	71 09       	sbc	r23, r1
     dc2:	3f c0       	rjmp	.+126    	; 0xe42 <__fpcmp_parts_f+0xac>
     dc4:	84 30       	cpi	r24, 0x04	; 4
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <__fpcmp_parts_f+0x3a>
     dc8:	92 30       	cpi	r25, 0x02	; 2
     dca:	31 f4       	brne	.+12     	; 0xdd8 <__fpcmp_parts_f+0x42>
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	b9 f1       	breq	.+110    	; 0xe3e <__fpcmp_parts_f+0xa8>
     dd0:	81 81       	ldd	r24, Z+1	; 0x01
     dd2:	88 23       	and	r24, r24
     dd4:	89 f1       	breq	.+98     	; 0xe38 <__fpcmp_parts_f+0xa2>
     dd6:	2d c0       	rjmp	.+90     	; 0xe32 <__fpcmp_parts_f+0x9c>
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	1c 91       	ld	r17, X
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	f1 f0       	breq	.+60     	; 0xe1e <__fpcmp_parts_f+0x88>
     de2:	81 81       	ldd	r24, Z+1	; 0x01
     de4:	18 17       	cp	r17, r24
     de6:	d9 f4       	brne	.+54     	; 0xe1e <__fpcmp_parts_f+0x88>
     de8:	12 96       	adiw	r26, 0x02	; 2
     dea:	2d 91       	ld	r18, X+
     dec:	3c 91       	ld	r19, X
     dee:	13 97       	sbiw	r26, 0x03	; 3
     df0:	82 81       	ldd	r24, Z+2	; 0x02
     df2:	93 81       	ldd	r25, Z+3	; 0x03
     df4:	82 17       	cp	r24, r18
     df6:	93 07       	cpc	r25, r19
     df8:	94 f0       	brlt	.+36     	; 0xe1e <__fpcmp_parts_f+0x88>
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	bc f0       	brlt	.+46     	; 0xe2e <__fpcmp_parts_f+0x98>
     e00:	14 96       	adiw	r26, 0x04	; 4
     e02:	8d 91       	ld	r24, X+
     e04:	9d 91       	ld	r25, X+
     e06:	0d 90       	ld	r0, X+
     e08:	bc 91       	ld	r27, X
     e0a:	a0 2d       	mov	r26, r0
     e0c:	24 81       	ldd	r18, Z+4	; 0x04
     e0e:	35 81       	ldd	r19, Z+5	; 0x05
     e10:	46 81       	ldd	r20, Z+6	; 0x06
     e12:	57 81       	ldd	r21, Z+7	; 0x07
     e14:	28 17       	cp	r18, r24
     e16:	39 07       	cpc	r19, r25
     e18:	4a 07       	cpc	r20, r26
     e1a:	5b 07       	cpc	r21, r27
     e1c:	18 f4       	brcc	.+6      	; 0xe24 <__fpcmp_parts_f+0x8e>
     e1e:	11 23       	and	r17, r17
     e20:	41 f0       	breq	.+16     	; 0xe32 <__fpcmp_parts_f+0x9c>
     e22:	0a c0       	rjmp	.+20     	; 0xe38 <__fpcmp_parts_f+0xa2>
     e24:	82 17       	cp	r24, r18
     e26:	93 07       	cpc	r25, r19
     e28:	a4 07       	cpc	r26, r20
     e2a:	b5 07       	cpc	r27, r21
     e2c:	40 f4       	brcc	.+16     	; 0xe3e <__fpcmp_parts_f+0xa8>
     e2e:	11 23       	and	r17, r17
     e30:	19 f0       	breq	.+6      	; 0xe38 <__fpcmp_parts_f+0xa2>
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <__fpcmp_parts_f+0xac>
     e38:	6f ef       	ldi	r22, 0xFF	; 255
     e3a:	7f ef       	ldi	r23, 0xFF	; 255
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <__fpcmp_parts_f+0xac>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	cb 01       	movw	r24, r22
     e44:	1f 91       	pop	r17
     e46:	08 95       	ret

00000e48 <MDIO_voidInit>:
#include"../Include/MCAL/DIO/DIO_Private.h"
#include"../Include/MCAL/DIO/DIO_Configuration.h"


void MDIO_voidInit(void)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
	/*Set all port A pins Direction due to pre-configurations.*/
	DIO_u8_DDRA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,
     e50:	ea e3       	ldi	r30, 0x3A	; 58
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	80 83       	st	Z, r24
							  DIO_u8_PA4_INITIAL_DIRECTION,DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,
							  DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION);

	/*Set all port B pins Direction due to pre-configurations.*/
	DIO_u8_DDRB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,
     e58:	e7 e3       	ldi	r30, 0x37	; 55
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	80 83       	st	Z, r24
							  DIO_u8_PB4_INITIAL_DIRECTION,DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,
							  DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION);

	/*Set all port C pins Direction due to pre-configurations.*/
	DIO_u8_DDRC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,
     e60:	e4 e3       	ldi	r30, 0x34	; 52
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	8f e0       	ldi	r24, 0x0F	; 15
     e66:	80 83       	st	Z, r24
							  DIO_u8_PC4_INITIAL_DIRECTION,DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,
							  DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION);

	/*Set all port D pins Direction due to pre-configurations.*/
	DIO_u8_DDRD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	10 82       	st	Z, r1
							  DIO_u8_PD4_INITIAL_DIRECTION,DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,
							  DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION);


	/*Set all port A pins Values due to pre-configurations.*/
	DIO_u8_PORTA_REG= CONC_BIT(DIO_u8_PA7_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE,
     e6e:	eb e3       	ldi	r30, 0x3B	; 59
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	10 82       	st	Z, r1
							   DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE,
							   DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA0_INITIAL_VALUE);

	/*Set all port B pins Values due to pre-configurations.*/
	DIO_u8_PORTB_REG= CONC_BIT(DIO_u8_PB7_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE,
     e74:	e8 e3       	ldi	r30, 0x38	; 56
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	10 82       	st	Z, r1
							   DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE,
							   DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB0_INITIAL_VALUE);

	/*Set all port C pins Values due to pre-configurations.*/
	DIO_u8_PORTC_REG= CONC_BIT(DIO_u8_PC7_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE,
     e7a:	e5 e3       	ldi	r30, 0x35	; 53
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	80 83       	st	Z, r24
							   DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE,
							   DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC0_INITIAL_VALUE);

	/*Set all port D pins Values due to pre-configurations.*/
	DIO_u8_PORTD_REG= CONC_BIT(DIO_u8_PD7_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE,
     e82:	e2 e3       	ldi	r30, 0x32	; 50
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	10 82       	st	Z, r1
							   DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE,
							   DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD0_INITIAL_VALUE);

}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <MDIO_voidSetPinDIrection>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8PinDirection: DIO_u8_OUTPUT - DIO_u8_INPUT						  */
/******************************************************************************/
void MDIO_voidSetPinDIrection (u8 copy_u8PortID, u8 copy_u8PinID, u8 copy_u8PinDIrection)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	2d 97       	sbiw	r28, 0x0d	; 13
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	6a 83       	std	Y+2, r22	; 0x02
     ea6:	4b 83       	std	Y+3, r20	; 0x03
	/*Inputs Validation*/
	if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA) ||
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	84 30       	cpi	r24, 0x04	; 4
     eac:	08 f0       	brcs	.+2      	; 0xeb0 <MDIO_voidSetPinDIrection+0x22>
     eae:	04 c1       	rjmp	.+520    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	88 30       	cpi	r24, 0x08	; 8
     eb4:	08 f0       	brcs	.+2      	; 0xeb8 <MDIO_voidSetPinDIrection+0x2a>
     eb6:	00 c1       	rjmp	.+512    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortID)
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3d 87       	std	Y+13, r19	; 0x0d
     ec0:	2c 87       	std	Y+12, r18	; 0x0c
     ec2:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec4:	9d 85       	ldd	r25, Y+13	; 0x0d
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	91 05       	cpc	r25, r1
     eca:	09 f4       	brne	.+2      	; 0xece <MDIO_voidSetPinDIrection+0x40>
     ecc:	4f c0       	rjmp	.+158    	; 0xf6c <MDIO_voidSetPinDIrection+0xde>
     ece:	2c 85       	ldd	r18, Y+12	; 0x0c
     ed0:	3d 85       	ldd	r19, Y+13	; 0x0d
     ed2:	22 30       	cpi	r18, 0x02	; 2
     ed4:	31 05       	cpc	r19, r1
     ed6:	2c f4       	brge	.+10     	; 0xee2 <MDIO_voidSetPinDIrection+0x54>
     ed8:	8c 85       	ldd	r24, Y+12	; 0x0c
     eda:	9d 85       	ldd	r25, Y+13	; 0x0d
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	71 f0       	breq	.+28     	; 0xefc <MDIO_voidSetPinDIrection+0x6e>
     ee0:	eb c0       	rjmp	.+470    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
     ee2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ee4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ee6:	22 30       	cpi	r18, 0x02	; 2
     ee8:	31 05       	cpc	r19, r1
     eea:	09 f4       	brne	.+2      	; 0xeee <MDIO_voidSetPinDIrection+0x60>
     eec:	77 c0       	rjmp	.+238    	; 0xfdc <MDIO_voidSetPinDIrection+0x14e>
     eee:	8c 85       	ldd	r24, Y+12	; 0x0c
     ef0:	9d 85       	ldd	r25, Y+13	; 0x0d
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <MDIO_voidSetPinDIrection+0x6c>
     ef8:	a9 c0       	rjmp	.+338    	; 0x104c <MDIO_voidSetPinDIrection+0x1be>
     efa:	de c0       	rjmp	.+444    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
		{
		   case DIO_u8_PORTA:
			   	   	   	   	   switch (copy_u8PinDIrection) //check on direction
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3b 87       	std	Y+11, r19	; 0x0b
     f04:	2a 87       	std	Y+10, r18	; 0x0a
     f06:	8a 85       	ldd	r24, Y+10	; 0x0a
     f08:	9b 85       	ldd	r25, Y+11	; 0x0b
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	d1 f0       	breq	.+52     	; 0xf42 <MDIO_voidSetPinDIrection+0xb4>
     f0e:	2a 85       	ldd	r18, Y+10	; 0x0a
     f10:	3b 85       	ldd	r19, Y+11	; 0x0b
     f12:	21 30       	cpi	r18, 0x01	; 1
     f14:	31 05       	cpc	r19, r1
     f16:	09 f0       	breq	.+2      	; 0xf1a <MDIO_voidSetPinDIrection+0x8c>
     f18:	cf c0       	rjmp	.+414    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
			   	   	   	   	   {
			   	   	   	   	     case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRA_REG,copy_u8PinID);  break; //set pin to output mode
     f1a:	aa e3       	ldi	r26, 0x3A	; 58
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	ea e3       	ldi	r30, 0x3A	; 58
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	48 2f       	mov	r20, r24
     f26:	8a 81       	ldd	r24, Y+2	; 0x02
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	02 2e       	mov	r0, r18
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <MDIO_voidSetPinDIrection+0xaa>
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	0a 94       	dec	r0
     f3a:	e2 f7       	brpl	.-8      	; 0xf34 <MDIO_voidSetPinDIrection+0xa6>
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	bb c0       	rjmp	.+374    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
			   	   	   	   	     case DIO_u8_INPUT:  CLR_BIT(DIO_u8_DDRA_REG,copy_u8PinID);  break; //set pin to input mode
     f42:	aa e3       	ldi	r26, 0x3A	; 58
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ea e3       	ldi	r30, 0x3A	; 58
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <MDIO_voidSetPinDIrection+0xd2>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <MDIO_voidSetPinDIrection+0xce>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	a6 c0       	rjmp	.+332    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
			   	   	   	   	   }//end of switch
			   	   	   	   	   break;
		   case DIO_u8_PORTB:
							   switch (copy_u8PinDIrection) //check on direction
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	39 87       	std	Y+9, r19	; 0x09
     f74:	28 87       	std	Y+8, r18	; 0x08
     f76:	88 85       	ldd	r24, Y+8	; 0x08
     f78:	99 85       	ldd	r25, Y+9	; 0x09
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	d1 f0       	breq	.+52     	; 0xfb2 <MDIO_voidSetPinDIrection+0x124>
     f7e:	28 85       	ldd	r18, Y+8	; 0x08
     f80:	39 85       	ldd	r19, Y+9	; 0x09
     f82:	21 30       	cpi	r18, 0x01	; 1
     f84:	31 05       	cpc	r19, r1
     f86:	09 f0       	breq	.+2      	; 0xf8a <MDIO_voidSetPinDIrection+0xfc>
     f88:	97 c0       	rjmp	.+302    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
							   {
								 case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRB_REG,copy_u8PinID);  break; //set pin to output mode
     f8a:	a7 e3       	ldi	r26, 0x37	; 55
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e7 e3       	ldi	r30, 0x37	; 55
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <MDIO_voidSetPinDIrection+0x11a>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <MDIO_voidSetPinDIrection+0x116>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	83 c0       	rjmp	.+262    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
								 case DIO_u8_INPUT:  CLR_BIT(DIO_u8_DDRB_REG,copy_u8PinID);  break; //set pin to input mode
     fb2:	a7 e3       	ldi	r26, 0x37	; 55
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e7 e3       	ldi	r30, 0x37	; 55
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <MDIO_voidSetPinDIrection+0x142>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <MDIO_voidSetPinDIrection+0x13e>
     fd4:	80 95       	com	r24
     fd6:	84 23       	and	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	6e c0       	rjmp	.+220    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
							   }//end of switch
							   break;
		   case DIO_u8_PORTC:
							   switch (copy_u8PinDIrection) //check on direction
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3f 83       	std	Y+7, r19	; 0x07
     fe4:	2e 83       	std	Y+6, r18	; 0x06
     fe6:	8e 81       	ldd	r24, Y+6	; 0x06
     fe8:	9f 81       	ldd	r25, Y+7	; 0x07
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	d1 f0       	breq	.+52     	; 0x1022 <MDIO_voidSetPinDIrection+0x194>
     fee:	2e 81       	ldd	r18, Y+6	; 0x06
     ff0:	3f 81       	ldd	r19, Y+7	; 0x07
     ff2:	21 30       	cpi	r18, 0x01	; 1
     ff4:	31 05       	cpc	r19, r1
     ff6:	09 f0       	breq	.+2      	; 0xffa <MDIO_voidSetPinDIrection+0x16c>
     ff8:	5f c0       	rjmp	.+190    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
							   {
								 case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRC_REG,copy_u8PinID);  break; //set pin to output mode
     ffa:	a4 e3       	ldi	r26, 0x34	; 52
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e4 e3       	ldi	r30, 0x34	; 52
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8a 81       	ldd	r24, Y+2	; 0x02
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <MDIO_voidSetPinDIrection+0x18a>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <MDIO_voidSetPinDIrection+0x186>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	4b c0       	rjmp	.+150    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
								 case DIO_u8_INPUT:  CLR_BIT(DIO_u8_DDRC_REG,copy_u8PinID);  break; //set pin to input mode
    1022:	a4 e3       	ldi	r26, 0x34	; 52
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e4 e3       	ldi	r30, 0x34	; 52
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <MDIO_voidSetPinDIrection+0x1b2>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <MDIO_voidSetPinDIrection+0x1ae>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	36 c0       	rjmp	.+108    	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
							   }//end of switch
							   break;
		   case DIO_u8_PORTD:
							   switch (copy_u8PinDIrection) //check on direction
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3d 83       	std	Y+5, r19	; 0x05
    1054:	2c 83       	std	Y+4, r18	; 0x04
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	9d 81       	ldd	r25, Y+5	; 0x05
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	c9 f0       	breq	.+50     	; 0x1090 <MDIO_voidSetPinDIrection+0x202>
    105e:	2c 81       	ldd	r18, Y+4	; 0x04
    1060:	3d 81       	ldd	r19, Y+5	; 0x05
    1062:	21 30       	cpi	r18, 0x01	; 1
    1064:	31 05       	cpc	r19, r1
    1066:	41 f5       	brne	.+80     	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
							   {
								 case DIO_u8_OUTPUT: SET_BIT(DIO_u8_DDRD_REG,copy_u8PinID);  break; //set pin to output mode
    1068:	a1 e3       	ldi	r26, 0x31	; 49
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e1 e3       	ldi	r30, 0x31	; 49
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <MDIO_voidSetPinDIrection+0x1f8>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <MDIO_voidSetPinDIrection+0x1f4>
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <MDIO_voidSetPinDIrection+0x22a>
								 case DIO_u8_INPUT:  CLR_BIT(DIO_u8_DDRD_REG,copy_u8PinID);  break; //set pin to input mode
    1090:	a1 e3       	ldi	r26, 0x31	; 49
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e1 e3       	ldi	r30, 0x31	; 49
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <MDIO_voidSetPinDIrection+0x220>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <MDIO_voidSetPinDIrection+0x21c>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
							   }//end of switch
							   break;
		}//end of switch
	}//end of else
}//end of function
    10b8:	2d 96       	adiw	r28, 0x0d	; 13
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <MDIO_voidSetPinValue>:
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/* copy_u8Value: DIO_u8_HIGH - DIO_u8_LOW		    						  */
/******************************************************************************/
void MDIO_voidSetPinValue (u8 copy_u8PortID, u8 copy_u8PinID, u8 copy_u8PinValue)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	2d 97       	sbiw	r28, 0x0d	; 13
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	6a 83       	std	Y+2, r22	; 0x02
    10e2:	4b 83       	std	Y+3, r20	; 0x03
	/*Inputs Validation*/
	if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA) ||
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	84 30       	cpi	r24, 0x04	; 4
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <MDIO_voidSetPinValue+0x22>
    10ea:	04 c1       	rjmp	.+520    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	88 30       	cpi	r24, 0x08	; 8
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <MDIO_voidSetPinValue+0x2a>
    10f2:	00 c1       	rjmp	.+512    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
	{

	}
	else
	{
		switch (copy_u8PortID)
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	3d 87       	std	Y+13, r19	; 0x0d
    10fc:	2c 87       	std	Y+12, r18	; 0x0c
    10fe:	8c 85       	ldd	r24, Y+12	; 0x0c
    1100:	9d 85       	ldd	r25, Y+13	; 0x0d
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <MDIO_voidSetPinValue+0x40>
    1108:	4f c0       	rjmp	.+158    	; 0x11a8 <MDIO_voidSetPinValue+0xde>
    110a:	2c 85       	ldd	r18, Y+12	; 0x0c
    110c:	3d 85       	ldd	r19, Y+13	; 0x0d
    110e:	22 30       	cpi	r18, 0x02	; 2
    1110:	31 05       	cpc	r19, r1
    1112:	2c f4       	brge	.+10     	; 0x111e <MDIO_voidSetPinValue+0x54>
    1114:	8c 85       	ldd	r24, Y+12	; 0x0c
    1116:	9d 85       	ldd	r25, Y+13	; 0x0d
    1118:	00 97       	sbiw	r24, 0x00	; 0
    111a:	71 f0       	breq	.+28     	; 0x1138 <MDIO_voidSetPinValue+0x6e>
    111c:	eb c0       	rjmp	.+470    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
    111e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1120:	3d 85       	ldd	r19, Y+13	; 0x0d
    1122:	22 30       	cpi	r18, 0x02	; 2
    1124:	31 05       	cpc	r19, r1
    1126:	09 f4       	brne	.+2      	; 0x112a <MDIO_voidSetPinValue+0x60>
    1128:	77 c0       	rjmp	.+238    	; 0x1218 <MDIO_voidSetPinValue+0x14e>
    112a:	8c 85       	ldd	r24, Y+12	; 0x0c
    112c:	9d 85       	ldd	r25, Y+13	; 0x0d
    112e:	83 30       	cpi	r24, 0x03	; 3
    1130:	91 05       	cpc	r25, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <MDIO_voidSetPinValue+0x6c>
    1134:	a9 c0       	rjmp	.+338    	; 0x1288 <MDIO_voidSetPinValue+0x1be>
    1136:	de c0       	rjmp	.+444    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
		{
		   case DIO_u8_PORTA:
			   	   	   	   	   switch (copy_u8PinValue) //check on direction
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	3b 87       	std	Y+11, r19	; 0x0b
    1140:	2a 87       	std	Y+10, r18	; 0x0a
    1142:	8a 85       	ldd	r24, Y+10	; 0x0a
    1144:	9b 85       	ldd	r25, Y+11	; 0x0b
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	d1 f0       	breq	.+52     	; 0x117e <MDIO_voidSetPinValue+0xb4>
    114a:	2a 85       	ldd	r18, Y+10	; 0x0a
    114c:	3b 85       	ldd	r19, Y+11	; 0x0b
    114e:	21 30       	cpi	r18, 0x01	; 1
    1150:	31 05       	cpc	r19, r1
    1152:	09 f0       	breq	.+2      	; 0x1156 <MDIO_voidSetPinValue+0x8c>
    1154:	cf c0       	rjmp	.+414    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
			   	   	   	   	   {
			   	   	   	   	     case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTA_REG,copy_u8PinID);  break; //set pin to High mode
    1156:	ab e3       	ldi	r26, 0x3B	; 59
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	eb e3       	ldi	r30, 0x3B	; 59
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 2e       	mov	r0, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <MDIO_voidSetPinValue+0xaa>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	0a 94       	dec	r0
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <MDIO_voidSetPinValue+0xa6>
    1178:	84 2b       	or	r24, r20
    117a:	8c 93       	st	X, r24
    117c:	bb c0       	rjmp	.+374    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
			   	   	   	   	     case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTA_REG,copy_u8PinID);  break; //set pin to Low mode
    117e:	ab e3       	ldi	r26, 0x3B	; 59
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	eb e3       	ldi	r30, 0x3B	; 59
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	48 2f       	mov	r20, r24
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	02 2e       	mov	r0, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <MDIO_voidSetPinValue+0xd2>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	0a 94       	dec	r0
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <MDIO_voidSetPinValue+0xce>
    11a0:	80 95       	com	r24
    11a2:	84 23       	and	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	a6 c0       	rjmp	.+332    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
			   	   	   	   	   }//end of switch
			   	   	   	   	   break;
		   case DIO_u8_PORTB:
							   switch (copy_u8PinValue) //check on direction
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	39 87       	std	Y+9, r19	; 0x09
    11b0:	28 87       	std	Y+8, r18	; 0x08
    11b2:	88 85       	ldd	r24, Y+8	; 0x08
    11b4:	99 85       	ldd	r25, Y+9	; 0x09
    11b6:	00 97       	sbiw	r24, 0x00	; 0
    11b8:	d1 f0       	breq	.+52     	; 0x11ee <MDIO_voidSetPinValue+0x124>
    11ba:	28 85       	ldd	r18, Y+8	; 0x08
    11bc:	39 85       	ldd	r19, Y+9	; 0x09
    11be:	21 30       	cpi	r18, 0x01	; 1
    11c0:	31 05       	cpc	r19, r1
    11c2:	09 f0       	breq	.+2      	; 0x11c6 <MDIO_voidSetPinValue+0xfc>
    11c4:	97 c0       	rjmp	.+302    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
							   {
								 case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTB_REG,copy_u8PinID);  break; //set pin to High mode
    11c6:	a8 e3       	ldi	r26, 0x38	; 56
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e8 e3       	ldi	r30, 0x38	; 56
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <MDIO_voidSetPinValue+0x11a>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <MDIO_voidSetPinValue+0x116>
    11e8:	84 2b       	or	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	83 c0       	rjmp	.+262    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
								 case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTB_REG,copy_u8PinID);  break; //set pin to Low mode
    11ee:	a8 e3       	ldi	r26, 0x38	; 56
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e8 e3       	ldi	r30, 0x38	; 56
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <MDIO_voidSetPinValue+0x142>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <MDIO_voidSetPinValue+0x13e>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	6e c0       	rjmp	.+220    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
							   }//end of switch
							   break;
		   case DIO_u8_PORTC:
							   switch (copy_u8PinValue) //check on direction
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3f 83       	std	Y+7, r19	; 0x07
    1220:	2e 83       	std	Y+6, r18	; 0x06
    1222:	8e 81       	ldd	r24, Y+6	; 0x06
    1224:	9f 81       	ldd	r25, Y+7	; 0x07
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	d1 f0       	breq	.+52     	; 0x125e <MDIO_voidSetPinValue+0x194>
    122a:	2e 81       	ldd	r18, Y+6	; 0x06
    122c:	3f 81       	ldd	r19, Y+7	; 0x07
    122e:	21 30       	cpi	r18, 0x01	; 1
    1230:	31 05       	cpc	r19, r1
    1232:	09 f0       	breq	.+2      	; 0x1236 <MDIO_voidSetPinValue+0x16c>
    1234:	5f c0       	rjmp	.+190    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
							   {
								 case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTC_REG,copy_u8PinID);  break; //set pin to High mode
    1236:	a5 e3       	ldi	r26, 0x35	; 53
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e5 e3       	ldi	r30, 0x35	; 53
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <MDIO_voidSetPinValue+0x18a>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <MDIO_voidSetPinValue+0x186>
    1258:	84 2b       	or	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	4b c0       	rjmp	.+150    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
								 case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTC_REG,copy_u8PinID);  break; //set pin to Low mode
    125e:	a5 e3       	ldi	r26, 0x35	; 53
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <MDIO_voidSetPinValue+0x1b2>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <MDIO_voidSetPinValue+0x1ae>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	36 c0       	rjmp	.+108    	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
							   }//end of switch
							   break;
		   case DIO_u8_PORTD:
							   switch (copy_u8PinValue) //check on direction
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	3d 83       	std	Y+5, r19	; 0x05
    1290:	2c 83       	std	Y+4, r18	; 0x04
    1292:	8c 81       	ldd	r24, Y+4	; 0x04
    1294:	9d 81       	ldd	r25, Y+5	; 0x05
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	c9 f0       	breq	.+50     	; 0x12cc <MDIO_voidSetPinValue+0x202>
    129a:	2c 81       	ldd	r18, Y+4	; 0x04
    129c:	3d 81       	ldd	r19, Y+5	; 0x05
    129e:	21 30       	cpi	r18, 0x01	; 1
    12a0:	31 05       	cpc	r19, r1
    12a2:	41 f5       	brne	.+80     	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
							   {
								 case DIO_u8_HIGH: SET_BIT(DIO_u8_PORTD_REG,copy_u8PinID);  break; //set pin to High mode
    12a4:	a2 e3       	ldi	r26, 0x32	; 50
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e2 e3       	ldi	r30, 0x32	; 50
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <MDIO_voidSetPinValue+0x1f8>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <MDIO_voidSetPinValue+0x1f4>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	14 c0       	rjmp	.+40     	; 0x12f4 <MDIO_voidSetPinValue+0x22a>
								 case DIO_u8_LOW : CLR_BIT(DIO_u8_PORTD_REG,copy_u8PinID);  break; //set pin to Low mode
    12cc:	a2 e3       	ldi	r26, 0x32	; 50
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e2 e3       	ldi	r30, 0x32	; 50
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <MDIO_voidSetPinValue+0x220>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <MDIO_voidSetPinValue+0x21c>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
							   }//end of switch
							   break;
		}//end of switch
	}//end of else
}//end of function
    12f4:	2d 96       	adiw	r28, 0x0d	; 13
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <MDIO_u8GetPinValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PinId: From DIO_u8_PIN0 to DIO_u8_PIN7							  */
/******************************************************************************/
u8 MDIO_u8GetPinValue (u8 copy_u8PortID, u8 copy_u8PinID)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <MDIO_u8GetPinValue+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <MDIO_u8GetPinValue+0x8>
    130e:	0f 92       	push	r0
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	8a 83       	std	Y+2, r24	; 0x02
    1316:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8PinValue=2;
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	89 83       	std	Y+1, r24	; 0x01
	/*Inputs Validation*/
		if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA) ||
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	84 30       	cpi	r24, 0x04	; 4
    1320:	08 f0       	brcs	.+2      	; 0x1324 <MDIO_u8GetPinValue+0x1e>
    1322:	6b c0       	rjmp	.+214    	; 0x13fa <MDIO_u8GetPinValue+0xf4>
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	88 30       	cpi	r24, 0x08	; 8
    1328:	08 f0       	brcs	.+2      	; 0x132c <MDIO_u8GetPinValue+0x26>
    132a:	67 c0       	rjmp	.+206    	; 0x13fa <MDIO_u8GetPinValue+0xf4>
		{

		}
		else
		{
			switch (copy_u8PortID)
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	3d 83       	std	Y+5, r19	; 0x05
    1334:	2c 83       	std	Y+4, r18	; 0x04
    1336:	4c 81       	ldd	r20, Y+4	; 0x04
    1338:	5d 81       	ldd	r21, Y+5	; 0x05
    133a:	41 30       	cpi	r20, 0x01	; 1
    133c:	51 05       	cpc	r21, r1
    133e:	41 f1       	breq	.+80     	; 0x1390 <MDIO_u8GetPinValue+0x8a>
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	91 05       	cpc	r25, r1
    1348:	34 f4       	brge	.+12     	; 0x1356 <MDIO_u8GetPinValue+0x50>
    134a:	2c 81       	ldd	r18, Y+4	; 0x04
    134c:	3d 81       	ldd	r19, Y+5	; 0x05
    134e:	21 15       	cp	r18, r1
    1350:	31 05       	cpc	r19, r1
    1352:	61 f0       	breq	.+24     	; 0x136c <MDIO_u8GetPinValue+0x66>
    1354:	52 c0       	rjmp	.+164    	; 0x13fa <MDIO_u8GetPinValue+0xf4>
    1356:	4c 81       	ldd	r20, Y+4	; 0x04
    1358:	5d 81       	ldd	r21, Y+5	; 0x05
    135a:	42 30       	cpi	r20, 0x02	; 2
    135c:	51 05       	cpc	r21, r1
    135e:	51 f1       	breq	.+84     	; 0x13b4 <MDIO_u8GetPinValue+0xae>
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	b9 f1       	breq	.+110    	; 0x13d8 <MDIO_u8GetPinValue+0xd2>
    136a:	47 c0       	rjmp	.+142    	; 0x13fa <MDIO_u8GetPinValue+0xf4>
			{
				case DIO_u8_PORTA:  local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,copy_u8PinID); break;
    136c:	e9 e3       	ldi	r30, 0x39	; 57
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	88 2f       	mov	r24, r24
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a9 01       	movw	r20, r18
    137e:	02 c0       	rjmp	.+4      	; 0x1384 <MDIO_u8GetPinValue+0x7e>
    1380:	55 95       	asr	r21
    1382:	47 95       	ror	r20
    1384:	8a 95       	dec	r24
    1386:	e2 f7       	brpl	.-8      	; 0x1380 <MDIO_u8GetPinValue+0x7a>
    1388:	ca 01       	movw	r24, r20
    138a:	81 70       	andi	r24, 0x01	; 1
    138c:	89 83       	std	Y+1, r24	; 0x01
    138e:	35 c0       	rjmp	.+106    	; 0x13fa <MDIO_u8GetPinValue+0xf4>
				case DIO_u8_PORTB:  local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,copy_u8PinID); break;
    1390:	e6 e3       	ldi	r30, 0x36	; 54
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	a9 01       	movw	r20, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <MDIO_u8GetPinValue+0xa2>
    13a4:	55 95       	asr	r21
    13a6:	47 95       	ror	r20
    13a8:	8a 95       	dec	r24
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <MDIO_u8GetPinValue+0x9e>
    13ac:	ca 01       	movw	r24, r20
    13ae:	81 70       	andi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	23 c0       	rjmp	.+70     	; 0x13fa <MDIO_u8GetPinValue+0xf4>
				case DIO_u8_PORTC:  local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,copy_u8PinID); break;
    13b4:	e3 e3       	ldi	r30, 0x33	; 51
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	88 2f       	mov	r24, r24
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	a9 01       	movw	r20, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <MDIO_u8GetPinValue+0xc6>
    13c8:	55 95       	asr	r21
    13ca:	47 95       	ror	r20
    13cc:	8a 95       	dec	r24
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <MDIO_u8GetPinValue+0xc2>
    13d0:	ca 01       	movw	r24, r20
    13d2:	81 70       	andi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	11 c0       	rjmp	.+34     	; 0x13fa <MDIO_u8GetPinValue+0xf4>
				case DIO_u8_PORTD:  local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,copy_u8PinID); break;
    13d8:	e0 e3       	ldi	r30, 0x30	; 48
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <MDIO_u8GetPinValue+0xea>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <MDIO_u8GetPinValue+0xe6>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	89 83       	std	Y+1, r24	; 0x01
			}

		}
		return local_u8PinValue;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <MDIO_voidSetPortDirection>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PoryDirection: Set the Direction in hex format 					  */
/******************************************************************************/
void MDIO_voidSetPortDirection (u8 copy_u8PortID, u8 copy_u8PortDirection)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <MDIO_voidSetPortDirection+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <MDIO_voidSetPortDirection+0x8>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	6a 83       	std	Y+2, r22	; 0x02
	/*Inputs Validation*/
		if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA))
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	84 30       	cpi	r24, 0x04	; 4
    1420:	90 f5       	brcc	.+100    	; 0x1486 <MDIO_voidSetPortDirection+0x7a>
		{

		}
		else
		{
			switch (copy_u8PortID)
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	3c 83       	std	Y+4, r19	; 0x04
    142a:	2b 83       	std	Y+3, r18	; 0x03
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	91 05       	cpc	r25, r1
    1434:	d1 f0       	breq	.+52     	; 0x146a <MDIO_voidSetPortDirection+0x5e>
    1436:	2b 81       	ldd	r18, Y+3	; 0x03
    1438:	3c 81       	ldd	r19, Y+4	; 0x04
    143a:	22 30       	cpi	r18, 0x02	; 2
    143c:	31 05       	cpc	r19, r1
    143e:	2c f4       	brge	.+10     	; 0x144a <MDIO_voidSetPortDirection+0x3e>
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	9c 81       	ldd	r25, Y+4	; 0x04
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	61 f0       	breq	.+24     	; 0x1460 <MDIO_voidSetPortDirection+0x54>
    1448:	1e c0       	rjmp	.+60     	; 0x1486 <MDIO_voidSetPortDirection+0x7a>
    144a:	2b 81       	ldd	r18, Y+3	; 0x03
    144c:	3c 81       	ldd	r19, Y+4	; 0x04
    144e:	22 30       	cpi	r18, 0x02	; 2
    1450:	31 05       	cpc	r19, r1
    1452:	81 f0       	breq	.+32     	; 0x1474 <MDIO_voidSetPortDirection+0x68>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	83 30       	cpi	r24, 0x03	; 3
    145a:	91 05       	cpc	r25, r1
    145c:	81 f0       	breq	.+32     	; 0x147e <MDIO_voidSetPortDirection+0x72>
    145e:	13 c0       	rjmp	.+38     	; 0x1486 <MDIO_voidSetPortDirection+0x7a>
			{
				case DIO_u8_PORTA: DIO_u8_DDRA_REG = copy_u8PortDirection ; break;
    1460:	ea e3       	ldi	r30, 0x3A	; 58
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	80 83       	st	Z, r24
    1468:	0e c0       	rjmp	.+28     	; 0x1486 <MDIO_voidSetPortDirection+0x7a>
				case DIO_u8_PORTB: DIO_u8_DDRB_REG = copy_u8PortDirection  ; break;
    146a:	e7 e3       	ldi	r30, 0x37	; 55
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	80 83       	st	Z, r24
    1472:	09 c0       	rjmp	.+18     	; 0x1486 <MDIO_voidSetPortDirection+0x7a>
				case DIO_u8_PORTC: DIO_u8_DDRC_REG = copy_u8PortDirection  ; break;
    1474:	e4 e3       	ldi	r30, 0x34	; 52
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	80 83       	st	Z, r24
    147c:	04 c0       	rjmp	.+8      	; 0x1486 <MDIO_voidSetPortDirection+0x7a>
				case DIO_u8_PORTD: DIO_u8_DDRD_REG = copy_u8PortDirection  ; break;
    147e:	e1 e3       	ldi	r30, 0x31	; 49
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	80 83       	st	Z, r24
			}

		}
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	cf 91       	pop	r28
    1490:	df 91       	pop	r29
    1492:	08 95       	ret

00001494 <MDIO_voidSetPortValue>:
/* Options																	  */
/* copy_PortId: DIO_u8_PORTA - DIO_u8_PORTB - DIO_u8_PORTC - DIO_u8_PORTD     */
/* copy_u8PortValue: Set the Direction in hex format 					  	  */
/******************************************************************************/
void MDIO_voidSetPortValue (u8 copy_u8PortID, u8 copy_u8PortValue)
{
    1494:	df 93       	push	r29
    1496:	cf 93       	push	r28
    1498:	00 d0       	rcall	.+0      	; 0x149a <MDIO_voidSetPortValue+0x6>
    149a:	00 d0       	rcall	.+0      	; 0x149c <MDIO_voidSetPortValue+0x8>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	6a 83       	std	Y+2, r22	; 0x02
	/*Inputs Validation*/
		if ((copy_u8PortID > DIO_u8_PORTD) || (copy_u8PortID < DIO_u8_PORTA))
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	90 f5       	brcc	.+100    	; 0x150e <MDIO_voidSetPortValue+0x7a>
		{

		}
		else
		{
			switch (copy_u8PortID)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3c 83       	std	Y+4, r19	; 0x04
    14b2:	2b 83       	std	Y+3, r18	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <MDIO_voidSetPortValue+0x5e>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <MDIO_voidSetPortValue+0x3e>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	61 f0       	breq	.+24     	; 0x14e8 <MDIO_voidSetPortValue+0x54>
    14d0:	1e c0       	rjmp	.+60     	; 0x150e <MDIO_voidSetPortValue+0x7a>
    14d2:	2b 81       	ldd	r18, Y+3	; 0x03
    14d4:	3c 81       	ldd	r19, Y+4	; 0x04
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	81 f0       	breq	.+32     	; 0x14fc <MDIO_voidSetPortValue+0x68>
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <MDIO_voidSetPortValue+0x72>
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <MDIO_voidSetPortValue+0x7a>
			{
				case DIO_u8_PORTA: DIO_u8_PORTA_REG = copy_u8PortValue ; break;
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	80 83       	st	Z, r24
    14f0:	0e c0       	rjmp	.+28     	; 0x150e <MDIO_voidSetPortValue+0x7a>
				case DIO_u8_PORTB: DIO_u8_PORTB_REG = copy_u8PortValue  ; break;
    14f2:	e8 e3       	ldi	r30, 0x38	; 56
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	80 83       	st	Z, r24
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <MDIO_voidSetPortValue+0x7a>
				case DIO_u8_PORTC: DIO_u8_PORTC_REG = copy_u8PortValue  ; break;
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	80 83       	st	Z, r24
    1504:	04 c0       	rjmp	.+8      	; 0x150e <MDIO_voidSetPortValue+0x7a>
				case DIO_u8_PORTD: DIO_u8_PORTD_REG = copy_u8PortValue  ; break;
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	80 83       	st	Z, r24
			}

		}
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <HKEYPAD_u8_GetPressedKey>:

u8 KEYPAD_Au8RowsPins [KEYPAD_u8_ROW_NUM] = KEYPAD_Au8ROWS;
u8 KEYPAD_Au8ColsPins [KEYPAD_u8_COL_NUM] = KEYPAD_Au8COLS;

u8 HKEYPAD_u8_GetPressedKey (void)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	63 97       	sbiw	r28, 0x13	; 19
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
	/* Variables Definitions for Loop Counters, Read pin Values, Get pressed key Value, and a flag for breaking the loop */
	u8 local_u8RowCounter, local_u8ColCounter, local_u8PinValue, local_u8KeyValue = KEYPAD_u8_KEY_NOT_PRESSED,
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	88 8b       	std	Y+16, r24	; 0x10
			local_u8Flag = KEYPAD_u8_FLAG_DOWN;
    1534:	1f 86       	std	Y+15, r1	; 0x0f
	/* for loop to activate Rows and check on columns */
	for (local_u8RowCounter = 0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++)
    1536:	1b 8a       	std	Y+19, r1	; 0x13
    1538:	da c0       	rjmp	.+436    	; 0x16ee <HKEYPAD_u8_GetPressedKey+0x1d2>
	{
		MDIO_voidSetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter], DIO_u8_LOW); //Activate Row by setting 0 at output
    153a:	8b 89       	ldd	r24, Y+19	; 0x13
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	fc 01       	movw	r30, r24
    1542:	eb 57       	subi	r30, 0x7B	; 123
    1544:	fe 4f       	sbci	r31, 0xFE	; 254
    1546:	90 81       	ld	r25, Z
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	69 2f       	mov	r22, r25
    154c:	40 e0       	ldi	r20, 0x00	; 0
    154e:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>

		/*For Loop to check on Columns*/
		for (local_u8ColCounter=0; local_u8ColCounter < KEYPAD_u8_COL_NUM; local_u8ColCounter++)
    1552:	1a 8a       	std	Y+18, r1	; 0x12
    1554:	b6 c0       	rjmp	.+364    	; 0x16c2 <HKEYPAD_u8_GetPressedKey+0x1a6>
		{
			local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
    1556:	8a 89       	ldd	r24, Y+18	; 0x12
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	fc 01       	movw	r30, r24
    155e:	e7 57       	subi	r30, 0x77	; 119
    1560:	fe 4f       	sbci	r31, 0xFE	; 254
    1562:	90 81       	ld	r25, Z
    1564:	82 e0       	ldi	r24, 0x02	; 2
    1566:	69 2f       	mov	r22, r25
    1568:	0e 94 83 09 	call	0x1306	; 0x1306 <MDIO_u8GetPinValue>
    156c:	89 8b       	std	Y+17, r24	; 0x11

			if (local_u8PinValue == DIO_u8_LOW) //Check on column Value (if true, switch is pressed)
    156e:	89 89       	ldd	r24, Y+17	; 0x11
    1570:	88 23       	and	r24, r24
    1572:	09 f0       	breq	.+2      	; 0x1576 <HKEYPAD_u8_GetPressedKey+0x5a>
    1574:	a3 c0       	rjmp	.+326    	; 0x16bc <HKEYPAD_u8_GetPressedKey+0x1a0>
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	a0 ea       	ldi	r26, 0xA0	; 160
    157c:	b1 e4       	ldi	r27, 0x41	; 65
    157e:	8b 87       	std	Y+11, r24	; 0x0b
    1580:	9c 87       	std	Y+12, r25	; 0x0c
    1582:	ad 87       	std	Y+13, r26	; 0x0d
    1584:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1586:	6b 85       	ldd	r22, Y+11	; 0x0b
    1588:	7c 85       	ldd	r23, Y+12	; 0x0c
    158a:	8d 85       	ldd	r24, Y+13	; 0x0d
    158c:	9e 85       	ldd	r25, Y+14	; 0x0e
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	4a ef       	ldi	r20, 0xFA	; 250
    1594:	54 e4       	ldi	r21, 0x44	; 68
    1596:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	8f 83       	std	Y+7, r24	; 0x07
    15a0:	98 87       	std	Y+8, r25	; 0x08
    15a2:	a9 87       	std	Y+9, r26	; 0x09
    15a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15a6:	6f 81       	ldd	r22, Y+7	; 0x07
    15a8:	78 85       	ldd	r23, Y+8	; 0x08
    15aa:	89 85       	ldd	r24, Y+9	; 0x09
    15ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	40 e8       	ldi	r20, 0x80	; 128
    15b4:	5f e3       	ldi	r21, 0x3F	; 63
    15b6:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    15ba:	88 23       	and	r24, r24
    15bc:	2c f4       	brge	.+10     	; 0x15c8 <HKEYPAD_u8_GetPressedKey+0xac>
		__ticks = 1;
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9e 83       	std	Y+6, r25	; 0x06
    15c4:	8d 83       	std	Y+5, r24	; 0x05
    15c6:	3f c0       	rjmp	.+126    	; 0x1646 <HKEYPAD_u8_GetPressedKey+0x12a>
	else if (__tmp > 65535)
    15c8:	6f 81       	ldd	r22, Y+7	; 0x07
    15ca:	78 85       	ldd	r23, Y+8	; 0x08
    15cc:	89 85       	ldd	r24, Y+9	; 0x09
    15ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	3f ef       	ldi	r19, 0xFF	; 255
    15d4:	4f e7       	ldi	r20, 0x7F	; 127
    15d6:	57 e4       	ldi	r21, 0x47	; 71
    15d8:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    15dc:	18 16       	cp	r1, r24
    15de:	4c f5       	brge	.+82     	; 0x1632 <HKEYPAD_u8_GetPressedKey+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e2       	ldi	r20, 0x20	; 32
    15ee:	51 e4       	ldi	r21, 0x41	; 65
    15f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	bc 01       	movw	r22, r24
    15fa:	cd 01       	movw	r24, r26
    15fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
    1608:	0f c0       	rjmp	.+30     	; 0x1628 <HKEYPAD_u8_GetPressedKey+0x10c>
    160a:	88 ec       	ldi	r24, 0xC8	; 200
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	9c 83       	std	Y+4, r25	; 0x04
    1610:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	9c 81       	ldd	r25, Y+4	; 0x04
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <HKEYPAD_u8_GetPressedKey+0xfa>
    161a:	9c 83       	std	Y+4, r25	; 0x04
    161c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	69 f7       	brne	.-38     	; 0x160a <HKEYPAD_u8_GetPressedKey+0xee>
    1630:	14 c0       	rjmp	.+40     	; 0x165a <HKEYPAD_u8_GetPressedKey+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1632:	6f 81       	ldd	r22, Y+7	; 0x07
    1634:	78 85       	ldd	r23, Y+8	; 0x08
    1636:	89 85       	ldd	r24, Y+9	; 0x09
    1638:	9a 85       	ldd	r25, Y+10	; 0x0a
    163a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	9e 83       	std	Y+6, r25	; 0x06
    1644:	8d 83       	std	Y+5, r24	; 0x05
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <HKEYPAD_u8_GetPressedKey+0x136>
    1656:	9a 83       	std	Y+2, r25	; 0x02
    1658:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms (KEYPAD_u8_DEBOUNCING_MS);
				local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
    165a:	8a 89       	ldd	r24, Y+18	; 0x12
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	fc 01       	movw	r30, r24
    1662:	e7 57       	subi	r30, 0x77	; 119
    1664:	fe 4f       	sbci	r31, 0xFE	; 254
    1666:	90 81       	ld	r25, Z
    1668:	82 e0       	ldi	r24, 0x02	; 2
    166a:	69 2f       	mov	r22, r25
    166c:	0e 94 83 09 	call	0x1306	; 0x1306 <MDIO_u8GetPinValue>
    1670:	89 8b       	std	Y+17, r24	; 0x11
    1672:	0c c0       	rjmp	.+24     	; 0x168c <HKEYPAD_u8_GetPressedKey+0x170>
				while (local_u8PinValue == DIO_u8_LOW)
				{
					local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
    1674:	8a 89       	ldd	r24, Y+18	; 0x12
    1676:	88 2f       	mov	r24, r24
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	fc 01       	movw	r30, r24
    167c:	e7 57       	subi	r30, 0x77	; 119
    167e:	fe 4f       	sbci	r31, 0xFE	; 254
    1680:	90 81       	ld	r25, Z
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	69 2f       	mov	r22, r25
    1686:	0e 94 83 09 	call	0x1306	; 0x1306 <MDIO_u8GetPinValue>
    168a:	89 8b       	std	Y+17, r24	; 0x11

			if (local_u8PinValue == DIO_u8_LOW) //Check on column Value (if true, switch is pressed)
			{
				_delay_ms (KEYPAD_u8_DEBOUNCING_MS);
				local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
				while (local_u8PinValue == DIO_u8_LOW)
    168c:	89 89       	ldd	r24, Y+17	; 0x11
    168e:	88 23       	and	r24, r24
    1690:	89 f3       	breq	.-30     	; 0x1674 <HKEYPAD_u8_GetPressedKey+0x158>
				{
					local_u8PinValue = MDIO_u8GetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8ColsPins[local_u8ColCounter]); //Read Column Value
				}
				local_u8KeyValue = KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter]; //Get Value for pressed Key
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	48 2f       	mov	r20, r24
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	8a 89       	ldd	r24, Y+18	; 0x12
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	ca 01       	movw	r24, r20
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	82 0f       	add	r24, r18
    16aa:	93 1f       	adc	r25, r19
    16ac:	fc 01       	movw	r30, r24
    16ae:	eb 58       	subi	r30, 0x8B	; 139
    16b0:	fe 4f       	sbci	r31, 0xFE	; 254
    16b2:	80 81       	ld	r24, Z
    16b4:	88 8b       	std	Y+16, r24	; 0x10
				local_u8Flag =KEYPAD_u8_FLAG_UP; // Raise Flag up
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	8f 87       	std	Y+15, r24	; 0x0f
    16ba:	07 c0       	rjmp	.+14     	; 0x16ca <HKEYPAD_u8_GetPressedKey+0x1ae>
	for (local_u8RowCounter = 0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++)
	{
		MDIO_voidSetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter], DIO_u8_LOW); //Activate Row by setting 0 at output

		/*For Loop to check on Columns*/
		for (local_u8ColCounter=0; local_u8ColCounter < KEYPAD_u8_COL_NUM; local_u8ColCounter++)
    16bc:	8a 89       	ldd	r24, Y+18	; 0x12
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	8a 8b       	std	Y+18, r24	; 0x12
    16c2:	8a 89       	ldd	r24, Y+18	; 0x12
    16c4:	84 30       	cpi	r24, 0x04	; 4
    16c6:	08 f4       	brcc	.+2      	; 0x16ca <HKEYPAD_u8_GetPressedKey+0x1ae>
    16c8:	46 cf       	rjmp	.-372    	; 0x1556 <HKEYPAD_u8_GetPressedKey+0x3a>
				local_u8Flag =KEYPAD_u8_FLAG_UP; // Raise Flag up
				break;  //break from Column Loop After found pressed Key
			}
		}//end of Column Loop

		MDIO_voidSetPinValue(KEYPAD_u8_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter], DIO_u8_HIGH); //Deactivate Row by setting 0 at output
    16ca:	8b 89       	ldd	r24, Y+19	; 0x13
    16cc:	88 2f       	mov	r24, r24
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	fc 01       	movw	r30, r24
    16d2:	eb 57       	subi	r30, 0x7B	; 123
    16d4:	fe 4f       	sbci	r31, 0xFE	; 254
    16d6:	90 81       	ld	r25, Z
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	69 2f       	mov	r22, r25
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>
		if (local_u8Flag == KEYPAD_u8_FLAG_UP) //check on flag to break and return pressed key value
    16e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	39 f0       	breq	.+14     	; 0x16f6 <HKEYPAD_u8_GetPressedKey+0x1da>
{
	/* Variables Definitions for Loop Counters, Read pin Values, Get pressed key Value, and a flag for breaking the loop */
	u8 local_u8RowCounter, local_u8ColCounter, local_u8PinValue, local_u8KeyValue = KEYPAD_u8_KEY_NOT_PRESSED,
			local_u8Flag = KEYPAD_u8_FLAG_DOWN;
	/* for loop to activate Rows and check on columns */
	for (local_u8RowCounter = 0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++)
    16e8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ea:	8f 5f       	subi	r24, 0xFF	; 255
    16ec:	8b 8b       	std	Y+19, r24	; 0x13
    16ee:	8b 89       	ldd	r24, Y+19	; 0x13
    16f0:	84 30       	cpi	r24, 0x04	; 4
    16f2:	08 f4       	brcc	.+2      	; 0x16f6 <HKEYPAD_u8_GetPressedKey+0x1da>
    16f4:	22 cf       	rjmp	.-444    	; 0x153a <HKEYPAD_u8_GetPressedKey+0x1e>
		{
			break; //break from Row Loop After found pressed Key
		}
	}//end of Row for Loop

return local_u8KeyValue; //return for pressed key value
    16f6:	88 89       	ldd	r24, Y+16	; 0x10
}
    16f8:	63 96       	adiw	r28, 0x13	; 19
    16fa:	0f b6       	in	r0, 0x3f	; 63
    16fc:	f8 94       	cli
    16fe:	de bf       	out	0x3e, r29	; 62
    1700:	0f be       	out	0x3f, r0	; 63
    1702:	cd bf       	out	0x3d, r28	; 61
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <CHAR_2_Decmal>:
/* Function  : Convert chachter To Decimal					*/
/* Parameter : Array Of Charachter							*/
/* return 	 : Float Number									*/
/************************************************************/
f32 CHAR_2_Decmal(u8 *Copy_u8_ptr)
{// Open Bracket of function
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	29 97       	sbiw	r28, 0x09	; 9
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	99 87       	std	Y+9, r25	; 0x09
    1728:	88 87       	std	Y+8, r24	; 0x08
	f32 LOCAL_s32_val=0;// Float variable to stor returne value
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a0 e0       	ldi	r26, 0x00	; 0
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	8c 83       	std	Y+4, r24	; 0x04
    1734:	9d 83       	std	Y+5, r25	; 0x05
    1736:	ae 83       	std	Y+6, r26	; 0x06
    1738:	bf 83       	std	Y+7, r27	; 0x07
	u16 Local_u16_Co=0;// integer variable as counter
    173a:	1b 82       	std	Y+3, r1	; 0x03
    173c:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOCAL_u8_f=KEYPAD_u8_FLAG_DOWN;// char variable as Flag
    173e:	19 82       	std	Y+1, r1	; 0x01
    1740:	44 c0       	rjmp	.+136    	; 0x17ca <CHAR_2_Decmal+0xc0>
	while(Copy_u8_ptr[Local_u16_Co]!=NULL)//Loop on array
	{//open bracket of while loop
		if(Copy_u8_ptr[Local_u16_Co]=='-')// Cheack if array element is '-'
    1742:	28 85       	ldd	r18, Y+8	; 0x08
    1744:	39 85       	ldd	r19, Y+9	; 0x09
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	9b 81       	ldd	r25, Y+3	; 0x03
    174a:	f9 01       	movw	r30, r18
    174c:	e8 0f       	add	r30, r24
    174e:	f9 1f       	adc	r31, r25
    1750:	80 81       	ld	r24, Z
    1752:	8d 32       	cpi	r24, 0x2D	; 45
    1754:	41 f4       	brne	.+16     	; 0x1766 <CHAR_2_Decmal+0x5c>
		{//open bracket of signe '-' conditation
			LOCAL_u8_f=KEYPAD_u8_FLAG_UP; // Enable Flag
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	89 83       	std	Y+1, r24	; 0x01
			Local_u16_Co++;// incerement Counter by 1
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	9b 81       	ldd	r25, Y+3	; 0x03
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	9b 83       	std	Y+3, r25	; 0x03
    1762:	8a 83       	std	Y+2, r24	; 0x02
    1764:	32 c0       	rjmp	.+100    	; 0x17ca <CHAR_2_Decmal+0xc0>
			continue;//jumb this case
		}//Close bracket of signe '-' conditation
		LOCAL_s32_val=LOCAL_s32_val*10+(Copy_u8_ptr[Local_u16_Co]-'0');/*Cnovert KEY Value FRom Character to decimal */
    1766:	6c 81       	ldd	r22, Y+4	; 0x04
    1768:	7d 81       	ldd	r23, Y+5	; 0x05
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
    176c:	9f 81       	ldd	r25, Y+7	; 0x07
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e2       	ldi	r20, 0x20	; 32
    1774:	51 e4       	ldi	r21, 0x41	; 65
    1776:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	7c 01       	movw	r14, r24
    1780:	8d 01       	movw	r16, r26
    1782:	28 85       	ldd	r18, Y+8	; 0x08
    1784:	39 85       	ldd	r19, Y+9	; 0x09
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	9b 81       	ldd	r25, Y+3	; 0x03
    178a:	f9 01       	movw	r30, r18
    178c:	e8 0f       	add	r30, r24
    178e:	f9 1f       	adc	r31, r25
    1790:	80 81       	ld	r24, Z
    1792:	88 2f       	mov	r24, r24
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	c0 97       	sbiw	r24, 0x30	; 48
    1798:	aa 27       	eor	r26, r26
    179a:	97 fd       	sbrc	r25, 7
    179c:	a0 95       	com	r26
    179e:	ba 2f       	mov	r27, r26
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__floatsisf>
    17a8:	9b 01       	movw	r18, r22
    17aa:	ac 01       	movw	r20, r24
    17ac:	c8 01       	movw	r24, r16
    17ae:	b7 01       	movw	r22, r14
    17b0:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	8c 83       	std	Y+4, r24	; 0x04
    17ba:	9d 83       	std	Y+5, r25	; 0x05
    17bc:	ae 83       	std	Y+6, r26	; 0x06
    17be:	bf 83       	std	Y+7, r27	; 0x07
		Local_u16_Co++;
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	9b 83       	std	Y+3, r25	; 0x03
    17c8:	8a 83       	std	Y+2, r24	; 0x02
f32 CHAR_2_Decmal(u8 *Copy_u8_ptr)
{// Open Bracket of function
	f32 LOCAL_s32_val=0;// Float variable to stor returne value
	u16 Local_u16_Co=0;// integer variable as counter
	u8 LOCAL_u8_f=KEYPAD_u8_FLAG_DOWN;// char variable as Flag
	while(Copy_u8_ptr[Local_u16_Co]!=NULL)//Loop on array
    17ca:	28 85       	ldd	r18, Y+8	; 0x08
    17cc:	39 85       	ldd	r19, Y+9	; 0x09
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	9b 81       	ldd	r25, Y+3	; 0x03
    17d2:	f9 01       	movw	r30, r18
    17d4:	e8 0f       	add	r30, r24
    17d6:	f9 1f       	adc	r31, r25
    17d8:	80 81       	ld	r24, Z
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <CHAR_2_Decmal+0xda>
    17e2:	af cf       	rjmp	.-162    	; 0x1742 <CHAR_2_Decmal+0x38>
		}//Close bracket of signe '-' conditation
		LOCAL_s32_val=LOCAL_s32_val*10+(Copy_u8_ptr[Local_u16_Co]-'0');/*Cnovert KEY Value FRom Character to decimal */
		Local_u16_Co++;
	}//Close bracket of while loop

	if(LOCAL_u8_f)//Cheack if Flag is enable
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	88 23       	and	r24, r24
    17e8:	51 f0       	breq	.+20     	; 0x17fe <CHAR_2_Decmal+0xf4>
	{// Open Brackets of Enable flag Condition
		LOCAL_s32_val*=-1;	// Multiplay value by -1
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	ae 81       	ldd	r26, Y+6	; 0x06
    17f0:	bf 81       	ldd	r27, Y+7	; 0x07
    17f2:	b0 58       	subi	r27, 0x80	; 128
    17f4:	8c 83       	std	Y+4, r24	; 0x04
    17f6:	9d 83       	std	Y+5, r25	; 0x05
    17f8:	ae 83       	std	Y+6, r26	; 0x06
    17fa:	bf 83       	std	Y+7, r27	; 0x07
		LOCAL_u8_f=KEYPAD_u8_FLAG_DOWN;// disEnable Flag
    17fc:	19 82       	std	Y+1, r1	; 0x01
	}// Open Brackets of Enable flag Condition

	return LOCAL_s32_val;	//return integer value
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	ae 81       	ldd	r26, Y+6	; 0x06
    1804:	bf 81       	ldd	r27, Y+7	; 0x07

}// Close Bracket of function
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	29 96       	adiw	r28, 0x09	; 9
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	08 95       	ret

00001824 <Clear_array>:
/* Function  : Clear Array									*/
/* Parameter : Array Of Charachter							*/
/* return 	 : No											*/
/************************************************************/
void Clear_array(u8 *ptr)
{// Open Bracket of function
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <Clear_array+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <Clear_array+0x8>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	9c 83       	std	Y+4, r25	; 0x04
    1832:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u8_Co=0;// integer variable as counter
    1834:	1a 82       	std	Y+2, r1	; 0x02
    1836:	19 82       	std	Y+1, r1	; 0x01
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <Clear_array+0x30>
	while(ptr[Local_u8_Co]!=NULL)//Loop on array
	{//open bracket of while loop
		ptr[Local_u8_Co]=NULL;	// assign array element to NULL
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	9a 81       	ldd	r25, Y+2	; 0x02
    1842:	f9 01       	movw	r30, r18
    1844:	e8 0f       	add	r30, r24
    1846:	f9 1f       	adc	r31, r25
    1848:	10 82       	st	Z, r1
		Local_u8_Co++;// incerement counter by 1
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	01 96       	adiw	r24, 0x01	; 1
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
/* return 	 : No											*/
/************************************************************/
void Clear_array(u8 *ptr)
{// Open Bracket of function
	u16 Local_u8_Co=0;// integer variable as counter
	while(ptr[Local_u8_Co]!=NULL)//Loop on array
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	9a 81       	ldd	r25, Y+2	; 0x02
    185c:	f9 01       	movw	r30, r18
    185e:	e8 0f       	add	r30, r24
    1860:	f9 1f       	adc	r31, r25
    1862:	80 81       	ld	r24, Z
    1864:	88 2f       	mov	r24, r24
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	39 f7       	brne	.-50     	; 0x183a <Clear_array+0x16>
	{//open bracket of while loop
		ptr[Local_u8_Co]=NULL;	// assign array element to NULL
		Local_u8_Co++;// incerement counter by 1
	}//Close bracket of while loop
}// Close Bracket of function
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <KEYPAD_u32_Calculator>:
/* Function  : Take values and apply operation on them		*/
/* Parameter : No											*/
/* return 	 : No											*/
/************************************************************/
void KEYPAD_u32_Calculator()
{// Open Brackets of KEYPAD_u32_Calculator() Function
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	68 97       	sbiw	r28, 0x18	; 24
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
/* local_u8KeypadValue: To store The The that returned from KEYPAD			   	   			 	 */
/* LOCAL_u8_Operation : To store The Operation Value						   	   				 */
/* Local_u8_KEYValues : Array to stor char value to passing ir as a parameter to CHAR_2_Decmal() */
/* Lcal_u16_Counter	  : Counter To Loop on array							   	   			 	 */
/*************************************************************************************************/
	f32 LOCAL_f32_values[2], LOCAL_f32_Result=0;
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 e0       	ldi	r26, 0x00	; 0
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	8e 83       	std	Y+6, r24	; 0x06
    1898:	9f 83       	std	Y+7, r25	; 0x07
    189a:	a8 87       	std	Y+8, r26	; 0x08
    189c:	b9 87       	std	Y+9, r27	; 0x09
	u16 Lcal_u16_Counter=0;
    189e:	1d 82       	std	Y+5, r1	; 0x05
    18a0:	1c 82       	std	Y+4, r1	; 0x04
	u8 LOCAL_u8_Operation,local_u8KeypadValue=255,LOCAL_u8_f=KEYPAD_u8_FLAG_DOWN,Local_u8_KEYValues[5]={NULL};
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	8a 83       	std	Y+2, r24	; 0x02
    18a6:	19 82       	std	Y+1, r1	; 0x01
    18a8:	85 e0       	ldi	r24, 0x05	; 5
    18aa:	fe 01       	movw	r30, r28
    18ac:	72 96       	adiw	r30, 0x12	; 18
    18ae:	df 01       	movw	r26, r30
    18b0:	28 2f       	mov	r18, r24
    18b2:	1d 92       	st	X+, r1
    18b4:	2a 95       	dec	r18
    18b6:	e9 f7       	brne	.-6      	; 0x18b2 <KEYPAD_u32_Calculator+0x38>
	MDIO_voidInit();
    18b8:	0e 94 24 07 	call	0xe48	; 0xe48 <MDIO_voidInit>
	HLCD_voidInit();
    18bc:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <HLCD_voidInit>

	while (1)																												    /*LOOP To make infitiy INPut		         */
	{// Open Brackets of While LOOP
		local_u8KeypadValue = HKEYPAD_u8_GetPressedKey();																	    /* Get KEYPD Value 					         */
    18c0:	0e 94 8e 0a 	call	0x151c	; 0x151c <HKEYPAD_u8_GetPressedKey>
    18c4:	8a 83       	std	Y+2, r24	; 0x02
		if (local_u8KeypadValue != KEYPAD_u8_KEY_NOT_PRESSED)																    /* Check if KEYPAD Is UnPressed	             */
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	8f 3f       	cpi	r24, 0xFF	; 255
    18ca:	d1 f3       	breq	.-12     	; 0x18c0 <KEYPAD_u32_Calculator+0x46>
			{// Open Brackets of UnPressed Condition
				HLCD_voidSendData(local_u8KeypadValue);																			/* Display Key Value On SCreen	             */
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <HLCD_voidSendData>
				if(local_u8KeypadValue=='c')																					/* Check if Clear Butom Is Pressed	         */
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	83 36       	cpi	r24, 0x63	; 99
    18d6:	71 f4       	brne	.+28     	; 0x18f4 <KEYPAD_u32_Calculator+0x7a>
				{// Open Brackets of Clear Condition
					HLCD_voidClearDisplay();																					/* Calling Clear Screen Function	         */
    18d8:	0e 94 9c 10 	call	0x2138	; 0x2138 <HLCD_voidClearDisplay>
					Clear_array(LOCAL_f32_values);																				/* Make LOCAL_f32_values array Empty         */
    18dc:	ce 01       	movw	r24, r28
    18de:	0a 96       	adiw	r24, 0x0a	; 10
    18e0:	0e 94 12 0c 	call	0x1824	; 0x1824 <Clear_array>
					Clear_array(Local_u8_KEYValues);																			/* Make Local_u8_KEYValues Empty	         */
    18e4:	ce 01       	movw	r24, r28
    18e6:	42 96       	adiw	r24, 0x12	; 18
    18e8:	0e 94 12 0c 	call	0x1824	; 0x1824 <Clear_array>
					LOCAL_u8_f=KEYPAD_u8_FLAG_DOWN;																				/* Disable Falg						         */
    18ec:	19 82       	std	Y+1, r1	; 0x01
					Lcal_u16_Counter=0;																							/* assign counter to 0				         */
    18ee:	1d 82       	std	Y+5, r1	; 0x05
    18f0:	1c 82       	std	Y+4, r1	; 0x04
    18f2:	e6 cf       	rjmp	.-52     	; 0x18c0 <KEYPAD_u32_Calculator+0x46>
				}//Close Brackets of Clear Condition

			else if(local_u8KeypadValue=='+'||local_u8KeypadValue=='-'||local_u8KeypadValue=='*'||local_u8KeypadValue=='/')		/* Check if Key value is operation	         */
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	8b 32       	cpi	r24, 0x2B	; 43
    18f8:	49 f0       	breq	.+18     	; 0x190c <KEYPAD_u32_Calculator+0x92>
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	8d 32       	cpi	r24, 0x2D	; 45
    18fe:	31 f0       	breq	.+12     	; 0x190c <KEYPAD_u32_Calculator+0x92>
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	8a 32       	cpi	r24, 0x2A	; 42
    1904:	19 f0       	breq	.+6      	; 0x190c <KEYPAD_u32_Calculator+0x92>
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	8f 32       	cpi	r24, 0x2F	; 47
    190a:	19 f5       	brne	.+70     	; 0x1952 <KEYPAD_u32_Calculator+0xd8>
			{// Open Brackets of operation Condition

				if(local_u8KeypadValue=='-'&&Local_u8_KEYValues[0]==NULL)														 /* Check if Value Is Negative	             */
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	8d 32       	cpi	r24, 0x2D	; 45
    1910:	69 f4       	brne	.+26     	; 0x192c <KEYPAD_u32_Calculator+0xb2>
    1912:	8a 89       	ldd	r24, Y+18	; 0x12
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	41 f4       	brne	.+16     	; 0x192c <KEYPAD_u32_Calculator+0xb2>
				{// Open Brackets of Negative Condition
					Local_u8_KEYValues[0]=local_u8KeypadValue;														  			 /* Enable Flag						         */
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	8a 8b       	std	Y+18, r24	; 0x12
					Lcal_u16_Counter++;																							 /* incerement counter by 1			         */
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	9d 81       	ldd	r25, Y+5	; 0x05
    1924:	01 96       	adiw	r24, 0x01	; 1
    1926:	9d 83       	std	Y+5, r25	; 0x05
    1928:	8c 83       	std	Y+4, r24	; 0x04
    192a:	ca cf       	rjmp	.-108    	; 0x18c0 <KEYPAD_u32_Calculator+0x46>
				}// Close Brackets of Negative Condition

				else//if key value is normal operation
				{// Open Brackets key value is normal operation conditation
					LOCAL_u8_Operation=local_u8KeypadValue;																		 /* assign Operation Value to key value      */
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	8b 83       	std	Y+3, r24	; 0x03
					LOCAL_f32_values[0]=CHAR_2_Decmal(Local_u8_KEYValues);														 /* convert char to decimal by pasiing array of key values as a parameter and stor returned value in array[0]	*/
    1930:	ce 01       	movw	r24, r28
    1932:	42 96       	adiw	r24, 0x12	; 18
    1934:	0e 94 85 0b 	call	0x170a	; 0x170a <CHAR_2_Decmal>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	8a 87       	std	Y+10, r24	; 0x0a
    193e:	9b 87       	std	Y+11, r25	; 0x0b
    1940:	ac 87       	std	Y+12, r26	; 0x0c
    1942:	bd 87       	std	Y+13, r27	; 0x0d
					Clear_array(Local_u8_KEYValues);																			 /* Clear array of key values			     */
    1944:	ce 01       	movw	r24, r28
    1946:	42 96       	adiw	r24, 0x12	; 18
    1948:	0e 94 12 0c 	call	0x1824	; 0x1824 <Clear_array>
					Lcal_u16_Counter=0;																							 /* assign counter to 0				         */
    194c:	1d 82       	std	Y+5, r1	; 0x05
    194e:	1c 82       	std	Y+4, r1	; 0x04
    1950:	b7 cf       	rjmp	.-146    	; 0x18c0 <KEYPAD_u32_Calculator+0x46>
				}// Close Brackets key value is normal operation conditation
			}//Close Brackets of operation Condition
			else if(local_u8KeypadValue=='=')																					 /*	if KEY VAlue Equal '='				     */
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	8d 33       	cpi	r24, 0x3D	; 61
    1956:	09 f0       	breq	.+2      	; 0x195a <KEYPAD_u32_Calculator+0xe0>
    1958:	a0 c0       	rjmp	.+320    	; 0x1a9a <KEYPAD_u32_Calculator+0x220>
			{// Open Brackets of else
				LOCAL_f32_values[1]=CHAR_2_Decmal(Local_u8_KEYValues);															 /* convert char to decimal by pasiing array of key values as a parameter and stor returned value in array[1]	*/
    195a:	ce 01       	movw	r24, r28
    195c:	42 96       	adiw	r24, 0x12	; 18
    195e:	0e 94 85 0b 	call	0x170a	; 0x170a <CHAR_2_Decmal>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8e 87       	std	Y+14, r24	; 0x0e
    1968:	9f 87       	std	Y+15, r25	; 0x0f
    196a:	a8 8b       	std	Y+16, r26	; 0x10
    196c:	b9 8b       	std	Y+17, r27	; 0x11
				Lcal_u16_Counter=0;																							     /* assign counter to 0				         */
    196e:	1d 82       	std	Y+5, r1	; 0x05
    1970:	1c 82       	std	Y+4, r1	; 0x04
				switch(LOCAL_u8_Operation)																						 /* Check Operation Value				     */
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	a8 2f       	mov	r26, r24
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	b8 8f       	std	Y+24, r27	; 0x18
    197a:	af 8b       	std	Y+23, r26	; 0x17
    197c:	2f 89       	ldd	r18, Y+23	; 0x17
    197e:	38 8d       	ldd	r19, Y+24	; 0x18
    1980:	2b 32       	cpi	r18, 0x2B	; 43
    1982:	31 05       	cpc	r19, r1
    1984:	b1 f0       	breq	.+44     	; 0x19b2 <KEYPAD_u32_Calculator+0x138>
    1986:	8f 89       	ldd	r24, Y+23	; 0x17
    1988:	98 8d       	ldd	r25, Y+24	; 0x18
    198a:	8c 32       	cpi	r24, 0x2C	; 44
    198c:	91 05       	cpc	r25, r1
    198e:	34 f4       	brge	.+12     	; 0x199c <KEYPAD_u32_Calculator+0x122>
    1990:	af 89       	ldd	r26, Y+23	; 0x17
    1992:	b8 8d       	ldd	r27, Y+24	; 0x18
    1994:	aa 32       	cpi	r26, 0x2A	; 42
    1996:	b1 05       	cpc	r27, r1
    1998:	91 f1       	breq	.+100    	; 0x19fe <KEYPAD_u32_Calculator+0x184>
    199a:	67 c0       	rjmp	.+206    	; 0x1a6a <KEYPAD_u32_Calculator+0x1f0>
    199c:	2f 89       	ldd	r18, Y+23	; 0x17
    199e:	38 8d       	ldd	r19, Y+24	; 0x18
    19a0:	2d 32       	cpi	r18, 0x2D	; 45
    19a2:	31 05       	cpc	r19, r1
    19a4:	c9 f0       	breq	.+50     	; 0x19d8 <KEYPAD_u32_Calculator+0x15e>
    19a6:	8f 89       	ldd	r24, Y+23	; 0x17
    19a8:	98 8d       	ldd	r25, Y+24	; 0x18
    19aa:	8f 32       	cpi	r24, 0x2F	; 47
    19ac:	91 05       	cpc	r25, r1
    19ae:	d1 f1       	breq	.+116    	; 0x1a24 <KEYPAD_u32_Calculator+0x1aa>
    19b0:	5c c0       	rjmp	.+184    	; 0x1a6a <KEYPAD_u32_Calculator+0x1f0>
				{// Opemn Brackets of Switch
					case '+':
							LOCAL_f32_Result=LOCAL_f32_values[0]+LOCAL_f32_values[1];											 /*Result Equal Summation of tow values	     */
    19b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    19b6:	ac 85       	ldd	r26, Y+12	; 0x0c
    19b8:	bd 85       	ldd	r27, Y+13	; 0x0d
    19ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    19bc:	3f 85       	ldd	r19, Y+15	; 0x0f
    19be:	48 89       	ldd	r20, Y+16	; 0x10
    19c0:	59 89       	ldd	r21, Y+17	; 0x11
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__addsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	8e 83       	std	Y+6, r24	; 0x06
    19d0:	9f 83       	std	Y+7, r25	; 0x07
    19d2:	a8 87       	std	Y+8, r26	; 0x08
    19d4:	b9 87       	std	Y+9, r27	; 0x09
    19d6:	49 c0       	rjmp	.+146    	; 0x1a6a <KEYPAD_u32_Calculator+0x1f0>
							break;// end of case 1
					case '-':

							LOCAL_f32_Result=LOCAL_f32_values[0]-LOCAL_f32_values[1];											 /*Result Equal Subtraction of tow values    */
    19d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    19da:	9b 85       	ldd	r25, Y+11	; 0x0b
    19dc:	ac 85       	ldd	r26, Y+12	; 0x0c
    19de:	bd 85       	ldd	r27, Y+13	; 0x0d
    19e0:	2e 85       	ldd	r18, Y+14	; 0x0e
    19e2:	3f 85       	ldd	r19, Y+15	; 0x0f
    19e4:	48 89       	ldd	r20, Y+16	; 0x10
    19e6:	59 89       	ldd	r21, Y+17	; 0x11
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	8e 83       	std	Y+6, r24	; 0x06
    19f6:	9f 83       	std	Y+7, r25	; 0x07
    19f8:	a8 87       	std	Y+8, r26	; 0x08
    19fa:	b9 87       	std	Y+9, r27	; 0x09
    19fc:	36 c0       	rjmp	.+108    	; 0x1a6a <KEYPAD_u32_Calculator+0x1f0>
							break;// end of case 2
					case '*':
							LOCAL_f32_Result=LOCAL_f32_values[0]*LOCAL_f32_values[1];											 /*Result Equal Multiplication of tow values */
    19fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a00:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a02:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a04:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a06:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a08:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a0a:	48 89       	ldd	r20, Y+16	; 0x10
    1a0c:	59 89       	ldd	r21, Y+17	; 0x11
    1a0e:	bc 01       	movw	r22, r24
    1a10:	cd 01       	movw	r24, r26
    1a12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a16:	dc 01       	movw	r26, r24
    1a18:	cb 01       	movw	r24, r22
    1a1a:	8e 83       	std	Y+6, r24	; 0x06
    1a1c:	9f 83       	std	Y+7, r25	; 0x07
    1a1e:	a8 87       	std	Y+8, r26	; 0x08
    1a20:	b9 87       	std	Y+9, r27	; 0x09
    1a22:	23 c0       	rjmp	.+70     	; 0x1a6a <KEYPAD_u32_Calculator+0x1f0>
							break;// end of case 3
					case '/':

							if(LOCAL_f32_values[1]==0)																		     /* Check if Second Value Equal Zero	     */
    1a24:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a26:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a28:	a8 89       	ldd	r26, Y+16	; 0x10
    1a2a:	b9 89       	ldd	r27, Y+17	; 0x11
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	50 e0       	ldi	r21, 0x00	; 0
    1a38:	0e 94 bd 03 	call	0x77a	; 0x77a <__eqsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	19 f4       	brne	.+6      	; 0x1a46 <KEYPAD_u32_Calculator+0x1cc>
							{//open bracket of Second Value Equal Zero condtion
								LOCAL_u8_f=KEYPAD_u8_FLAG_UP;															         /*Enable Becous Can't Divion on Zero	     */
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	89 83       	std	Y+1, r24	; 0x01
    1a44:	12 c0       	rjmp	.+36     	; 0x1a6a <KEYPAD_u32_Calculator+0x1f0>
							}//close bracket of Second Value Equal Zero condtion

							else
							{//open bracket of else
								LOCAL_f32_Result=LOCAL_f32_values[0]/LOCAL_f32_values[1];										 /*Result Equal division of tow values	     */
    1a46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a48:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a4a:	ac 85       	ldd	r26, Y+12	; 0x0c
    1a4c:	bd 85       	ldd	r27, Y+13	; 0x0d
    1a4e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a50:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a52:	48 89       	ldd	r20, Y+16	; 0x10
    1a54:	59 89       	ldd	r21, Y+17	; 0x11
    1a56:	bc 01       	movw	r22, r24
    1a58:	cd 01       	movw	r24, r26
    1a5a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8e 83       	std	Y+6, r24	; 0x06
    1a64:	9f 83       	std	Y+7, r25	; 0x07
    1a66:	a8 87       	std	Y+8, r26	; 0x08
    1a68:	b9 87       	std	Y+9, r27	; 0x09
							}// close bracket of else
							break;// end of case 4
				}// Close Brackets of Switch
				if(LOCAL_u8_f)                                                                                                   /* Cheack if Flag is enable			     */
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	88 23       	and	r24, r24
    1a6e:	39 f0       	breq	.+14     	; 0x1a7e <KEYPAD_u32_Calculator+0x204>
					{//open bracket of Flag is enable condition
						HLCD_voidClearDisplay();                                                                                 /* Clear Screen						     */
    1a70:	0e 94 9c 10 	call	0x2138	; 0x2138 <HLCD_voidClearDisplay>
						HLCD_voidSendString("MATH ERORR !");                                                                     /* Display MAth Error					     */
    1a74:	80 e6       	ldi	r24, 0x60	; 96
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	0e 94 7f 10 	call	0x20fe	; 0x20fe <HLCD_voidSendString>
    1a7c:	0c c0       	rjmp	.+24     	; 0x1a96 <KEYPAD_u32_Calculator+0x21c>
					}//close bracket of Flag is enable condition
				else
					{//open bracket of else
						HLCD_voidDisplayNumber(LOCAL_f32_Result);																/* Display equation Result				     */
    1a7e:	6e 81       	ldd	r22, Y+6	; 0x06
    1a80:	7f 81       	ldd	r23, Y+7	; 0x07
    1a82:	88 85       	ldd	r24, Y+8	; 0x08
    1a84:	99 85       	ldd	r25, Y+9	; 0x09
    1a86:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__fixsfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 c4 11 	call	0x2388	; 0x2388 <HLCD_voidDisplayNumber>
					}// close bracket of else
					LOCAL_u8_f=KEYPAD_u8_FLAG_DOWN;																				/* disEnable Flag						     */
    1a96:	19 82       	std	Y+1, r1	; 0x01
    1a98:	13 cf       	rjmp	.-474    	; 0x18c0 <KEYPAD_u32_Calculator+0x46>
			}// Close Brackets of else

			else																											    /* Key value is Number					     */
			{//open bracket of else
				Local_u8_KEYValues[Lcal_u16_Counter]=local_u8KeypadValue;														/* store key value in array of charchter     */
    1a9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	42 96       	adiw	r24, 0x12	; 18
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	e2 0f       	add	r30, r18
    1aa6:	f3 1f       	adc	r31, r19
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	80 83       	st	Z, r24
				Lcal_u16_Counter++;
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	9d 83       	std	Y+5, r25	; 0x05
    1ab4:	8c 83       	std	Y+4, r24	; 0x04
    1ab6:	04 cf       	rjmp	.-504    	; 0x18c0 <KEYPAD_u32_Calculator+0x46>

00001ab8 <Private_voidSendInstruction>:
#include"../Include/HAL/LCD/LCD_Private.h"
#include"../Include/HAL/LCD/LCD_Configuraion.h"


void Private_voidSendInstruction (u8 copy_u8Instruction)
{
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	2f 97       	sbiw	r28, 0x0f	; 15
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
    1acc:	8f 87       	std	Y+15, r24	; 0x0f
	/* Instruction --> RS = 0, Write to LCD --> RW = 0 */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_LOW);
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	62 e0       	ldi	r22, 0x02	; 2
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	61 e0       	ldi	r22, 0x01	; 1
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>
	/* Instruction --> Data Port */
	MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Instruction);
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ae6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MDIO_voidSetPortValue>
	/* Enable --> Falling Edge (1 then 0) */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_HIGH);
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	41 e0       	ldi	r20, 0x01	; 1
    1af0:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a0 e0       	ldi	r26, 0x00	; 0
    1afa:	b0 e4       	ldi	r27, 0x40	; 64
    1afc:	8b 87       	std	Y+11, r24	; 0x0b
    1afe:	9c 87       	std	Y+12, r25	; 0x0c
    1b00:	ad 87       	std	Y+13, r26	; 0x0d
    1b02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	4a ef       	ldi	r20, 0xFA	; 250
    1b12:	54 e4       	ldi	r21, 0x44	; 68
    1b14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	8f 83       	std	Y+7, r24	; 0x07
    1b1e:	98 87       	std	Y+8, r25	; 0x08
    1b20:	a9 87       	std	Y+9, r26	; 0x09
    1b22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b24:	6f 81       	ldd	r22, Y+7	; 0x07
    1b26:	78 85       	ldd	r23, Y+8	; 0x08
    1b28:	89 85       	ldd	r24, Y+9	; 0x09
    1b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	5f e3       	ldi	r21, 0x3F	; 63
    1b34:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1b38:	88 23       	and	r24, r24
    1b3a:	2c f4       	brge	.+10     	; 0x1b46 <Private_voidSendInstruction+0x8e>
		__ticks = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9e 83       	std	Y+6, r25	; 0x06
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	3f c0       	rjmp	.+126    	; 0x1bc4 <Private_voidSendInstruction+0x10c>
	else if (__tmp > 65535)
    1b46:	6f 81       	ldd	r22, Y+7	; 0x07
    1b48:	78 85       	ldd	r23, Y+8	; 0x08
    1b4a:	89 85       	ldd	r24, Y+9	; 0x09
    1b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	4f e7       	ldi	r20, 0x7F	; 127
    1b54:	57 e4       	ldi	r21, 0x47	; 71
    1b56:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1b5a:	18 16       	cp	r1, r24
    1b5c:	4c f5       	brge	.+82     	; 0x1bb0 <Private_voidSendInstruction+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e2       	ldi	r20, 0x20	; 32
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	bc 01       	movw	r22, r24
    1b78:	cd 01       	movw	r24, r26
    1b7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9e 83       	std	Y+6, r25	; 0x06
    1b84:	8d 83       	std	Y+5, r24	; 0x05
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <Private_voidSendInstruction+0xee>
    1b88:	88 ec       	ldi	r24, 0xC8	; 200
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9c 83       	std	Y+4, r25	; 0x04
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <Private_voidSendInstruction+0xdc>
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	9e 83       	std	Y+6, r25	; 0x06
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <Private_voidSendInstruction+0xd0>
    1bae:	14 c0       	rjmp	.+40     	; 0x1bd8 <Private_voidSendInstruction+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9e 83       	std	Y+6, r25	; 0x06
    1bc2:	8d 83       	std	Y+5, r24	; 0x05
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	9a 83       	std	Y+2, r25	; 0x02
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <Private_voidSendInstruction+0x118>
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_LOW);
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	60 e0       	ldi	r22, 0x00	; 0
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>

}
    1be2:	2f 96       	adiw	r28, 0x0f	; 15
    1be4:	0f b6       	in	r0, 0x3f	; 63
    1be6:	f8 94       	cli
    1be8:	de bf       	out	0x3e, r29	; 62
    1bea:	0f be       	out	0x3f, r0	; 63
    1bec:	cd bf       	out	0x3d, r28	; 61
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <HLCD_voidInit>:


void HLCD_voidInit(void)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	e8 97       	sbiw	r28, 0x38	; 56
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	a0 ef       	ldi	r26, 0xF0	; 240
    1c0e:	b1 e4       	ldi	r27, 0x41	; 65
    1c10:	8d ab       	std	Y+53, r24	; 0x35
    1c12:	9e ab       	std	Y+54, r25	; 0x36
    1c14:	af ab       	std	Y+55, r26	; 0x37
    1c16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c18:	6d a9       	ldd	r22, Y+53	; 0x35
    1c1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a ef       	ldi	r20, 0xFA	; 250
    1c26:	54 e4       	ldi	r21, 0x44	; 68
    1c28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	89 ab       	std	Y+49, r24	; 0x31
    1c32:	9a ab       	std	Y+50, r25	; 0x32
    1c34:	ab ab       	std	Y+51, r26	; 0x33
    1c36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c38:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <HLCD_voidInit+0x66>
		__ticks = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	98 ab       	std	Y+48, r25	; 0x30
    1c56:	8f a7       	std	Y+47, r24	; 0x2f
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1c5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c60:	9c a9       	ldd	r25, Y+52	; 0x34
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	4c f5       	brge	.+82     	; 0x1cc4 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	6d a9       	ldd	r22, Y+53	; 0x35
    1c74:	7e a9       	ldd	r23, Y+54	; 0x36
    1c76:	8f a9       	ldd	r24, Y+55	; 0x37
    1c78:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e2       	ldi	r20, 0x20	; 32
    1c80:	51 e4       	ldi	r21, 0x41	; 65
    1c82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	98 ab       	std	Y+48, r25	; 0x30
    1c98:	8f a7       	std	Y+47, r24	; 0x2f
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <HLCD_voidInit+0xc6>
    1c9c:	88 ec       	ldi	r24, 0xC8	; 200
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9e a7       	std	Y+46, r25	; 0x2e
    1ca2:	8d a7       	std	Y+45, r24	; 0x2d
    1ca4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ca6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <HLCD_voidInit+0xb4>
    1cac:	9e a7       	std	Y+46, r25	; 0x2e
    1cae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	98 ab       	std	Y+48, r25	; 0x30
    1cb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <HLCD_voidInit+0xa8>
    1cc2:	14 c0       	rjmp	.+40     	; 0x1cec <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cca:	9c a9       	ldd	r25, Y+52	; 0x34
    1ccc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	98 ab       	std	Y+48, r25	; 0x30
    1cd6:	8f a7       	std	Y+47, r24	; 0x2f
    1cd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cda:	98 a9       	ldd	r25, Y+48	; 0x30
    1cdc:	9c a7       	std	Y+44, r25	; 0x2c
    1cde:	8b a7       	std	Y+43, r24	; 0x2b
    1ce0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <HLCD_voidInit+0xf0>
    1ce8:	9c a7       	std	Y+44, r25	; 0x2c
    1cea:	8b a7       	std	Y+43, r24	; 0x2b
	/* wait for 30ms */
	_delay_ms(30);
	/* Function Set Instruction */
	Private_voidSendInstruction(LCD_u8_FUNCTION_SET);
    1cec:	8c e3       	ldi	r24, 0x3C	; 60
    1cee:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Private_voidSendInstruction>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e8       	ldi	r26, 0x80	; 128
    1cf8:	bf e3       	ldi	r27, 0x3F	; 63
    1cfa:	8f a3       	std	Y+39, r24	; 0x27
    1cfc:	98 a7       	std	Y+40, r25	; 0x28
    1cfe:	a9 a7       	std	Y+41, r26	; 0x29
    1d00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	6f a1       	ldd	r22, Y+39	; 0x27
    1d04:	78 a5       	ldd	r23, Y+40	; 0x28
    1d06:	89 a5       	ldd	r24, Y+41	; 0x29
    1d08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8b a3       	std	Y+35, r24	; 0x23
    1d1c:	9c a3       	std	Y+36, r25	; 0x24
    1d1e:	ad a3       	std	Y+37, r26	; 0x25
    1d20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d22:	6b a1       	ldd	r22, Y+35	; 0x23
    1d24:	7c a1       	ldd	r23, Y+36	; 0x24
    1d26:	8d a1       	ldd	r24, Y+37	; 0x25
    1d28:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <HLCD_voidInit+0x150>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9a a3       	std	Y+34, r25	; 0x22
    1d40:	89 a3       	std	Y+33, r24	; 0x21
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <HLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    1d44:	6b a1       	ldd	r22, Y+35	; 0x23
    1d46:	7c a1       	ldd	r23, Y+36	; 0x24
    1d48:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <HLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d60:	89 a5       	ldd	r24, Y+41	; 0x29
    1d62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9a a3       	std	Y+34, r25	; 0x22
    1d82:	89 a3       	std	Y+33, r24	; 0x21
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <HLCD_voidInit+0x1b0>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	98 a3       	std	Y+32, r25	; 0x20
    1d8c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d90:	98 a1       	ldd	r25, Y+32	; 0x20
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <HLCD_voidInit+0x19e>
    1d96:	98 a3       	std	Y+32, r25	; 0x20
    1d98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9a a3       	std	Y+34, r25	; 0x22
    1da2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	89 a1       	ldd	r24, Y+33	; 0x21
    1da6:	9a a1       	ldd	r25, Y+34	; 0x22
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <HLCD_voidInit+0x192>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <HLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6b a1       	ldd	r22, Y+35	; 0x23
    1db0:	7c a1       	ldd	r23, Y+36	; 0x24
    1db2:	8d a1       	ldd	r24, Y+37	; 0x25
    1db4:	9e a1       	ldd	r25, Y+38	; 0x26
    1db6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9a a3       	std	Y+34, r25	; 0x22
    1dc0:	89 a3       	std	Y+33, r24	; 0x21
    1dc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <HLCD_voidInit+0x1da>
    1dd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd4:	8d 8f       	std	Y+29, r24	; 0x1d
	/* wait for more 39 usec */
	_delay_ms(1);
	/* Display ON/OFF Control */
	Private_voidSendInstruction(LCD_u8_DISPLAY_CONTROL);
    1dd6:	8c e0       	ldi	r24, 0x0C	; 12
    1dd8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Private_voidSendInstruction>
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a0 e8       	ldi	r26, 0x80	; 128
    1de2:	bf e3       	ldi	r27, 0x3F	; 63
    1de4:	89 8f       	std	Y+25, r24	; 0x19
    1de6:	9a 8f       	std	Y+26, r25	; 0x1a
    1de8:	ab 8f       	std	Y+27, r26	; 0x1b
    1dea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dec:	69 8d       	ldd	r22, Y+25	; 0x19
    1dee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	4a ef       	ldi	r20, 0xFA	; 250
    1dfa:	54 e4       	ldi	r21, 0x44	; 68
    1dfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	8d 8b       	std	Y+21, r24	; 0x15
    1e06:	9e 8b       	std	Y+22, r25	; 0x16
    1e08:	af 8b       	std	Y+23, r26	; 0x17
    1e0a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e10:	8f 89       	ldd	r24, Y+23	; 0x17
    1e12:	98 8d       	ldd	r25, Y+24	; 0x18
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e8       	ldi	r20, 0x80	; 128
    1e1a:	5f e3       	ldi	r21, 0x3F	; 63
    1e1c:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1e20:	88 23       	and	r24, r24
    1e22:	2c f4       	brge	.+10     	; 0x1e2e <HLCD_voidInit+0x23a>
		__ticks = 1;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9c 8b       	std	Y+20, r25	; 0x14
    1e2a:	8b 8b       	std	Y+19, r24	; 0x13
    1e2c:	3f c0       	rjmp	.+126    	; 0x1eac <HLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1e2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e30:	7e 89       	ldd	r23, Y+22	; 0x16
    1e32:	8f 89       	ldd	r24, Y+23	; 0x17
    1e34:	98 8d       	ldd	r25, Y+24	; 0x18
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	3f ef       	ldi	r19, 0xFF	; 255
    1e3a:	4f e7       	ldi	r20, 0x7F	; 127
    1e3c:	57 e4       	ldi	r21, 0x47	; 71
    1e3e:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1e42:	18 16       	cp	r1, r24
    1e44:	4c f5       	brge	.+82     	; 0x1e98 <HLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e46:	69 8d       	ldd	r22, Y+25	; 0x19
    1e48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e2       	ldi	r20, 0x20	; 32
    1e54:	51 e4       	ldi	r21, 0x41	; 65
    1e56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	bc 01       	movw	r22, r24
    1e60:	cd 01       	movw	r24, r26
    1e62:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	9c 8b       	std	Y+20, r25	; 0x14
    1e6c:	8b 8b       	std	Y+19, r24	; 0x13
    1e6e:	0f c0       	rjmp	.+30     	; 0x1e8e <HLCD_voidInit+0x29a>
    1e70:	88 ec       	ldi	r24, 0xC8	; 200
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	9a 8b       	std	Y+18, r25	; 0x12
    1e76:	89 8b       	std	Y+17, r24	; 0x11
    1e78:	89 89       	ldd	r24, Y+17	; 0x11
    1e7a:	9a 89       	ldd	r25, Y+18	; 0x12
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	f1 f7       	brne	.-4      	; 0x1e7c <HLCD_voidInit+0x288>
    1e80:	9a 8b       	std	Y+18, r25	; 0x12
    1e82:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e84:	8b 89       	ldd	r24, Y+19	; 0x13
    1e86:	9c 89       	ldd	r25, Y+20	; 0x14
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	9c 8b       	std	Y+20, r25	; 0x14
    1e8c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e90:	9c 89       	ldd	r25, Y+20	; 0x14
    1e92:	00 97       	sbiw	r24, 0x00	; 0
    1e94:	69 f7       	brne	.-38     	; 0x1e70 <HLCD_voidInit+0x27c>
    1e96:	14 c0       	rjmp	.+40     	; 0x1ec0 <HLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e98:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	9c 8b       	std	Y+20, r25	; 0x14
    1eaa:	8b 8b       	std	Y+19, r24	; 0x13
    1eac:	8b 89       	ldd	r24, Y+19	; 0x13
    1eae:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb0:	98 8b       	std	Y+16, r25	; 0x10
    1eb2:	8f 87       	std	Y+15, r24	; 0x0f
    1eb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb6:	98 89       	ldd	r25, Y+16	; 0x10
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <HLCD_voidInit+0x2c4>
    1ebc:	98 8b       	std	Y+16, r25	; 0x10
    1ebe:	8f 87       	std	Y+15, r24	; 0x0f
	/* wait for more 39 usec */
	_delay_ms(1);
	/* Clear Display */
	Private_voidSendInstruction(LCD_u8_CLEAR_DISPLAY);
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Private_voidSendInstruction>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e0       	ldi	r26, 0x00	; 0
    1ecc:	b0 e4       	ldi	r27, 0x40	; 64
    1ece:	8b 87       	std	Y+11, r24	; 0x0b
    1ed0:	9c 87       	std	Y+12, r25	; 0x0c
    1ed2:	ad 87       	std	Y+13, r26	; 0x0d
    1ed4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a ef       	ldi	r20, 0xFA	; 250
    1ee4:	54 e4       	ldi	r21, 0x44	; 68
    1ee6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8f 83       	std	Y+7, r24	; 0x07
    1ef0:	98 87       	std	Y+8, r25	; 0x08
    1ef2:	a9 87       	std	Y+9, r26	; 0x09
    1ef4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <HLCD_voidInit+0x324>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <HLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <HLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <HLCD_voidInit+0x384>
    1f5a:	88 ec       	ldi	r24, 0xC8	; 200
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <HLCD_voidInit+0x372>
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <HLCD_voidInit+0x366>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <HLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	6f 81       	ldd	r22, Y+7	; 0x07
    1f84:	78 85       	ldd	r23, Y+8	; 0x08
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <HLCD_voidInit+0x3ae>
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
	/* wait for more 1.53 msec */
	_delay_ms(2);
	/* ENtry Set Mode */
	Private_voidSendInstruction(LCD_u8_ENTRY_SET);
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Private_voidSendInstruction>
}
    1fb0:	e8 96       	adiw	r28, 0x38	; 56
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <HLCD_voidSendData>:


void HLCD_voidSendData(u8 copy_u8Char)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	2f 97       	sbiw	r28, 0x0f	; 15
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	8f 87       	std	Y+15, r24	; 0x0f
	/* Data --> RS = 1, Write to LCD --> RW = 0 */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_u8_HIGH);
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	62 e0       	ldi	r22, 0x02	; 2
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_u8_LOW);
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>
	/* Character --> Data Port */
	MDIO_voidSetPortValue(LCD_DATA_PORT,copy_u8Char);
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ff0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <MDIO_voidSetPortValue>
	/* Enable --> Falling Edge (1 then 0) */
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_HIGH);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a0 e0       	ldi	r26, 0x00	; 0
    2004:	b0 e4       	ldi	r27, 0x40	; 64
    2006:	8b 87       	std	Y+11, r24	; 0x0b
    2008:	9c 87       	std	Y+12, r25	; 0x0c
    200a:	ad 87       	std	Y+13, r26	; 0x0d
    200c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    200e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2010:	7c 85       	ldd	r23, Y+12	; 0x0c
    2012:	8d 85       	ldd	r24, Y+13	; 0x0d
    2014:	9e 85       	ldd	r25, Y+14	; 0x0e
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	4a ef       	ldi	r20, 0xFA	; 250
    201c:	54 e4       	ldi	r21, 0x44	; 68
    201e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	8f 83       	std	Y+7, r24	; 0x07
    2028:	98 87       	std	Y+8, r25	; 0x08
    202a:	a9 87       	std	Y+9, r26	; 0x09
    202c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    202e:	6f 81       	ldd	r22, Y+7	; 0x07
    2030:	78 85       	ldd	r23, Y+8	; 0x08
    2032:	89 85       	ldd	r24, Y+9	; 0x09
    2034:	9a 85       	ldd	r25, Y+10	; 0x0a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	5f e3       	ldi	r21, 0x3F	; 63
    203e:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2042:	88 23       	and	r24, r24
    2044:	2c f4       	brge	.+10     	; 0x2050 <HLCD_voidSendData+0x8e>
		__ticks = 1;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	3f c0       	rjmp	.+126    	; 0x20ce <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2050:	6f 81       	ldd	r22, Y+7	; 0x07
    2052:	78 85       	ldd	r23, Y+8	; 0x08
    2054:	89 85       	ldd	r24, Y+9	; 0x09
    2056:	9a 85       	ldd	r25, Y+10	; 0x0a
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	3f ef       	ldi	r19, 0xFF	; 255
    205c:	4f e7       	ldi	r20, 0x7F	; 127
    205e:	57 e4       	ldi	r21, 0x47	; 71
    2060:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    2064:	18 16       	cp	r1, r24
    2066:	4c f5       	brge	.+82     	; 0x20ba <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e2       	ldi	r20, 0x20	; 32
    2076:	51 e4       	ldi	r21, 0x41	; 65
    2078:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	bc 01       	movw	r22, r24
    2082:	cd 01       	movw	r24, r26
    2084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
    2090:	0f c0       	rjmp	.+30     	; 0x20b0 <HLCD_voidSendData+0xee>
    2092:	88 ec       	ldi	r24, 0xC8	; 200
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 83       	std	Y+4, r25	; 0x04
    2098:	8b 83       	std	Y+3, r24	; 0x03
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	f1 f7       	brne	.-4      	; 0x209e <HLCD_voidSendData+0xdc>
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	9e 83       	std	Y+6, r25	; 0x06
    20ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b0:	8d 81       	ldd	r24, Y+5	; 0x05
    20b2:	9e 81       	ldd	r25, Y+6	; 0x06
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	69 f7       	brne	.-38     	; 0x2092 <HLCD_voidSendData+0xd0>
    20b8:	14 c0       	rjmp	.+40     	; 0x20e2 <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	8d 81       	ldd	r24, Y+5	; 0x05
    20d0:	9e 81       	ldd	r25, Y+6	; 0x06
    20d2:	9a 83       	std	Y+2, r25	; 0x02
    20d4:	89 83       	std	Y+1, r24	; 0x01
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	9a 81       	ldd	r25, Y+2	; 0x02
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	f1 f7       	brne	.-4      	; 0x20da <HLCD_voidSendData+0x118>
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_LOW);
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	40 e0       	ldi	r20, 0x00	; 0
    20e8:	0e 94 65 08 	call	0x10ca	; 0x10ca <MDIO_voidSetPinValue>
}
    20ec:	2f 96       	adiw	r28, 0x0f	; 15
    20ee:	0f b6       	in	r0, 0x3f	; 63
    20f0:	f8 94       	cli
    20f2:	de bf       	out	0x3e, r29	; 62
    20f4:	0f be       	out	0x3f, r0	; 63
    20f6:	cd bf       	out	0x3d, r28	; 61
    20f8:	cf 91       	pop	r28
    20fa:	df 91       	pop	r29
    20fc:	08 95       	ret

000020fe <HLCD_voidSendString>:

void HLCD_voidSendString (u8 *copy_Pu8String)
{
    20fe:	df 93       	push	r29
    2100:	cf 93       	push	r28
    2102:	00 d0       	rcall	.+0      	; 0x2104 <HLCD_voidSendString+0x6>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	0b c0       	rjmp	.+22     	; 0x2124 <HLCD_voidSendString+0x26>
	while (*copy_Pu8String > 0) // Termination Condition
	{
		HLCD_voidSendData(*copy_Pu8String++); //Send char then move pointer to next char
    210e:	e9 81       	ldd	r30, Y+1	; 0x01
    2110:	fa 81       	ldd	r31, Y+2	; 0x02
    2112:	20 81       	ld	r18, Z
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	01 96       	adiw	r24, 0x01	; 1
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	82 2f       	mov	r24, r18
    2120:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <HLCD_voidSendData>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_u8_LOW);
}

void HLCD_voidSendString (u8 *copy_Pu8String)
{
	while (*copy_Pu8String > 0) // Termination Condition
    2124:	e9 81       	ldd	r30, Y+1	; 0x01
    2126:	fa 81       	ldd	r31, Y+2	; 0x02
    2128:	80 81       	ld	r24, Z
    212a:	88 23       	and	r24, r24
    212c:	81 f7       	brne	.-32     	; 0x210e <HLCD_voidSendString+0x10>
	{
		HLCD_voidSendData(*copy_Pu8String++); //Send char then move pointer to next char
	}
}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	cf 91       	pop	r28
    2134:	df 91       	pop	r29
    2136:	08 95       	ret

00002138 <HLCD_voidClearDisplay>:

void HLCD_voidClearDisplay (void)
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	2e 97       	sbiw	r28, 0x0e	; 14
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
	Private_voidSendInstruction(LCD_u8_CLEAR_DISPLAY);
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Private_voidSendInstruction>
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	a0 e0       	ldi	r26, 0x00	; 0
    2158:	b0 e4       	ldi	r27, 0x40	; 64
    215a:	8b 87       	std	Y+11, r24	; 0x0b
    215c:	9c 87       	std	Y+12, r25	; 0x0c
    215e:	ad 87       	std	Y+13, r26	; 0x0d
    2160:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2162:	6b 85       	ldd	r22, Y+11	; 0x0b
    2164:	7c 85       	ldd	r23, Y+12	; 0x0c
    2166:	8d 85       	ldd	r24, Y+13	; 0x0d
    2168:	9e 85       	ldd	r25, Y+14	; 0x0e
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	4a ef       	ldi	r20, 0xFA	; 250
    2170:	54 e4       	ldi	r21, 0x44	; 68
    2172:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	8f 83       	std	Y+7, r24	; 0x07
    217c:	98 87       	std	Y+8, r25	; 0x08
    217e:	a9 87       	std	Y+9, r26	; 0x09
    2180:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2182:	6f 81       	ldd	r22, Y+7	; 0x07
    2184:	78 85       	ldd	r23, Y+8	; 0x08
    2186:	89 85       	ldd	r24, Y+9	; 0x09
    2188:	9a 85       	ldd	r25, Y+10	; 0x0a
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e8       	ldi	r20, 0x80	; 128
    2190:	5f e3       	ldi	r21, 0x3F	; 63
    2192:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    2196:	88 23       	and	r24, r24
    2198:	2c f4       	brge	.+10     	; 0x21a4 <HLCD_voidClearDisplay+0x6c>
		__ticks = 1;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	9e 83       	std	Y+6, r25	; 0x06
    21a0:	8d 83       	std	Y+5, r24	; 0x05
    21a2:	3f c0       	rjmp	.+126    	; 0x2222 <HLCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    21a4:	6f 81       	ldd	r22, Y+7	; 0x07
    21a6:	78 85       	ldd	r23, Y+8	; 0x08
    21a8:	89 85       	ldd	r24, Y+9	; 0x09
    21aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	3f ef       	ldi	r19, 0xFF	; 255
    21b0:	4f e7       	ldi	r20, 0x7F	; 127
    21b2:	57 e4       	ldi	r21, 0x47	; 71
    21b4:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    21b8:	18 16       	cp	r1, r24
    21ba:	4c f5       	brge	.+82     	; 0x220e <HLCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21be:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <HLCD_voidClearDisplay+0xcc>
    21e6:	88 ec       	ldi	r24, 0xC8	; 200
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9c 83       	std	Y+4, r25	; 0x04
    21ec:	8b 83       	std	Y+3, r24	; 0x03
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <HLCD_voidClearDisplay+0xba>
    21f6:	9c 83       	std	Y+4, r25	; 0x04
    21f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	8d 81       	ldd	r24, Y+5	; 0x05
    21fc:	9e 81       	ldd	r25, Y+6	; 0x06
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	9e 83       	std	Y+6, r25	; 0x06
    2202:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	69 f7       	brne	.-38     	; 0x21e6 <HLCD_voidClearDisplay+0xae>
    220c:	14 c0       	rjmp	.+40     	; 0x2236 <HLCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220e:	6f 81       	ldd	r22, Y+7	; 0x07
    2210:	78 85       	ldd	r23, Y+8	; 0x08
    2212:	89 85       	ldd	r24, Y+9	; 0x09
    2214:	9a 85       	ldd	r25, Y+10	; 0x0a
    2216:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	8d 81       	ldd	r24, Y+5	; 0x05
    2224:	9e 81       	ldd	r25, Y+6	; 0x06
    2226:	9a 83       	std	Y+2, r25	; 0x02
    2228:	89 83       	std	Y+1, r24	; 0x01
    222a:	89 81       	ldd	r24, Y+1	; 0x01
    222c:	9a 81       	ldd	r25, Y+2	; 0x02
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <HLCD_voidClearDisplay+0xf6>
    2232:	9a 83       	std	Y+2, r25	; 0x02
    2234:	89 83       	std	Y+1, r24	; 0x01
	/* wait for more 1.53 msec */
	_delay_ms(2);
}
    2236:	2e 96       	adiw	r28, 0x0e	; 14
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	de bf       	out	0x3e, r29	; 62
    223e:	0f be       	out	0x3f, r0	; 63
    2240:	cd bf       	out	0x3d, r28	; 61
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <HLCD_voidGoToPos>:



void HLCD_voidGoToPos (u8 copy_u8RowNum, u8 copy_u8ColumnNo)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	62 97       	sbiw	r28, 0x12	; 18
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
    225c:	8f 87       	std	Y+15, r24	; 0x0f
    225e:	68 8b       	std	Y+16, r22	; 0x10
	switch (copy_u8RowNum)
    2260:	8f 85       	ldd	r24, Y+15	; 0x0f
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	3a 8b       	std	Y+18, r19	; 0x12
    2268:	29 8b       	std	Y+17, r18	; 0x11
    226a:	89 89       	ldd	r24, Y+17	; 0x11
    226c:	9a 89       	ldd	r25, Y+18	; 0x12
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	31 f0       	breq	.+12     	; 0x2280 <HLCD_voidGoToPos+0x38>
    2274:	29 89       	ldd	r18, Y+17	; 0x11
    2276:	3a 89       	ldd	r19, Y+18	; 0x12
    2278:	22 30       	cpi	r18, 0x02	; 2
    227a:	31 05       	cpc	r19, r1
    227c:	31 f0       	breq	.+12     	; 0x228a <HLCD_voidGoToPos+0x42>
    227e:	09 c0       	rjmp	.+18     	; 0x2292 <HLCD_voidGoToPos+0x4a>
	{
	 case LCD_u8_LINE1: Private_voidSendInstruction(LCD_u8_ROW1_ADDRESS + copy_u8ColumnNo); break;
    2280:	88 89       	ldd	r24, Y+16	; 0x10
    2282:	81 58       	subi	r24, 0x81	; 129
    2284:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Private_voidSendInstruction>
    2288:	04 c0       	rjmp	.+8      	; 0x2292 <HLCD_voidGoToPos+0x4a>
	 case LCD_u8_LINE2: Private_voidSendInstruction(LCD_u8_ROW2_ADDRESS + copy_u8ColumnNo); break;
    228a:	88 89       	ldd	r24, Y+16	; 0x10
    228c:	81 54       	subi	r24, 0x41	; 65
    228e:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Private_voidSendInstruction>
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 e8       	ldi	r26, 0x80	; 128
    2298:	bf e3       	ldi	r27, 0x3F	; 63
    229a:	8b 87       	std	Y+11, r24	; 0x0b
    229c:	9c 87       	std	Y+12, r25	; 0x0c
    229e:	ad 87       	std	Y+13, r26	; 0x0d
    22a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	4a ef       	ldi	r20, 0xFA	; 250
    22b0:	54 e4       	ldi	r21, 0x44	; 68
    22b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8f 83       	std	Y+7, r24	; 0x07
    22bc:	98 87       	std	Y+8, r25	; 0x08
    22be:	a9 87       	std	Y+9, r26	; 0x09
    22c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 4d 04 	call	0x89a	; 0x89a <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <HLCD_voidGoToPos+0x9c>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	3f c0       	rjmp	.+126    	; 0x2362 <HLCD_voidGoToPos+0x11a>
	else if (__tmp > 65535)
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	3f ef       	ldi	r19, 0xFF	; 255
    22f0:	4f e7       	ldi	r20, 0x7F	; 127
    22f2:	57 e4       	ldi	r21, 0x47	; 71
    22f4:	0e 94 ed 03 	call	0x7da	; 0x7da <__gtsf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	4c f5       	brge	.+82     	; 0x234e <HLCD_voidGoToPos+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	51 e4       	ldi	r21, 0x41	; 65
    230c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	0f c0       	rjmp	.+30     	; 0x2344 <HLCD_voidGoToPos+0xfc>
    2326:	88 ec       	ldi	r24, 0xC8	; 200
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <HLCD_voidGoToPos+0xea>
    2336:	9c 83       	std	Y+4, r25	; 0x04
    2338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	69 f7       	brne	.-38     	; 0x2326 <HLCD_voidGoToPos+0xde>
    234c:	14 c0       	rjmp	.+40     	; 0x2376 <HLCD_voidGoToPos+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <HLCD_voidGoToPos+0x126>
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
	}
	/* wait for more 39 usec */
	_delay_ms(1);
}
    2376:	62 96       	adiw	r28, 0x12	; 18
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	cf 91       	pop	r28
    2384:	df 91       	pop	r29
    2386:	08 95       	ret

00002388 <HLCD_voidDisplayNumber>:


void HLCD_voidDisplayNumber(s32 copy_u32Number)
{
    2388:	ef 92       	push	r14
    238a:	ff 92       	push	r15
    238c:	0f 93       	push	r16
    238e:	1f 93       	push	r17
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
    2398:	28 97       	sbiw	r28, 0x08	; 8
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	6d 83       	std	Y+5, r22	; 0x05
    23a6:	7e 83       	std	Y+6, r23	; 0x06
    23a8:	8f 83       	std	Y+7, r24	; 0x07
    23aa:	98 87       	std	Y+8, r25	; 0x08
	s32 local_u32Num = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	a0 e0       	ldi	r26, 0x00	; 0
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	9a 83       	std	Y+2, r25	; 0x02
    23b8:	ab 83       	std	Y+3, r26	; 0x03
    23ba:	bc 83       	std	Y+4, r27	; 0x04
	if (copy_u32Number == 0)
    23bc:	8d 81       	ldd	r24, Y+5	; 0x05
    23be:	9e 81       	ldd	r25, Y+6	; 0x06
    23c0:	af 81       	ldd	r26, Y+7	; 0x07
    23c2:	b8 85       	ldd	r27, Y+8	; 0x08
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	a1 05       	cpc	r26, r1
    23c8:	b1 05       	cpc	r27, r1
    23ca:	19 f4       	brne	.+6      	; 0x23d2 <HLCD_voidDisplayNumber+0x4a>
	{
		HLCD_voidSendData('0');
    23cc:	80 e3       	ldi	r24, 0x30	; 48
    23ce:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <HLCD_voidSendData>
	}
	if (copy_u32Number < 0)
    23d2:	8d 81       	ldd	r24, Y+5	; 0x05
    23d4:	9e 81       	ldd	r25, Y+6	; 0x06
    23d6:	af 81       	ldd	r26, Y+7	; 0x07
    23d8:	b8 85       	ldd	r27, Y+8	; 0x08
    23da:	bb 23       	and	r27, r27
    23dc:	0c f0       	brlt	.+2      	; 0x23e0 <HLCD_voidDisplayNumber+0x58>
    23de:	49 c0       	rjmp	.+146    	; 0x2472 <HLCD_voidDisplayNumber+0xea>
	{
		HLCD_voidSendData('-');
    23e0:	8d e2       	ldi	r24, 0x2D	; 45
    23e2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <HLCD_voidSendData>
		copy_u32Number *= -1;
    23e6:	8d 81       	ldd	r24, Y+5	; 0x05
    23e8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ea:	af 81       	ldd	r26, Y+7	; 0x07
    23ec:	b8 85       	ldd	r27, Y+8	; 0x08
    23ee:	b0 95       	com	r27
    23f0:	a0 95       	com	r26
    23f2:	90 95       	com	r25
    23f4:	81 95       	neg	r24
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	af 4f       	sbci	r26, 0xFF	; 255
    23fa:	bf 4f       	sbci	r27, 0xFF	; 255
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	af 83       	std	Y+7, r26	; 0x07
    2402:	b8 87       	std	Y+8, r27	; 0x08
    2404:	36 c0       	rjmp	.+108    	; 0x2472 <HLCD_voidDisplayNumber+0xea>
	}
	while (copy_u32Number != 0)
	{
		local_u32Num = ((local_u32Num * 10) + (copy_u32Number % 10));
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	9a 81       	ldd	r25, Y+2	; 0x02
    240a:	ab 81       	ldd	r26, Y+3	; 0x03
    240c:	bc 81       	ldd	r27, Y+4	; 0x04
    240e:	2a e0       	ldi	r18, 0x0A	; 10
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 c6 12 	call	0x258c	; 0x258c <__mulsi3>
    241e:	7b 01       	movw	r14, r22
    2420:	8c 01       	movw	r16, r24
    2422:	8d 81       	ldd	r24, Y+5	; 0x05
    2424:	9e 81       	ldd	r25, Y+6	; 0x06
    2426:	af 81       	ldd	r26, Y+7	; 0x07
    2428:	b8 85       	ldd	r27, Y+8	; 0x08
    242a:	2a e0       	ldi	r18, 0x0A	; 10
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	50 e0       	ldi	r21, 0x00	; 0
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__divmodsi4>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8e 0d       	add	r24, r14
    2440:	9f 1d       	adc	r25, r15
    2442:	a0 1f       	adc	r26, r16
    2444:	b1 1f       	adc	r27, r17
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	ab 83       	std	Y+3, r26	; 0x03
    244c:	bc 83       	std	Y+4, r27	; 0x04
		copy_u32Number = (copy_u32Number / 10);
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	af 81       	ldd	r26, Y+7	; 0x07
    2454:	b8 85       	ldd	r27, Y+8	; 0x08
    2456:	2a e0       	ldi	r18, 0x0A	; 10
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	50 e0       	ldi	r21, 0x00	; 0
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__divmodsi4>
    2466:	da 01       	movw	r26, r20
    2468:	c9 01       	movw	r24, r18
    246a:	8d 83       	std	Y+5, r24	; 0x05
    246c:	9e 83       	std	Y+6, r25	; 0x06
    246e:	af 83       	std	Y+7, r26	; 0x07
    2470:	b8 87       	std	Y+8, r27	; 0x08
	if (copy_u32Number < 0)
	{
		HLCD_voidSendData('-');
		copy_u32Number *= -1;
	}
	while (copy_u32Number != 0)
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	af 81       	ldd	r26, Y+7	; 0x07
    2478:	b8 85       	ldd	r27, Y+8	; 0x08
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	a1 05       	cpc	r26, r1
    247e:	b1 05       	cpc	r27, r1
    2480:	11 f6       	brne	.-124    	; 0x2406 <HLCD_voidDisplayNumber+0x7e>
    2482:	23 c0       	rjmp	.+70     	; 0x24ca <HLCD_voidDisplayNumber+0x142>
		local_u32Num = ((local_u32Num * 10) + (copy_u32Number % 10));
		copy_u32Number = (copy_u32Number / 10);
	}
	while (local_u32Num != 1)
	{
		HLCD_voidSendData((local_u32Num % 10) + 48);
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	9a 81       	ldd	r25, Y+2	; 0x02
    2488:	ab 81       	ldd	r26, Y+3	; 0x03
    248a:	bc 81       	ldd	r27, Y+4	; 0x04
    248c:	2a e0       	ldi	r18, 0x0A	; 10
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__divmodsi4>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	80 5d       	subi	r24, 0xD0	; 208
    24a2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <HLCD_voidSendData>
		local_u32Num = (local_u32Num / 10);
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	ab 81       	ldd	r26, Y+3	; 0x03
    24ac:	bc 81       	ldd	r27, Y+4	; 0x04
    24ae:	2a e0       	ldi	r18, 0x0A	; 10
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e0       	ldi	r20, 0x00	; 0
    24b4:	50 e0       	ldi	r21, 0x00	; 0
    24b6:	bc 01       	movw	r22, r24
    24b8:	cd 01       	movw	r24, r26
    24ba:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__divmodsi4>
    24be:	da 01       	movw	r26, r20
    24c0:	c9 01       	movw	r24, r18
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	9a 83       	std	Y+2, r25	; 0x02
    24c6:	ab 83       	std	Y+3, r26	; 0x03
    24c8:	bc 83       	std	Y+4, r27	; 0x04
	while (copy_u32Number != 0)
	{
		local_u32Num = ((local_u32Num * 10) + (copy_u32Number % 10));
		copy_u32Number = (copy_u32Number / 10);
	}
	while (local_u32Num != 1)
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	9a 81       	ldd	r25, Y+2	; 0x02
    24ce:	ab 81       	ldd	r26, Y+3	; 0x03
    24d0:	bc 81       	ldd	r27, Y+4	; 0x04
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	91 05       	cpc	r25, r1
    24d6:	a1 05       	cpc	r26, r1
    24d8:	b1 05       	cpc	r27, r1
    24da:	a1 f6       	brne	.-88     	; 0x2484 <HLCD_voidDisplayNumber+0xfc>
	{
		HLCD_voidSendData((local_u32Num % 10) + 48);
		local_u32Num = (local_u32Num / 10);
	}
}
    24dc:	28 96       	adiw	r28, 0x08	; 8
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	f8 94       	cli
    24e2:	de bf       	out	0x3e, r29	; 62
    24e4:	0f be       	out	0x3f, r0	; 63
    24e6:	cd bf       	out	0x3d, r28	; 61
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	08 95       	ret

000024f6 <LCD_voidSendSpecialCharacter>:


void LCD_voidSendSpecialCharacter (u8 *copy_pu8CharArr, u8 copy_u8PatternNum,
								   u8 copy_u8LineNum,   u8 copy_ColNum)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	27 97       	sbiw	r28, 0x07	; 7
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	9c 83       	std	Y+4, r25	; 0x04
    250c:	8b 83       	std	Y+3, r24	; 0x03
    250e:	6d 83       	std	Y+5, r22	; 0x05
    2510:	4e 83       	std	Y+6, r20	; 0x06
    2512:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress, local_u8Counter;
	/* Calculate CGRAM Address = Pattern Number * 8 */
	local_u8CGRAMAddress = copy_u8PatternNum * 8;
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	80 64       	ori	r24, 0x40	; 64
    252c:	8a 83       	std	Y+2, r24	; 0x02
	/* Send Command to set CGRAM Address */
	Private_voidSendInstruction(local_u8CGRAMAddress);
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Private_voidSendInstruction>

	for (local_u8Counter=0; local_u8Counter < 8; local_u8Counter++)
    2534:	19 82       	std	Y+1, r1	; 0x01
    2536:	0e c0       	rjmp	.+28     	; 0x2554 <LCD_voidSendSpecialCharacter+0x5e>
	{
		/* Send byte from character array */
		HLCD_voidSendData(copy_pu8CharArr[local_u8Counter]);
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	fc 01       	movw	r30, r24
    2544:	e2 0f       	add	r30, r18
    2546:	f3 1f       	adc	r31, r19
    2548:	80 81       	ld	r24, Z
    254a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <HLCD_voidSendData>
	local_u8CGRAMAddress = copy_u8PatternNum * 8;
	SET_BIT(local_u8CGRAMAddress,6);
	/* Send Command to set CGRAM Address */
	Private_voidSendInstruction(local_u8CGRAMAddress);

	for (local_u8Counter=0; local_u8Counter < 8; local_u8Counter++)
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	8f 5f       	subi	r24, 0xFF	; 255
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	88 30       	cpi	r24, 0x08	; 8
    2558:	78 f3       	brcs	.-34     	; 0x2538 <LCD_voidSendSpecialCharacter+0x42>
		/* Send byte from character array */
		HLCD_voidSendData(copy_pu8CharArr[local_u8Counter]);
	}

	/* Send Command to set DDRAM Address */
	HLCD_voidGoToPos(copy_u8LineNum,copy_ColNum);
    255a:	8e 81       	ldd	r24, Y+6	; 0x06
    255c:	6f 81       	ldd	r22, Y+7	; 0x07
    255e:	0e 94 24 11 	call	0x2248	; 0x2248 <HLCD_voidGoToPos>
	/* Display pattern from CGRAM */
	HLCD_voidSendData(copy_u8PatternNum);
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <HLCD_voidSendData>
}
    2568:	27 96       	adiw	r28, 0x07	; 7
    256a:	0f b6       	in	r0, 0x3f	; 63
    256c:	f8 94       	cli
    256e:	de bf       	out	0x3e, r29	; 62
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	cd bf       	out	0x3d, r28	; 61
    2574:	cf 91       	pop	r28
    2576:	df 91       	pop	r29
    2578:	08 95       	ret

0000257a <main>:
/****************************************************/
#include"../Include/HAL/LCD/LCD_Interface.h"
#include"../Include/HAL/LCD/LCD_Private.h"
#include"../Include/HAL/LCD/LCD_Configuraion.h"
void main (void)
{
    257a:	df 93       	push	r29
    257c:	cf 93       	push	r28
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_u32_Calculator();																									/* Calling alculator Function	*/
    2582:	0e 94 3d 0c 	call	0x187a	; 0x187a <KEYPAD_u32_Calculator>
}
    2586:	cf 91       	pop	r28
    2588:	df 91       	pop	r29
    258a:	08 95       	ret

0000258c <__mulsi3>:
    258c:	62 9f       	mul	r22, r18
    258e:	d0 01       	movw	r26, r0
    2590:	73 9f       	mul	r23, r19
    2592:	f0 01       	movw	r30, r0
    2594:	82 9f       	mul	r24, r18
    2596:	e0 0d       	add	r30, r0
    2598:	f1 1d       	adc	r31, r1
    259a:	64 9f       	mul	r22, r20
    259c:	e0 0d       	add	r30, r0
    259e:	f1 1d       	adc	r31, r1
    25a0:	92 9f       	mul	r25, r18
    25a2:	f0 0d       	add	r31, r0
    25a4:	83 9f       	mul	r24, r19
    25a6:	f0 0d       	add	r31, r0
    25a8:	74 9f       	mul	r23, r20
    25aa:	f0 0d       	add	r31, r0
    25ac:	65 9f       	mul	r22, r21
    25ae:	f0 0d       	add	r31, r0
    25b0:	99 27       	eor	r25, r25
    25b2:	72 9f       	mul	r23, r18
    25b4:	b0 0d       	add	r27, r0
    25b6:	e1 1d       	adc	r30, r1
    25b8:	f9 1f       	adc	r31, r25
    25ba:	63 9f       	mul	r22, r19
    25bc:	b0 0d       	add	r27, r0
    25be:	e1 1d       	adc	r30, r1
    25c0:	f9 1f       	adc	r31, r25
    25c2:	bd 01       	movw	r22, r26
    25c4:	cf 01       	movw	r24, r30
    25c6:	11 24       	eor	r1, r1
    25c8:	08 95       	ret

000025ca <__divmodsi4>:
    25ca:	97 fb       	bst	r25, 7
    25cc:	09 2e       	mov	r0, r25
    25ce:	05 26       	eor	r0, r21
    25d0:	0e d0       	rcall	.+28     	; 0x25ee <__divmodsi4_neg1>
    25d2:	57 fd       	sbrc	r21, 7
    25d4:	04 d0       	rcall	.+8      	; 0x25de <__divmodsi4_neg2>
    25d6:	14 d0       	rcall	.+40     	; 0x2600 <__udivmodsi4>
    25d8:	0a d0       	rcall	.+20     	; 0x25ee <__divmodsi4_neg1>
    25da:	00 1c       	adc	r0, r0
    25dc:	38 f4       	brcc	.+14     	; 0x25ec <__divmodsi4_exit>

000025de <__divmodsi4_neg2>:
    25de:	50 95       	com	r21
    25e0:	40 95       	com	r20
    25e2:	30 95       	com	r19
    25e4:	21 95       	neg	r18
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	4f 4f       	sbci	r20, 0xFF	; 255
    25ea:	5f 4f       	sbci	r21, 0xFF	; 255

000025ec <__divmodsi4_exit>:
    25ec:	08 95       	ret

000025ee <__divmodsi4_neg1>:
    25ee:	f6 f7       	brtc	.-4      	; 0x25ec <__divmodsi4_exit>
    25f0:	90 95       	com	r25
    25f2:	80 95       	com	r24
    25f4:	70 95       	com	r23
    25f6:	61 95       	neg	r22
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	8f 4f       	sbci	r24, 0xFF	; 255
    25fc:	9f 4f       	sbci	r25, 0xFF	; 255
    25fe:	08 95       	ret

00002600 <__udivmodsi4>:
    2600:	a1 e2       	ldi	r26, 0x21	; 33
    2602:	1a 2e       	mov	r1, r26
    2604:	aa 1b       	sub	r26, r26
    2606:	bb 1b       	sub	r27, r27
    2608:	fd 01       	movw	r30, r26
    260a:	0d c0       	rjmp	.+26     	; 0x2626 <__udivmodsi4_ep>

0000260c <__udivmodsi4_loop>:
    260c:	aa 1f       	adc	r26, r26
    260e:	bb 1f       	adc	r27, r27
    2610:	ee 1f       	adc	r30, r30
    2612:	ff 1f       	adc	r31, r31
    2614:	a2 17       	cp	r26, r18
    2616:	b3 07       	cpc	r27, r19
    2618:	e4 07       	cpc	r30, r20
    261a:	f5 07       	cpc	r31, r21
    261c:	20 f0       	brcs	.+8      	; 0x2626 <__udivmodsi4_ep>
    261e:	a2 1b       	sub	r26, r18
    2620:	b3 0b       	sbc	r27, r19
    2622:	e4 0b       	sbc	r30, r20
    2624:	f5 0b       	sbc	r31, r21

00002626 <__udivmodsi4_ep>:
    2626:	66 1f       	adc	r22, r22
    2628:	77 1f       	adc	r23, r23
    262a:	88 1f       	adc	r24, r24
    262c:	99 1f       	adc	r25, r25
    262e:	1a 94       	dec	r1
    2630:	69 f7       	brne	.-38     	; 0x260c <__udivmodsi4_loop>
    2632:	60 95       	com	r22
    2634:	70 95       	com	r23
    2636:	80 95       	com	r24
    2638:	90 95       	com	r25
    263a:	9b 01       	movw	r18, r22
    263c:	ac 01       	movw	r20, r24
    263e:	bd 01       	movw	r22, r26
    2640:	cf 01       	movw	r24, r30
    2642:	08 95       	ret

00002644 <__prologue_saves__>:
    2644:	2f 92       	push	r2
    2646:	3f 92       	push	r3
    2648:	4f 92       	push	r4
    264a:	5f 92       	push	r5
    264c:	6f 92       	push	r6
    264e:	7f 92       	push	r7
    2650:	8f 92       	push	r8
    2652:	9f 92       	push	r9
    2654:	af 92       	push	r10
    2656:	bf 92       	push	r11
    2658:	cf 92       	push	r12
    265a:	df 92       	push	r13
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
    266c:	ca 1b       	sub	r28, r26
    266e:	db 0b       	sbc	r29, r27
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	09 94       	ijmp

0000267c <__epilogue_restores__>:
    267c:	2a 88       	ldd	r2, Y+18	; 0x12
    267e:	39 88       	ldd	r3, Y+17	; 0x11
    2680:	48 88       	ldd	r4, Y+16	; 0x10
    2682:	5f 84       	ldd	r5, Y+15	; 0x0f
    2684:	6e 84       	ldd	r6, Y+14	; 0x0e
    2686:	7d 84       	ldd	r7, Y+13	; 0x0d
    2688:	8c 84       	ldd	r8, Y+12	; 0x0c
    268a:	9b 84       	ldd	r9, Y+11	; 0x0b
    268c:	aa 84       	ldd	r10, Y+10	; 0x0a
    268e:	b9 84       	ldd	r11, Y+9	; 0x09
    2690:	c8 84       	ldd	r12, Y+8	; 0x08
    2692:	df 80       	ldd	r13, Y+7	; 0x07
    2694:	ee 80       	ldd	r14, Y+6	; 0x06
    2696:	fd 80       	ldd	r15, Y+5	; 0x05
    2698:	0c 81       	ldd	r16, Y+4	; 0x04
    269a:	1b 81       	ldd	r17, Y+3	; 0x03
    269c:	aa 81       	ldd	r26, Y+2	; 0x02
    269e:	b9 81       	ldd	r27, Y+1	; 0x01
    26a0:	ce 0f       	add	r28, r30
    26a2:	d1 1d       	adc	r29, r1
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	ed 01       	movw	r28, r26
    26b0:	08 95       	ret

000026b2 <_exit>:
    26b2:	f8 94       	cli

000026b4 <__stop_program>:
    26b4:	ff cf       	rjmp	.-2      	; 0x26b4 <__stop_program>
